Microsoft (R) Macro Assembler Version 14.43.34808.0	    05/13/25 13:19:04
Pacman Gam						     Page 1 - 1


				TITLE Pacman Game
				
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				
				; Add Windows API imports
				includelib kernel32.lib
				includelib winmm.lib     ; For playing MP3 files
				
				; External function declarations
				Beep PROTO,
				    dwFreq:DWORD,
				    dwDuration:DWORD
				
				PlaySound PROTO,
				    pszSound:PTR BYTE,
				    hmod:DWORD,
				    fdwSound:DWORD
				
				mciSendStringA PROTO,
				    lpszCommand:PTR BYTE,
				    lpszReturnString:PTR BYTE,
				    cchReturn:DWORD,
				    hCallback:DWORD
				
				; Sound flags for PlaySound
 = 00000000			SND_SYNC     EQU 00000000h    ; Play synchronously
 = 00000001			SND_ASYNC    EQU 00000001h    ; Play asynchronously
 = 00020000			SND_FILENAME EQU 00020000h    ; Sound is a path to a file
				
 00000000			.data
				; Welcome screen
 00000000 20 2E 2D 2D 2D	welcomeArt BYTE " .----------------.   .----------------.   .----------------.   .----------------.   .----------------.   .----------------.", 13, 10
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2E 20
	   20 20 2E 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2E
	   20 20 20 2E 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2E 20 20 20 2E
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2E 20 20 20
	   2E 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2E 20 20
	   20 2E 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2E 0D
	   0A
 0000007E  7C 20 2E 2D 2D	          BYTE "| .--------------. | | .--------------. | | .--------------. | | .--------------. | | .--------------. | | .--------------. |", 13, 10
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2E 20 7C
	   20 7C 20 2E 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2E 20
	   7C 20 7C 20 2E
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2E
	   20 7C 20 7C 20
	   2E 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2E 20 7C 20 7C
	   20 2E 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2E 20 7C 20
	   7C 20 2E 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2E 20 7C
	   0D 0A
 000000FD  7C 20 7C 20 20	          BYTE "| |   ______     | | | |      __      | | | |     ______   | | | | ____    ____ | | | |      __      | | | | ____  _____  | |", 13, 10
	   20 5F 5F 5F 5F
	   5F 5F 20 20 20
	   20 20 7C 20 7C
	   20 7C 20 7C 20
	   20 20 20 20 20
	   5F 5F 20 20 20
	   20 20 20 7C 20
	   7C 20 7C 20 7C
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 20 20 20 7C
	   20 7C 20 7C 20
	   7C 20 5F 5F 5F
	   5F 20 20 20 20
	   5F 5F 5F 5F 20
	   7C 20 7C 20 7C
	   20 7C 20 20 20
	   20 20 20 5F 5F
	   20 20 20 20 20
	   20 7C 20 7C 20
	   7C 20 7C 20 5F
	   5F 5F 5F 20 20
	   5F 5F 5F 5F 5F
	   20 20 7C 20 7C
	   0D 0A
 0000017C  7C 20 7C 20 20	          BYTE "| |  |_   __ \   | | | |     /  \     | | | |   .' ___  |  | | | ||_   \  /   _|| | | |     /  \     | | | ||_   \|_   _| | |", 13, 10
	   7C 5F 20 20 20
	   5F 5F 20 5C 20
	   20 20 7C 20 7C
	   20 7C 20 7C 20
	   20 20 20 20 2F
	   20 20 5C 20 20
	   20 20 20 7C 20
	   7C 20 7C 20 7C
	   20 20 20 2E 27
	   20 5F 5F 5F 20
	   20 7C 20 20 7C
	   20 7C 20 7C 20
	   7C 7C 5F 20 20
	   20 5C 20 20 2F
	   20 20 20 5F 7C
	   7C 20 7C 20 7C
	   20 7C 20 20 20
	   20 20 2F 20 20
	   5C 20 20 20 20
	   20 7C 20 7C 20
	   7C 20 7C 7C 5F
	   20 20 20 5C 7C
	   5F 20 20 20 5F
	   7C 20 7C 20 7C
	   0D 0A
 000001FB  7C 20 7C 20 20	          BYTE "| |    | |__) |  | | | |    / /\ \    | | | |  / .'   \_|  | | | |  |   \/   |  | | | |    / /\ \    | | | |  |   \ | |   | |", 13, 10
	   20 20 7C 20 7C
	   5F 5F 29 20 7C
	   20 20 7C 20 7C
	   20 7C 20 7C 20
	   20 20 20 2F 20
	   2F 5C 20 5C 20
	   20 20 20 7C 20
	   7C 20 7C 20 7C
	   20 20 2F 20 2E
	   27 20 20 20 5C
	   5F 7C 20 20 7C
	   20 7C 20 7C 20
	   7C 20 20 7C 20
	   20 20 5C 2F 20
	   20 20 7C 20 20
	   7C 20 7C 20 7C
	   20 7C 20 20 20
	   20 2F 20 2F 5C
	   20 5C 20 20 20
	   20 7C 20 7C 20
	   7C 20 7C 20 20
	   7C 20 20 20 5C
	   20 7C 20 7C 20
	   20 20 7C 20 7C
	   0D 0A
 0000027A  7C 20 7C 20 20	          BYTE "| |    |  ___/   | | | |   / ____ \   | | | |  | |         | | | |  | |\  /| |  | | | |   / ____ \   | | | |  | |\ \| |   | |", 13, 10
	   20 20 7C 20 20
	   5F 5F 5F 2F 20
	   20 20 7C 20 7C
	   20 7C 20 7C 20
	   20 20 2F 20 5F
	   5F 5F 5F 20 5C
	   20 20 20 7C 20
	   7C 20 7C 20 7C
	   20 20 7C 20 7C
	   20 20 20 20 20
	   20 20 20 20 7C
	   20 7C 20 7C 20
	   7C 20 20 7C 20
	   7C 5C 20 20 2F
	   7C 20 7C 20 20
	   7C 20 7C 20 7C
	   20 7C 20 20 20
	   2F 20 5F 5F 5F
	   5F 20 5C 20 20
	   20 7C 20 7C 20
	   7C 20 7C 20 20
	   7C 20 7C 5C 20
	   5C 7C 20 7C 20
	   20 20 7C 20 7C
	   0D 0A
 000002F9  7C 20 7C 20 20	          BYTE "| |   _| |_      | | | | _/ /    \ \_ | | | |  \ `.___.'\  | | | | _| |_\/_| |_ | | | | _/ /    \ \_ | | | | _| |_\   |_  | |", 13, 10
	   20 5F 7C 20 7C
	   5F 20 20 20 20
	   20 20 7C 20 7C
	   20 7C 20 7C 20
	   5F 2F 20 2F 20
	   20 20 20 5C 20
	   5C 5F 20 7C 20
	   7C 20 7C 20 7C
	   20 20 5C 20 60
	   2E 5F 5F 5F 2E
	   27 5C 20 20 7C
	   20 7C 20 7C 20
	   7C 20 5F 7C 20
	   7C 5F 5C 2F 5F
	   7C 20 7C 5F 20
	   7C 20 7C 20 7C
	   20 7C 20 5F 2F
	   20 2F 20 20 20
	   20 5C 20 5C 5F
	   20 7C 20 7C 20
	   7C 20 7C 20 5F
	   7C 20 7C 5F 5C
	   20 20 20 7C 5F
	   20 20 7C 20 7C
	   0D 0A
 00000378  7C 20 7C 20 20	          BYTE "| |  |_____|     | | | ||____|  |____|| | | |   `._____.'  | | | ||_____||_____|| | | ||____|  |____|| | | ||_____|\____| | |", 13, 10
	   7C 5F 5F 5F 5F
	   5F 7C 20 20 20
	   20 20 7C 20 7C
	   20 7C 20 7C 7C
	   5F 5F 5F 5F 7C
	   20 20 7C 5F 5F
	   5F 5F 7C 7C 20
	   7C 20 7C 20 7C
	   20 20 20 60 2E
	   5F 5F 5F 5F 5F
	   2E 27 20 20 7C
	   20 7C 20 7C 20
	   7C 7C 5F 5F 5F
	   5F 5F 7C 7C 5F
	   5F 5F 5F 5F 7C
	   7C 20 7C 20 7C
	   20 7C 7C 5F 5F
	   5F 5F 7C 20 20
	   7C 5F 5F 5F 5F
	   7C 7C 20 7C 20
	   7C 20 7C 7C 5F
	   5F 5F 5F 5F 7C
	   5C 5F 5F 5F 5F
	   7C 20 7C 20 7C
	   0D 0A
 000003F7  7C 20 7C 20 20	          BYTE "| |              | | | |              | | | |              | | | |              | | | |              | | | |              | |", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 7C
	   20 7C 20 7C 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 7C 20
	   7C 20 7C 20 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   20 7C 20 7C 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 7C 20 7C
	   20 7C 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 7C 20
	   7C 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 7C
	   0D 0A
 00000476  7C 20 27 2D 2D	          BYTE "| '--------------' | | '--------------' | | '--------------' | | '--------------' | | '--------------' | | '--------------' |", 13, 10
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 27 20 7C
	   20 7C 20 27 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 27 20
	   7C 20 7C 20 27
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 27
	   20 7C 20 7C 20
	   27 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   27 20 7C 20 7C
	   20 27 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 27 20 7C 20
	   7C 20 27 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 27 20 7C
	   0D 0A
 000004F5  20 27 2D 2D 2D	          BYTE " '----------------'   '----------------'   '----------------'   '----------------'   '----------------'   '----------------' ", 0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 27 20
	   20 20 27 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 27
	   20 20 20 27 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   27 20 20 20 27
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 27 20 20 20
	   27 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 27 20 20
	   20 27 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 27 20
	   00
				
 00000573 45 6E 74 65 72	namePrompt BYTE "Enter your name: ", 0
	   20 79 6F 75 72
	   20 6E 61 6D 65
	   3A 20 00
 00000585 53 65 6C 65 63	levelPrompt BYTE "Select level (1-3): ", 0
	   74 20 6C 65 76
	   65 6C 20 28 31
	   2D 33 29 3A 20
	   00
 0000059A 4C 65 76 65 6C	level1Msg BYTE "Level 1 - Classic Pacman", 0
	   20 31 20 2D 20
	   43 6C 61 73 73
	   69 63 20 50 61
	   63 6D 61 6E 00
 000005B3 4C 65 76 65 6C	level2Msg BYTE "Level 2 - Coming Soon!", 0
	   20 32 20 2D 20
	   43 6F 6D 69 6E
	   67 20 53 6F 6F
	   6E 21 00
 000005CA 4C 65 76 65 6C	level3Msg BYTE "Level 3 - Teleport Maze", 0
	   20 33 20 2D 20
	   54 65 6C 65 70
	   6F 72 74 20 4D
	   61 7A 65 00
 000005E2 49 6E 76 61 6C	invalidLevelMsg BYTE "Invalid level. Please select 1-3.", 0
	   69 64 20 6C 65
	   76 65 6C 2E 20
	   50 6C 65 61 73
	   65 20 73 65 6C
	   65 63 74 20 31
	   2D 33 2E 00
 00000604  00000020 [		playerName BYTE 32 DUP(0)    ; Buffer for player name
	    00
	   ]
 00000624 50 6C 61 79 65	nameMsg BYTE "Player: ", 0
	   72 3A 20 00
 0000062D 01			currentLevel BYTE 1          ; Current game level
				
				; Game grid size
 0000062E 00000040		gridWidth DWORD 64
 00000632 00000020		gridHeight DWORD 32
				
				; Character representations
 00000636 23 00			wallChar BYTE '#', 0
 00000638 43 00			pacmanChar BYTE 'C', 0
 0000063A 47 00			ghostChar BYTE 'G', 0                ; Changed from 'P' to 'G'
 0000063C 67 00			vulnerableGhostChar BYTE 'g', 0      ; Changed from 'p' to 'g'
 0000063E 20 00			emptyChar BYTE ' ', 0
 00000640 2E 00			dotChar BYTE '.', 0
 00000642 46 00			fruitChar BYTE 'F', 0   ; Explicit definition of fruit as 'F'
				
				; Game grid (32x64)
 00000644  00000800 [		grid BYTE 2048 DUP(?)  ; 32 * 64 = 2048
	    00
	   ]
				
				; Game state variables
 00000E44 00000003		lives DWORD 3          ; Player starts with 3 lives
 00000E48 00000000		score DWORD 0          ; Player's score
 00000E4C 00			lastCellContent BYTE 0 ; Stores what was under the ghost before it moved
 00000E4D 00			powerUpActive BYTE 0   ; New: 1 if power-up is active, 0 if not
 00000E4E 00000000		powerUpTimer DWORD 0   ; New: Timer for power-up duration (in game ticks)
 00000E52 000000C8		powerUpDuration DWORD 200  ; New: Duration of power-up (20 seconds * 10 ticks per second)
				
				; Score and lives display
 00000E56 53 63 6F 72 65	scoreMsg BYTE "Score: ", 0
	   3A 20 00
 00000E5E 4C 69 76 65 73	livesMsg BYTE "Lives: ", 0
	   3A 20 00
				
				; Console parameters
 00000E66 00000000		consoleHandle DWORD ?
 00000E6A 00000000		cursorInfo CONSOLE_CURSOR_INFO <>
	   00000000
 00000E72 0000 0000		coordScreen COORD <>
 00000E76 0000 0000 0000	rectScreen SMALL_RECT <>
	   0000
 00000E7E 0000 0000		bufferSize COORD <>
 00000E82 0000 0000		bufferCoord COORD <>
 00000E86 0000			charAttr WORD ?
 00000E88 00000000		cellsWritten DWORD ?
				
				; Entity positions
 00000E8C 00000000		pacmanPos DWORD 0      ; Pacman position (row * gridWidth + col)
 00000E90 00000000		ghost1Pos DWORD 0      ; Ghost positions
 00000E94 00000000		ghost2Pos DWORD 0
 00000E98 00000000		ghost3Pos DWORD 0
 00000E9C 00000000		ghost4Pos DWORD 0
 00000EA0 00000000		ghost5Pos DWORD 0      ; Fifth ghost for level 2
				
				; Game state
 00000EA4 01			gameRunning BYTE 1     ; 1 = game is running, 0 = game is over
 00000EA5 00000000		remainingDots DWORD 0  ; Number of dots remaining in the grid
 00000EA9 00			gameEndReason BYTE 0   ; 0 = not ended, 1 = lives lost, 2 = all pellets collected, 3 = quit by player
				
				; Directions for movement
 00000EAA 00000000		UP_DIR DWORD 0
 00000EAE 00000001		RIGHT_DIR DWORD 1
 00000EB2 00000002		DOWN_DIR DWORD 2
 00000EB6 00000003		LEFT_DIR DWORD 3
				
				; Input key values
 00000EBA 00000077		KEY_W DWORD 119        ; 'w'
 00000EBE 00000061		KEY_A DWORD 97         ; 'a'
 00000EC2 00000073		KEY_S DWORD 115        ; 's'
 00000EC6 00000064		KEY_D DWORD 100        ; 'd'
 00000ECA 00000071		KEY_Q DWORD 113        ; 'q' to quit
				
				; Message strings
 00000ECE 50 72 65 73 73	msgQuit BYTE "Press Q to quit, WASD to move Pacman", 0
	   20 51 20 74 6F
	   20 71 75 69 74
	   2C 20 57 41 53
	   44 20 74 6F 20
	   6D 6F 76 65 20
	   50 61 63 6D 61
	   6E 00
 00000EF3 47 61 6D 65 20	msgGameOver BYTE "Game Over!", 0
	   4F 76 65 72 21
	   00
 00000EFE 59 6F 75 20 57	msgWin BYTE "You Win! All pellets collected!", 0
	   69 6E 21 20 41
	   6C 6C 20 70 65
	   6C 6C 65 74 73
	   20 63 6F 6C 6C
	   65 63 74 65 64
	   21 00
 00000F1E 52 65 61 73 6F	msgReason BYTE "Reason: ", 0
	   6E 3A 20 00
 00000F27 41 6C 6C 20 6C	msgLivesLost BYTE "All lives lost", 0
	   69 76 65 73 20
	   6C 6F 73 74 00
 00000F36 41 6C 6C 20 70	msgAllPelletsCollected BYTE "All pellets collected", 0
	   65 6C 6C 65 74
	   73 20 63 6F 6C
	   6C 65 63 74 65
	   64 00
 00000F4C 47 61 6D 65 20	msgQuitGame BYTE "Game quit by player", 0
	   71 75 69 74 20
	   62 79 20 70 6C
	   61 79 65 72 00
				
				; Game over ASCII art
 00000F60 20 20 20 20 20	gameOverArt BYTE "                                                                                                                                                                                                        ", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 0000102A  20 20 20 20 20	           BYTE "                                                                                                                                                                                                        ", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 000010F4  20 20 20 20 20	           BYTE "        GGGGGGGGGGGGG               AAA               MMMMMMMM               MMMMMMMMEEEEEEEEEEEEEEEEEEEEEE          OOOOOOOOO     VVVVVVVV           VVVVVVVVEEEEEEEEEEEEEEEEEEEEEERRRRRRRRRRRRRRRRR   ", 13, 10
	   20 20 20 47 47
	   47 47 47 47 47
	   47 47 47 47 47
	   47 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 41 41 41 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 4D
	   4D 4D 4D 4D 4D
	   4D 4D 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 4D 4D 4D
	   4D 4D 4D 4D 4D
	   45 45 45 45 45
	   45 45 45 45 45
	   45 45 45 45 45
	   45 45 45 45 45
	   45 45 20 20 20
	   20 20 20 20 20
	   20 20 4F 4F 4F
	   4F 4F 4F 4F 4F
	   4F 20 20 20 20
	   20 56 56 56 56
	   56 56 56 56 20
	   20 20 20 20 20
	   20 20 20 20 20
	   56 56 56 56 56
	   56 56 56 45 45
	   45 45 45 45 45
	   45 45 45 45 45
	   45 45 45 45 45
	   45 45 45 45 45
	   52 52 52 52 52
	   52 52 52 52 52
	   52 52 52 52 52
	   52 52 20 20 20
	   0D 0A
 000011BE  20 20 20 20 20	           BYTE "     GGG::::::::::::G              A:::A              M:::::::M             M:::::::ME::::::::::::::::::::E        OO:::::::::OO   V::::::V           V::::::VE::::::::::::::::::::ER::::::::::::::::R  ", 13, 10
	   47 47 47 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   47 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   41 3A 3A 3A 41
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 4D
	   3A 3A 3A 3A 3A
	   3A 3A 4D 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 4D 3A 3A 3A
	   3A 3A 3A 3A 4D
	   45 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 45 20 20 20
	   20 20 20 20 20
	   4F 4F 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 4F 4F 20 20
	   20 56 3A 3A 3A
	   3A 3A 3A 56 20
	   20 20 20 20 20
	   20 20 20 20 20
	   56 3A 3A 3A 3A
	   3A 3A 56 45 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 45
	   52 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 52 20 20
	   0D 0A
 00001288  20 20 20 47 47	           BYTE "   GG:::::::::::::::G             A:::::A             M::::::::M           M::::::::ME::::::::::::::::::::E      OO:::::::::::::OO V::::::V           V::::::VE::::::::::::::::::::ER::::::RRRRRR:::::R ", 13, 10
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   47 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 41
	   3A 3A 3A 3A 3A
	   41 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 4D
	   3A 3A 3A 3A 3A
	   3A 3A 3A 4D 20
	   20 20 20 20 20
	   20 20 20 20 20
	   4D 3A 3A 3A 3A
	   3A 3A 3A 3A 4D
	   45 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 45 20 20 20
	   20 20 20 4F 4F
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 4F 4F
	   20 56 3A 3A 3A
	   3A 3A 3A 56 20
	   20 20 20 20 20
	   20 20 20 20 20
	   56 3A 3A 3A 3A
	   3A 3A 56 45 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 45
	   52 3A 3A 3A 3A
	   3A 3A 52 52 52
	   52 52 52 3A 3A
	   3A 3A 3A 52 20
	   0D 0A
 00001352  20 20 47 3A 3A	           BYTE "  G:::::GGGGGGGG::::G            A:::::::A            M:::::::::M         M:::::::::MEE::::::EEEEEEEEE::::E     O:::::::OOO:::::::OV::::::V           V::::::VEE::::::EEEEEEEEE::::ERR:::::R     R:::::R", 13, 10
	   3A 3A 3A 47 47
	   47 47 47 47 47
	   47 3A 3A 3A 3A
	   47 20 20 20 20
	   20 20 20 20 20
	   20 20 20 41 3A
	   3A 3A 3A 3A 3A
	   3A 41 20 20 20
	   20 20 20 20 20
	   20 20 20 20 4D
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 4D
	   20 20 20 20 20
	   20 20 20 20 4D
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 4D
	   45 45 3A 3A 3A
	   3A 3A 3A 45 45
	   45 45 45 45 45
	   45 45 3A 3A 3A
	   3A 45 20 20 20
	   20 20 4F 3A 3A
	   3A 3A 3A 3A 3A
	   4F 4F 4F 3A 3A
	   3A 3A 3A 3A 3A
	   4F 56 3A 3A 3A
	   3A 3A 3A 56 20
	   20 20 20 20 20
	   20 20 20 20 20
	   56 3A 3A 3A 3A
	   3A 3A 56 45 45
	   3A 3A 3A 3A 3A
	   3A 45 45 45 45
	   45 45 45 45 45
	   3A 3A 3A 3A 45
	   52 52 3A 3A 3A
	   3A 3A 52 20 20
	   20 20 20 52 3A
	   3A 3A 3A 3A 52
	   0D 0A
 0000141C  20 47 3A 3A 3A	           BYTE " G:::::G       GGGGGG           A:::::::::A           M::::::::::M       M::::::::::M  E:::::E       EEEEEE     O::::::O   O::::::O V:::::V           V:::::V   E:::::E       EEEEEE  R::::R     R:::::R", 13, 10
	   3A 3A 47 20 20
	   20 20 20 20 20
	   47 47 47 47 47
	   47 20 20 20 20
	   20 20 20 20 20
	   20 20 41 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 41 20 20
	   20 20 20 20 20
	   20 20 20 20 4D
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   4D 20 20 20 20
	   20 20 20 4D 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 4D
	   20 20 45 3A 3A
	   3A 3A 3A 45 20
	   20 20 20 20 20
	   20 45 45 45 45
	   45 45 20 20 20
	   20 20 4F 3A 3A
	   3A 3A 3A 3A 4F
	   20 20 20 4F 3A
	   3A 3A 3A 3A 3A
	   4F 20 56 3A 3A
	   3A 3A 3A 56 20
	   20 20 20 20 20
	   20 20 20 20 20
	   56 3A 3A 3A 3A
	   3A 56 20 20 20
	   45 3A 3A 3A 3A
	   3A 45 20 20 20
	   20 20 20 20 45
	   45 45 45 45 45
	   20 20 52 3A 3A
	   3A 3A 52 20 20
	   20 20 20 52 3A
	   3A 3A 3A 3A 52
	   0D 0A
 000014E6  47 3A 3A 3A 3A	           BYTE "G:::::G                        A:::::A:::::A          M:::::::::::M     M:::::::::::M  E:::::E                  O:::::O     O:::::O  V:::::V         V:::::V    E:::::E               R::::R     R:::::R", 13, 10
	   3A 47 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 41 3A 3A 3A
	   3A 3A 41 3A 3A
	   3A 3A 3A 41 20
	   20 20 20 20 20
	   20 20 20 20 4D
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 4D 20 20 20
	   20 20 4D 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 4D
	   20 20 45 3A 3A
	   3A 3A 3A 45 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 4F 3A 3A
	   3A 3A 3A 4F 20
	   20 20 20 20 4F
	   3A 3A 3A 3A 3A
	   4F 20 20 56 3A
	   3A 3A 3A 3A 56
	   20 20 20 20 20
	   20 20 20 20 56
	   3A 3A 3A 3A 3A
	   56 20 20 20 20
	   45 3A 3A 3A 3A
	   3A 45 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 52 3A 3A
	   3A 3A 52 20 20
	   20 20 20 52 3A
	   3A 3A 3A 3A 52
	   0D 0A
 000015B0  47 3A 3A 3A 3A	           BYTE "G:::::G                       A:::::A A:::::A         M:::::::M::::M   M::::M:::::::M  E::::::EEEEEEEEEE        O:::::O     O:::::O   V:::::V       V:::::V     E::::::EEEEEEEEEE     R::::RRRRRR:::::R ", 13, 10
	   3A 47 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   41 3A 3A 3A 3A
	   3A 41 20 41 3A
	   3A 3A 3A 3A 41
	   20 20 20 20 20
	   20 20 20 20 4D
	   3A 3A 3A 3A 3A
	   3A 3A 4D 3A 3A
	   3A 3A 4D 20 20
	   20 4D 3A 3A 3A
	   3A 4D 3A 3A 3A
	   3A 3A 3A 3A 4D
	   20 20 45 3A 3A
	   3A 3A 3A 3A 45
	   45 45 45 45 45
	   45 45 45 45 20
	   20 20 20 20 20
	   20 20 4F 3A 3A
	   3A 3A 3A 4F 20
	   20 20 20 20 4F
	   3A 3A 3A 3A 3A
	   4F 20 20 20 56
	   3A 3A 3A 3A 3A
	   56 20 20 20 20
	   20 20 20 56 3A
	   3A 3A 3A 3A 56
	   20 20 20 20 20
	   45 3A 3A 3A 3A
	   3A 3A 45 45 45
	   45 45 45 45 45
	   45 45 20 20 20
	   20 20 52 3A 3A
	   3A 3A 52 52 52
	   52 52 52 3A 3A
	   3A 3A 3A 52 20
	   0D 0A
 0000167A  47 3A 3A 3A 3A	           BYTE "G:::::G    GGGGGGGGGG        A:::::A   A:::::A        M::::::M M::::M M::::M M::::::M  E:::::::::::::::E        O:::::O     O:::::O    V:::::V     V:::::V      E:::::::::::::::E     R:::::::::::::RR  ", 13, 10
	   3A 47 20 20 20
	   20 47 47 47 47
	   47 47 47 47 47
	   47 20 20 20 20
	   20 20 20 20 41
	   3A 3A 3A 3A 3A
	   41 20 20 20 41
	   3A 3A 3A 3A 3A
	   41 20 20 20 20
	   20 20 20 20 4D
	   3A 3A 3A 3A 3A
	   3A 4D 20 4D 3A
	   3A 3A 3A 4D 20
	   4D 3A 3A 3A 3A
	   4D 20 4D 3A 3A
	   3A 3A 3A 3A 4D
	   20 20 45 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 45 20
	   20 20 20 20 20
	   20 20 4F 3A 3A
	   3A 3A 3A 4F 20
	   20 20 20 20 4F
	   3A 3A 3A 3A 3A
	   4F 20 20 20 20
	   56 3A 3A 3A 3A
	   3A 56 20 20 20
	   20 20 56 3A 3A
	   3A 3A 3A 56 20
	   20 20 20 20 20
	   45 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 45 20 20 20
	   20 20 52 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 52 52 20 20
	   0D 0A
 00001744  47 3A 3A 3A 3A	           BYTE "G:::::G    G::::::::G       A:::::A     A:::::A       M::::::M  M::::M::::M  M::::::M  E:::::::::::::::E        O:::::O     O:::::O     V:::::V   V:::::V       E:::::::::::::::E     R::::RRRRRR:::::R ", 13, 10
	   3A 47 20 20 20
	   20 47 3A 3A 3A
	   3A 3A 3A 3A 3A
	   47 20 20 20 20
	   20 20 20 41 3A
	   3A 3A 3A 3A 41
	   20 20 20 20 20
	   41 3A 3A 3A 3A
	   3A 41 20 20 20
	   20 20 20 20 4D
	   3A 3A 3A 3A 3A
	   3A 4D 20 20 4D
	   3A 3A 3A 3A 4D
	   3A 3A 3A 3A 4D
	   20 20 4D 3A 3A
	   3A 3A 3A 3A 4D
	   20 20 45 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 45 20
	   20 20 20 20 20
	   20 20 4F 3A 3A
	   3A 3A 3A 4F 20
	   20 20 20 20 4F
	   3A 3A 3A 3A 3A
	   4F 20 20 20 20
	   20 56 3A 3A 3A
	   3A 3A 56 20 20
	   20 56 3A 3A 3A
	   3A 3A 56 20 20
	   20 20 20 20 20
	   45 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 45 20 20 20
	   20 20 52 3A 3A
	   3A 3A 52 52 52
	   52 52 52 3A 3A
	   3A 3A 3A 52 20
	   0D 0A
 0000180E  47 3A 3A 3A 3A	           BYTE "G:::::G    GGGGG::::G      A:::::AAAAAAAAA:::::A      M::::::M   M:::::::M   M::::::M  E::::::EEEEEEEEEE        O:::::O     O:::::O      V:::::V V:::::V        E::::::EEEEEEEEEE     R::::R     R:::::R", 13, 10
	   3A 47 20 20 20
	   20 47 47 47 47
	   47 3A 3A 3A 3A
	   47 20 20 20 20
	   20 20 41 3A 3A
	   3A 3A 3A 41 41
	   41 41 41 41 41
	   41 41 3A 3A 3A
	   3A 3A 41 20 20
	   20 20 20 20 4D
	   3A 3A 3A 3A 3A
	   3A 4D 20 20 20
	   4D 3A 3A 3A 3A
	   3A 3A 3A 4D 20
	   20 20 4D 3A 3A
	   3A 3A 3A 3A 4D
	   20 20 45 3A 3A
	   3A 3A 3A 3A 45
	   45 45 45 45 45
	   45 45 45 45 20
	   20 20 20 20 20
	   20 20 4F 3A 3A
	   3A 3A 3A 4F 20
	   20 20 20 20 4F
	   3A 3A 3A 3A 3A
	   4F 20 20 20 20
	   20 20 56 3A 3A
	   3A 3A 3A 56 20
	   56 3A 3A 3A 3A
	   3A 56 20 20 20
	   20 20 20 20 20
	   45 3A 3A 3A 3A
	   3A 3A 45 45 45
	   45 45 45 45 45
	   45 45 20 20 20
	   20 20 52 3A 3A
	   3A 3A 52 20 20
	   20 20 20 52 3A
	   3A 3A 3A 3A 52
	   0D 0A
 000018D8  47 3A 3A 3A 3A	           BYTE "G:::::G        G::::G     A:::::::::::::::::::::A     M::::::M    M:::::M    M::::::M  E:::::E                  O:::::O     O:::::O       V:::::V:::::V         E:::::E               R::::R     R:::::R", 13, 10
	   3A 47 20 20 20
	   20 20 20 20 20
	   47 3A 3A 3A 3A
	   47 20 20 20 20
	   20 41 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 41 20
	   20 20 20 20 4D
	   3A 3A 3A 3A 3A
	   3A 4D 20 20 20
	   20 4D 3A 3A 3A
	   3A 3A 4D 20 20
	   20 20 4D 3A 3A
	   3A 3A 3A 3A 4D
	   20 20 45 3A 3A
	   3A 3A 3A 45 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 4F 3A 3A
	   3A 3A 3A 4F 20
	   20 20 20 20 4F
	   3A 3A 3A 3A 3A
	   4F 20 20 20 20
	   20 20 20 56 3A
	   3A 3A 3A 3A 56
	   3A 3A 3A 3A 3A
	   56 20 20 20 20
	   20 20 20 20 20
	   45 3A 3A 3A 3A
	   3A 45 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 52 3A 3A
	   3A 3A 52 20 20
	   20 20 20 52 3A
	   3A 3A 3A 3A 52
	   0D 0A
 000019A2  20 47 3A 3A 3A	           BYTE " G:::::G       G::::G    A:::::AAAAAAAAAAAAA:::::A    M::::::M     MMMMM     M::::::M  E:::::E       EEEEEE     O::::::O   O::::::O        V:::::::::V          E:::::E       EEEEEE  R::::R     R:::::R", 13, 10
	   3A 3A 47 20 20
	   20 20 20 20 20
	   47 3A 3A 3A 3A
	   47 20 20 20 20
	   41 3A 3A 3A 3A
	   3A 41 41 41 41
	   41 41 41 41 41
	   41 41 41 41 3A
	   3A 3A 3A 3A 41
	   20 20 20 20 4D
	   3A 3A 3A 3A 3A
	   3A 4D 20 20 20
	   20 20 4D 4D 4D
	   4D 4D 20 20 20
	   20 20 4D 3A 3A
	   3A 3A 3A 3A 4D
	   20 20 45 3A 3A
	   3A 3A 3A 45 20
	   20 20 20 20 20
	   20 45 45 45 45
	   45 45 20 20 20
	   20 20 4F 3A 3A
	   3A 3A 3A 3A 4F
	   20 20 20 4F 3A
	   3A 3A 3A 3A 3A
	   4F 20 20 20 20
	   20 20 20 20 56
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 56
	   20 20 20 20 20
	   20 20 20 20 20
	   45 3A 3A 3A 3A
	   3A 45 20 20 20
	   20 20 20 20 45
	   45 45 45 45 45
	   20 20 52 3A 3A
	   3A 3A 52 20 20
	   20 20 20 52 3A
	   3A 3A 3A 3A 52
	   0D 0A
 00001A6C  20 20 47 3A 3A	           BYTE "  G:::::GGGGGGGG::::G   A:::::A             A:::::A   M::::::M               M::::::MEE::::::EEEEEEEE:::::E     O:::::::OOO:::::::O         V:::::::V         EE::::::EEEEEEEE:::::ERR:::::R     R:::::R", 13, 10
	   3A 3A 3A 47 47
	   47 47 47 47 47
	   47 3A 3A 3A 3A
	   47 20 20 20 41
	   3A 3A 3A 3A 3A
	   41 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 41
	   3A 3A 3A 3A 3A
	   41 20 20 20 4D
	   3A 3A 3A 3A 3A
	   3A 4D 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 4D 3A 3A
	   3A 3A 3A 3A 4D
	   45 45 3A 3A 3A
	   3A 3A 3A 45 45
	   45 45 45 45 45
	   45 3A 3A 3A 3A
	   3A 45 20 20 20
	   20 20 4F 3A 3A
	   3A 3A 3A 3A 3A
	   4F 4F 4F 3A 3A
	   3A 3A 3A 3A 3A
	   4F 20 20 20 20
	   20 20 20 20 20
	   56 3A 3A 3A 3A
	   3A 3A 3A 56 20
	   20 20 20 20 20
	   20 20 20 45 45
	   3A 3A 3A 3A 3A
	   3A 45 45 45 45
	   45 45 45 45 3A
	   3A 3A 3A 3A 45
	   52 52 3A 3A 3A
	   3A 3A 52 20 20
	   20 20 20 52 3A
	   3A 3A 3A 3A 52
	   0D 0A
 00001B36  20 20 20 47 47	           BYTE "   GG:::::::::::::::G  A:::::A               A:::::A  M::::::M               M::::::ME::::::::::::::::::::E      OO:::::::::::::OO           V:::::V          E::::::::::::::::::::ER::::::R     R:::::R", 13, 10
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   47 20 20 41 3A
	   3A 3A 3A 3A 41
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   41 3A 3A 3A 3A
	   3A 41 20 20 4D
	   3A 3A 3A 3A 3A
	   3A 4D 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 4D 3A 3A
	   3A 3A 3A 3A 4D
	   45 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 45 20 20 20
	   20 20 20 4F 4F
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 4F 4F
	   20 20 20 20 20
	   20 20 20 20 20
	   20 56 3A 3A 3A
	   3A 3A 56 20 20
	   20 20 20 20 20
	   20 20 20 45 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 45
	   52 3A 3A 3A 3A
	   3A 3A 52 20 20
	   20 20 20 52 3A
	   3A 3A 3A 3A 52
	   0D 0A
 00001C00  20 20 20 20 20	           BYTE "     GGG::::::GGG:::G A:::::A                 A:::::A M::::::M               M::::::ME::::::::::::::::::::E        OO:::::::::OO              V:::V           E::::::::::::::::::::ER::::::R     R:::::R", 13, 10
	   47 47 47 3A 3A
	   3A 3A 3A 3A 47
	   47 47 3A 3A 3A
	   47 20 41 3A 3A
	   3A 3A 3A 41 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 41 3A 3A 3A
	   3A 3A 41 20 4D
	   3A 3A 3A 3A 3A
	   3A 4D 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 4D 3A 3A
	   3A 3A 3A 3A 4D
	   45 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 45 20 20 20
	   20 20 20 20 20
	   4F 4F 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 4F 4F 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 56 3A 3A
	   3A 56 20 20 20
	   20 20 20 20 20
	   20 20 20 45 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 3A
	   3A 3A 3A 3A 45
	   52 3A 3A 3A 3A
	   3A 3A 52 20 20
	   20 20 20 52 3A
	   3A 3A 3A 3A 52
	   0D 0A
 00001CCA  20 20 20 20 20	           BYTE "        GGGGGG   GGGGAAAAAAA                   AAAAAAAMMMMMMMM               MMMMMMMMEEEEEEEEEEEEEEEEEEEEEE          OOOOOOOOO                 VVV            EEEEEEEEEEEEEEEEEEEEEERRRRRRRR     RRRRRRR", 13, 10
	   20 20 20 47 47
	   47 47 47 47 20
	   20 20 47 47 47
	   47 41 41 41 41
	   41 41 41 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 41 41 41
	   41 41 41 41 4D
	   4D 4D 4D 4D 4D
	   4D 4D 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 4D 4D 4D
	   4D 4D 4D 4D 4D
	   45 45 45 45 45
	   45 45 45 45 45
	   45 45 45 45 45
	   45 45 45 45 45
	   45 45 20 20 20
	   20 20 20 20 20
	   20 20 4F 4F 4F
	   4F 4F 4F 4F 4F
	   4F 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 56 56
	   56 20 20 20 20
	   20 20 20 20 20
	   20 20 20 45 45
	   45 45 45 45 45
	   45 45 45 45 45
	   45 45 45 45 45
	   45 45 45 45 45
	   52 52 52 52 52
	   52 52 52 20 20
	   20 20 20 52 52
	   52 52 52 52 52
	   0D 0A
 00001D94  20 20 20 20 20	           BYTE "                                                                                                                                                                                                        ", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00001E5E  20 20 20 20 20	           BYTE "                                                                                                                                                                                                        ", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00001F28  20 20 20 20 20	           BYTE "                                                                                                                                                                                                        ", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00001FF2  20 20 20 20 20	           BYTE "                                                                                                                                                                                                        ", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 000020BC  20 20 20 20 20	           BYTE "                                                                                                                                                                                                        ", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00002186  20 20 20 20 20	           BYTE "                                                                                                                                                                                                        ", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   0D 0A
 00002250  20 20 20 20 20	           BYTE "                                                                                                                                                                                                        ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
				
				; Temporary variables for calculations
 00002319 00000000		tempRow DWORD 0
 0000231D 00000000		tempCol DWORD 0
 00002321 00000000		tempPos DWORD 0
 00002325 00000000		tempDir DWORD 0
				
				; Grid cell state storage for ghost movement
 00002329 00			cellState BYTE 0       ; To store the original state of a cell before ghost moves to it
				
				; Pause screen art
 0000232A 20 2E 2D 2D 2D	pauseArt BYTE " .----------------. .----------------. .----------------. .----------------. .----------------. .----------------. ", 13, 10
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2E 20
	   2E 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2E 20 2E
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2E 20 2E 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2E 20 2E 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2E
	   20 2E 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2E 20
	   0D 0A
 0000239F  7C 20 2E 2D 2D	        BYTE "| .--------------. | .--------------. | .--------------. | .--------------. | .--------------. | .--------------. |", 13, 10
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2E 20 7C
	   20 2E 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2E 20 7C 20
	   2E 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2E 20 7C 20 2E
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2E
	   20 7C 20 2E 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2E 20
	   7C 20 2E 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2E 20 7C
	   0D 0A
 00002414  7C 20 7C 20 20	        BYTE "| |   ______     | | |      __      | | | _____  _____ | | |    _______   | | |  _________   | | |  ________    | |", 13, 10
	   20 5F 5F 5F 5F
	   5F 5F 20 20 20
	   20 20 7C 20 7C
	   20 7C 20 20 20
	   20 20 20 5F 5F
	   20 20 20 20 20
	   20 7C 20 7C 20
	   7C 20 5F 5F 5F
	   5F 5F 20 20 5F
	   5F 5F 5F 5F 20
	   7C 20 7C 20 7C
	   20 20 20 20 5F
	   5F 5F 5F 5F 5F
	   5F 20 20 20 7C
	   20 7C 20 7C 20
	   20 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   20 20 20 7C 20
	   7C 20 7C 20 20
	   5F 5F 5F 5F 5F
	   5F 5F 5F 20 20
	   20 20 7C 20 7C
	   0D 0A
 00002489  7C 20 7C 20 20	        BYTE "| |  |_   __ \   | | |     /  \     | | ||_   _||_   _|| | |   /  ___  |  | | | |_   ___  |  | | | |_   ___ `.  | |", 13, 10
	   7C 5F 20 20 20
	   5F 5F 20 5C 20
	   20 20 7C 20 7C
	   20 7C 20 20 20
	   20 20 2F 20 20
	   5C 20 20 20 20
	   20 7C 20 7C 20
	   7C 7C 5F 20 20
	   20 5F 7C 7C 5F
	   20 20 20 5F 7C
	   7C 20 7C 20 7C
	   20 20 20 2F 20
	   20 5F 5F 5F 20
	   20 7C 20 20 7C
	   20 7C 20 7C 20
	   7C 5F 20 20 20
	   5F 5F 5F 20 20
	   7C 20 20 7C 20
	   7C 20 7C 20 7C
	   5F 20 20 20 5F
	   5F 5F 20 60 2E
	   20 20 7C 20 7C
	   0D 0A
 000024FE  7C 20 7C 20 20	        BYTE "| |    | |__) |  | | |    / /\ \    | | |  | |    | |  | | |  |  (__ \_|  | | |   | |_  \_|  | | |   | |   `. \ | |", 13, 10
	   20 20 7C 20 7C
	   5F 5F 29 20 7C
	   20 20 7C 20 7C
	   20 7C 20 20 20
	   20 2F 20 2F 5C
	   20 5C 20 20 20
	   20 7C 20 7C 20
	   7C 20 20 7C 20
	   7C 20 20 20 20
	   7C 20 7C 20 20
	   7C 20 7C 20 7C
	   20 20 7C 20 20
	   28 5F 5F 20 5C
	   5F 7C 20 20 7C
	   20 7C 20 7C 20
	   20 20 7C 20 7C
	   5F 20 20 5C 5F
	   7C 20 20 7C 20
	   7C 20 7C 20 20
	   20 7C 20 7C 20
	   20 20 60 2E 20
	   5C 20 7C 20 7C
	   0D 0A
 00002573  7C 20 7C 20 20	        BYTE "| |    |  ___/   | | |   / ____ \   | | |  | '    ' |  | | |   '.___`-.   | | |   |  _|  _   | | |   | |    | | | |", 13, 10
	   20 20 7C 20 20
	   5F 5F 5F 2F 20
	   20 20 7C 20 7C
	   20 7C 20 20 20
	   2F 20 5F 5F 5F
	   5F 20 5C 20 20
	   20 7C 20 7C 20
	   7C 20 20 7C 20
	   27 20 20 20 20
	   27 20 7C 20 20
	   7C 20 7C 20 7C
	   20 20 20 27 2E
	   5F 5F 5F 60 2D
	   2E 20 20 20 7C
	   20 7C 20 7C 20
	   20 20 7C 20 20
	   5F 7C 20 20 5F
	   20 20 20 7C 20
	   7C 20 7C 20 20
	   20 7C 20 7C 20
	   20 20 20 7C 20
	   7C 20 7C 20 7C
	   0D 0A
 000025E8  7C 20 7C 20 20	        BYTE "| |   _| |_      | | | _/ /    \ \_ | | |   \ `--' /   | | |  |`\____) |  | | |  _| |___/ |  | | |  _| |___.' / | |", 13, 10
	   20 5F 7C 20 7C
	   5F 20 20 20 20
	   20 20 7C 20 7C
	   20 7C 20 5F 2F
	   20 2F 20 20 20
	   20 5C 20 5C 5F
	   20 7C 20 7C 20
	   7C 20 20 20 5C
	   20 60 2D 2D 27
	   20 2F 20 20 20
	   7C 20 7C 20 7C
	   20 20 7C 60 5C
	   5F 5F 5F 5F 29
	   20 7C 20 20 7C
	   20 7C 20 7C 20
	   20 5F 7C 20 7C
	   5F 5F 5F 2F 20
	   7C 20 20 7C 20
	   7C 20 7C 20 20
	   5F 7C 20 7C 5F
	   5F 5F 2E 27 20
	   2F 20 7C 20 7C
	   0D 0A
 0000265D  7C 20 7C 20 20	        BYTE "| |  |_____|     | | ||____|  |____|| | |    `.__.'    | | |  |_______.'  | | | |_________|  | | | |________.'  | |", 13, 10
	   7C 5F 5F 5F 5F
	   5F 7C 20 20 20
	   20 20 7C 20 7C
	   20 7C 7C 5F 5F
	   5F 5F 7C 20 20
	   7C 5F 5F 5F 5F
	   7C 7C 20 7C 20
	   7C 20 20 20 20
	   60 2E 5F 5F 2E
	   27 20 20 20 20
	   7C 20 7C 20 7C
	   20 20 7C 5F 5F
	   5F 5F 5F 5F 5F
	   2E 27 20 20 7C
	   20 7C 20 7C 20
	   7C 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   7C 20 20 7C 20
	   7C 20 7C 20 7C
	   5F 5F 5F 5F 5F
	   5F 5F 5F 2E 27
	   20 20 7C 20 7C
	   0D 0A
 000026D2  7C 20 7C 20 20	        BYTE "| |              | | |              | | |              | | |              | | |              | | |              | |", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 7C
	   20 7C 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 7C 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 7C 20 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   20 7C 20 7C 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 7C 20
	   7C 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 7C
	   0D 0A
 00002747  7C 20 27 2D 2D	        BYTE "| '--------------' | '--------------' | '--------------' | '--------------' | '--------------' | '--------------' |", 13, 10
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 27 20 7C
	   20 27 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 27 20 7C 20
	   27 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   27 20 7C 20 27
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 27
	   20 7C 20 27 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 27 20
	   7C 20 27 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 27 20 7C
	   0D 0A
 000027BC  20 27 2D 2D 2D	        BYTE " '----------------' '----------------' '----------------' '----------------' '----------------' '----------------' ", 0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 27 20
	   27 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 27 20 27
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 27 20 27 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   27 20 27 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 27
	   20 27 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 27 20
	   00
				
 00002830 20 20 20 20 5F	instructionsArt BYTE "    _            __                  __  _                 ", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 5F 5F 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 5F 5F 20
	   20 5F 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 0D
	   0A
 0000286D  20 20 20 28 5F	                BYTE "   (_____  _____/ /________  _______/ /_(_____  ____  _____", 13, 10
	   5F 5F 5F 5F 20
	   20 5F 5F 5F 5F
	   5F 2F 20 2F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 20 20 5F
	   5F 5F 5F 5F 5F
	   5F 2F 20 2F 5F
	   28 5F 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 20 20 5F
	   5F 5F 5F 5F 0D
	   0A
 000028AA  20 20 2F 20 2F	                BYTE "  / / __ \/ ___/ __/ ___/ / / / ___/ __/ / __ \/ __ \/ ___/", 13, 10
	   20 5F 5F 20 5C
	   2F 20 5F 5F 5F
	   2F 20 5F 5F 2F
	   20 5F 5F 5F 2F
	   20 2F 20 2F 20
	   2F 20 5F 5F 5F
	   2F 20 5F 5F 2F
	   20 2F 20 5F 5F
	   20 5C 2F 20 5F
	   5F 20 5C 2F 20
	   5F 5F 5F 2F 0D
	   0A
 000028E7  20 2F 20 2F 20	                BYTE " / / / / (__  / /_/ /  / /_/ / /__/ /_/ / /_/ / / / (__  ) ", 13, 10
	   2F 20 2F 20 28
	   5F 5F 20 20 2F
	   20 2F 5F 2F 20
	   2F 20 20 2F 20
	   2F 5F 2F 20 2F
	   20 2F 5F 5F 2F
	   20 2F 5F 2F 20
	   2F 20 2F 5F 2F
	   20 2F 20 2F 20
	   2F 20 28 5F 5F
	   20 20 29 20 0D
	   0A
 00002924  2F 5F 2F 5F 2F	                BYTE "/_/_/ /_/____/\__/_/   \__,_/\___/\__/_/\____/_/ /_/____/  ", 13, 10
	   20 2F 5F 2F 5F
	   5F 5F 5F 2F 5C
	   5F 5F 2F 5F 2F
	   20 20 20 5C 5F
	   5F 2C 5F 2F 5C
	   5F 5F 5F 2F 5C
	   5F 5F 2F 5F 2F
	   5C 5F 5F 5F 5F
	   2F 5F 2F 20 2F
	   5F 2F 5F 5F 5F
	   5F 2F 20 20 0D
	   0A
 00002961  20 20 20 20 20	                BYTE "                                                           ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 00
				
				; Game instructions
 0000299D 48 6F 77 20 74	instruction1 BYTE "How to Play:", 0
	   6F 20 50 6C 61
	   79 3A 00
 000029AA 2D 20 55 73 65	instruction2 BYTE "- Use WASD keys to move Pacman", 0
	   20 57 41 53 44
	   20 6B 65 79 73
	   20 74 6F 20 6D
	   6F 76 65 20 50
	   61 63 6D 61 6E
	   00
 000029C9 2D 20 43 6F 6C	instruction3 BYTE "- Collect dots to earn points (2 points each)", 0
	   6C 65 63 74 20
	   64 6F 74 73 20
	   74 6F 20 65 61
	   72 6E 20 70 6F
	   69 6E 74 73 20
	   28 32 20 70 6F
	   69 6E 74 73 20
	   65 61 63 68 29
	   00
 000029F7 2D 20 41 76 6F	instruction4 BYTE "- Avoid ghosts - they will chase you!", 0
	   69 64 20 67 68
	   6F 73 74 73 20
	   2D 20 74 68 65
	   79 20 77 69 6C
	   6C 20 63 68 61
	   73 65 20 79 6F
	   75 21 00
 00002A1D 2D 20 59 6F 75	instruction5 BYTE "- You have 3 lives - getting caught by a ghost costs 1 life", 0
	   20 68 61 76 65
	   20 33 20 6C 69
	   76 65 73 20 2D
	   20 67 65 74 74
	   69 6E 67 20 63
	   61 75 67 68 74
	   20 62 79 20 61
	   20 67 68 6F 73
	   74 20 63 6F 73
	   74 73 20 31 20
	   6C 69 66 65 00
 00002A59 2D 20 50 72 65	instruction6 BYTE "- Press P to pause/unpause the game", 0
	   73 73 20 50 20
	   74 6F 20 70 61
	   75 73 65 2F 75
	   6E 70 61 75 73
	   65 20 74 68 65
	   20 67 61 6D 65
	   00
 00002A7D 2D 20 50 72 65	instruction7 BYTE "- Press Q to quit", 0
	   73 73 20 51 20
	   74 6F 20 71 75
	   69 74 00
 00002A8F 48 6F 77 20 74	instruction8 BYTE "How to Win:", 0
	   6F 20 57 69 6E
	   3A 00
 00002A9B 2D 20 43 6F 6C	instruction9 BYTE "- Collect all dots to complete the level", 0
	   6C 65 63 74 20
	   61 6C 6C 20 64
	   6F 74 73 20 74
	   6F 20 63 6F 6D
	   70 6C 65 74 65
	   20 74 68 65 20
	   6C 65 76 65 6C
	   00
 00002AC4 2D 20 54 72 79	instruction10 BYTE "- Try to get the highest score possible!", 0
	   20 74 6F 20 67
	   65 74 20 74 68
	   65 20 68 69 67
	   68 65 73 74 20
	   73 63 6F 72 65
	   20 70 6F 73 73
	   69 62 6C 65 21
	   00
				
				; Add KEY_P to existing key definitions
 00002AED 00000070		KEY_P DWORD 112        ; 'p' for pause
				
				; Add isPaused flag to game state variables
 00002AF1 00			isPaused BYTE 0        ; 0 = not paused, 1 = paused
				
				; Level selection ASCII art
 00002AF2 20 5F 20 20 20	level1Art BYTE " _                     _   __  ", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5F 20
	   20 20 5F 5F 20
	   20 0D 0A
 00002B13  7C 20 7C 20 20	         BYTE "| |                   | | /  | ", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 7C
	   20 2F 20 20 7C
	   20 0D 0A
 00002B34  7C 20 7C 20 20	         BYTE "| |  ___ __   __  ___ | | `| | ", 13, 10
	   5F 5F 5F 20 5F
	   5F 20 20 20 5F
	   5F 20 20 5F 5F
	   5F 20 7C 20 7C
	   20 60 7C 20 7C
	   20 0D 0A
 00002B55  7C 20 7C 20 2F	         BYTE "| | / _ \\ \ / / / _ \| |  | | ", 13, 10
	   20 5F 20 5C 5C
	   20 5C 20 2F 20
	   2F 20 2F 20 5F
	   20 5C 7C 20 7C
	   20 20 7C 20 7C
	   20 0D 0A
 00002B76  7C 20 7C 7C 20	         BYTE "| ||  __/ \ V / |  __/| | _| |_", 13, 10
	   20 5F 5F 2F 20
	   5C 20 56 20 2F
	   20 7C 20 20 5F
	   5F 2F 7C 20 7C
	   20 5F 7C 20 7C
	   5F 0D 0A
 00002B97  7C 5F 7C 20 5C	         BYTE "|_| \___|  \_/   \___||_| \___/", 13, 10
	   5F 5F 5F 7C 20
	   20 5C 5F 2F 20
	   20 20 5C 5F 5F
	   5F 7C 7C 5F 7C
	   20 5C 5F 5F 5F
	   2F 0D 0A
 00002BB8  20 20 20 20 20	         BYTE "                               ", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A
 00002BD9  20 20 20 20 20	         BYTE "                               ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 00
				
 00002BF9 20 5F 20 20 20	level2Art BYTE " _                     _   _____ ", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5F 20
	   20 20 5F 5F 5F
	   5F 5F 20 0D 0A
 00002C1C  7C 20 7C 20 20	         BYTE "| |                   | | / __  \", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 7C
	   20 2F 20 5F 5F
	   20 20 5C 0D 0A
 00002C3F  7C 20 7C 20 20	         BYTE "| |  ___ __   __  ___ | | `' / /'", 13, 10
	   5F 5F 5F 20 5F
	   5F 20 20 20 5F
	   5F 20 20 5F 5F
	   5F 20 7C 20 7C
	   20 60 27 20 2F
	   20 2F 27 0D 0A
 00002C62  7C 20 7C 20 2F	         BYTE "| | / _ \\ \ / / / _ \| |   / /  ", 13, 10
	   20 5F 20 5C 5C
	   20 5C 20 2F 20
	   2F 20 2F 20 5F
	   20 5C 7C 20 7C
	   20 20 20 2F 20
	   2F 20 20 0D 0A
 00002C85  7C 20 7C 7C 20	         BYTE "| ||  __/ \ V / |  __/| | ./ /___", 13, 10
	   20 5F 5F 2F 20
	   5C 20 56 20 2F
	   20 7C 20 20 5F
	   5F 2F 7C 20 7C
	   20 2E 2F 20 2F
	   5F 5F 5F 0D 0A
 00002CA8  7C 5F 7C 20 5C	         BYTE "|_| \___|  \_/   \___||_| \_____/", 13, 10
	   5F 5F 5F 7C 20
	   20 5C 5F 2F 20
	   20 20 5C 5F 5F
	   5F 7C 7C 5F 7C
	   20 5C 5F 5F 5F
	   5F 5F 2F 0D 0A
 00002CCB  20 20 20 20 20	         BYTE "                                 ", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 0D 0A
 00002CEE  20 20 20 20 20	         BYTE "                                 ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
				
 00002D10 20 5F 20 20 20	level3Art BYTE " _                     _   _____ ", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5F 20
	   20 20 5F 5F 5F
	   5F 5F 20 0D 0A
 00002D33  7C 20 7C 20 20	         BYTE "| |                   | | |____ |", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 7C
	   20 7C 5F 5F 5F
	   5F 20 7C 0D 0A
 00002D56  7C 20 7C 20 20	         BYTE "| |  ___ __   __  ___ | |     / /", 13, 10
	   5F 5F 5F 20 5F
	   5F 20 20 20 5F
	   5F 20 20 5F 5F
	   5F 20 7C 20 7C
	   20 20 20 20 20
	   2F 20 2F 0D 0A
 00002D79  7C 20 7C 20 2F	         BYTE "| | / _ \\ \ / / / _ \| |   \ \", 13, 10
	   20 5F 20 5C 5C
	   20 5C 20 2F 20
	   2F 20 2F 20 5F
	   20 5C 7C 20 7C
	   20 20 20 5C 20
	   5C 0D 0A
 00002D9A  7C 20 7C 7C 20	         BYTE "| ||  __/ \ V / |  __/| | .___/ /", 13, 10
	   20 5F 5F 2F 20
	   5C 20 56 20 2F
	   20 7C 20 20 5F
	   5F 2F 7C 20 7C
	   20 2E 5F 5F 5F
	   2F 20 2F 0D 0A
 00002DBD  7C 5F 7C 20 5C	         BYTE "|_| \___|  \_/   \___||_| \____/ ", 13, 10
	   5F 5F 5F 7C 20
	   20 5C 5F 2F 20
	   20 20 5C 5F 5F
	   5F 7C 7C 5F 7C
	   20 5C 5F 5F 5F
	   5F 2F 20 0D 0A
 00002DE0  20 20 20 20 20	         BYTE "                                 ", 13, 10
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 0D 0A
 00002E03  20 20 20 20 20	         BYTE "                                 ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
				
				; Selection arrow
 00002E25 2D 3E 00		selectionArrow BYTE "->", 0
 00002E28 01			selectedLevel BYTE 1    ; Currently selected level (1-3)
 00002E29 55 73 65 20 57	levelSelectMsg BYTE "Use W/S to move, Spacebar to select", 0
	   2F 53 20 74 6F
	   20 6D 6F 76 65
	   2C 20 53 70 61
	   63 65 62 61 72
	   20 74 6F 20 73
	   65 6C 65 63 74
	   00
				
				; Add key definitions for level selection
 00002E4D 00000077		KEY_W_UP DWORD 119    ; 'w'
 00002E51 00000073		KEY_S_DOWN DWORD 115  ; 's'
 00002E55 00000020		KEY_SPACE DWORD 32    ; spacebar
				
				; Add last direction variable
 00002E59 00000000		lastDirection DWORD 0  ; 0=none, 1=up, 2=right, 3=down, 4=left
 00002E5D 00000064		MOVE_DELAY DWORD 100  ; Delay in milliseconds between moves (reduced from 250)
				
				; Level 2 specific variables
 00002E61 00000000		fruitPos DWORD 0
 00002E65 00			fruitActive BYTE 0
 00002E66 00000000		fruitTimer DWORD 0
 00002E6A 00000014		fruitPoints DWORD 20
				
				; Wall sliding variables
 00002E6E 00000001		wallDirection DWORD 1       ; 1 = right, 0 = left
 00002E72 00000000		wallSlideTimer DWORD 0
 00002E76 00000032		wallSlideDelay DWORD 50    ; Delay between wall movements in ms (reduced from 100)
				
				; Wall colors for each level
 00002E7A 0000			wallColorLevel1 WORD ?      ; Will store the color attribute for blue background
 00002E7C 0000			wallColorLevel2 WORD ?      ; Will store the color attribute for red background
 00002E7E 0000			wallColorLevel3 WORD ?      ; Will store the color attribute for green background
				
				; Level 3 specific variables (no vertical sliding columns)
				
				; Add these messages to the .data section
 00002E80 50 4F 57 45 52	powerUpMsg BYTE "POWER-UP ACTIVE: ", 0
	   2D 55 50 20 41
	   43 54 49 56 45
	   3A 20 00
 00002E92 50 4F 57 45 52	normalMsg BYTE "POWER-UP: NONE   ", 0
	   2D 55 50 3A 20
	   4E 4F 4E 45 20
	   20 20 00
				
				; Add debug messages to data section
 00002EA4 46 52 55 49 54	fruitSpawnMsg BYTE "FRUIT SPAWNED! Timer: ", 0
	   20 53 50 41 57
	   4E 45 44 21 20
	   54 69 6D 65 72
	   3A 20 00
 00002EBB 46 52 55 49 54	fruitInitMsg BYTE "FRUIT INITIALIZED at position: ", 0
	   20 49 4E 49 54
	   49 41 4C 49 5A
	   45 44 20 61 74
	   20 70 6F 73 69
	   74 69 6F 6E 3A
	   20 00
				
				; Add debug message
 00002EDB 46 52 55 49 54	fruitEatenMsg BYTE "FRUIT EATEN! POWER-UP ACTIVATED!", 0
	   20 45 41 54 45
	   4E 21 20 50 4F
	   57 45 52 2D 55
	   50 20 41 43 54
	   49 56 41 54 45
	   44 21 00
				
				; Add more debug/status messages
 00002EFC 46 52 55 49 54	fruitStatusMsg BYTE "FRUIT ACTIVE AT: ", 0
	   20 41 43 54 49
	   56 45 20 41 54
	   3A 20 00
				
				; Also add this message to data section
 00002F0E 46 72 75 69 74	fruitTimerMsg BYTE "Fruit Timer: ", 0
	   20 54 69 6D 65
	   72 3A 20 00
				
				; Add this message to data section
 00002F1C 46 52 55 49 54	fruitSetupMsg BYTE "FRUIT SETUP FOR LEVEL 2 AT: ", 0
	   20 53 45 54 55
	   50 20 46 4F 52
	   20 4C 45 56 45
	   4C 20 32 20 41
	   54 3A 20 00
				
				; Level 3 specific variables
 00002F39 54 00			teleportPadChar BYTE 'T', 0   ; Teleport pad character
 00002F3B 00000000		teleport1Pos DWORD 0          ; Position of first teleport pad
 00002F3F 00000000		teleport2Pos DWORD 0          ; Position of second teleport pad
 00002F43 00000000		ghost6Pos DWORD 0             ; Cyan ghost position (level 3 only)
 00002F47 00000000		ghost7Pos DWORD 0             ; Magenta ghost position (level 3 only)
 00002F4B 00000032		level3GhostDelay DWORD 50     ; Faster ghost movement delay for level 3 (half of normal)
				
				; Ghost colors for each ghost
 00002F4F 0000			ghost1Color WORD ?      ; Will store red
 00002F51 0000			ghost2Color WORD ?      ; Will store brown
 00002F53 0000			ghost3Color WORD ?      ; Will store green
 00002F55 0000			ghost4Color WORD ?      ; Will store orange
 00002F57 0000			ghost5Color WORD ?      ; Will store pink (for level 2 only)
 00002F59 0000			ghost6Color WORD ?      ; Will store cyan (for level 3 only)
 00002F5B 0000			ghost7Color WORD ?      ; Will store magenta (for level 3 only)
				
				; File handling for highscores
 00002F5D 68 69 67 68 73	highscoresFile BYTE "highscores.txt", 0     ; Filename for highscores
	   63 6F 72 65 73
	   2E 74 78 74 00
 00002F6C 00000000		fileHandle HANDLE ?                          ; File handle
 00002F70 00000000		bytesWritten DWORD ?                         ; Number of bytes written
 00002F74  00000100 [		scoreBuffer BYTE 256 DUP(0)                  ; Buffer for formatting score entry
	    00
	   ]
 00003074 2C 00			commaChar BYTE ",", 0                        ; Comma character
 00003076 0D 0A			newlineChars BYTE 13, 10                     ; Carriage return and line feed
				
				; MCI command strings for playing MP3s
 00003078 6F 70 65 6E 20	mciOpenCmd BYTE "open ", 256 DUP(0)          ; Buffer for MCI open command
	   00000100 [
	    00
	   ]
 0000317D 70 6C 61 79 20	mciPlayCmd BYTE "play ", 256 DUP(0)          ; Buffer for MCI play command
	   00000100 [
	    00
	   ]
 00003282 63 6C 6F 73 65	mciCloseCmd BYTE "close ", 256 DUP(0)        ; Buffer for MCI close command
	   20
	   00000100 [
	    00
	   ]
 00003388  00000080 [		mciReturn BYTE 128 DUP(0)                    ; Buffer for MCI return values
	    00
	   ]
 00003408 70 61 63 6D 61	mciAlias BYTE "pacmanmp3", 0                 ; Alias for MCI device
	   6E 6D 70 33 00
				
				; Sound file paths - updated to point to the correct MP3 file locations
 00003412 70 65 6C 6C 65	pelletSoundFile BYTE "pellet.mp3", 0
	   74 2E 6D 70 33
	   00
 0000341D 74 65 6C 65 70	teleportSoundFile BYTE "teleport.mp3", 0
	   6F 72 74 2E 6D
	   70 33 00
 0000342A 64 65 61 74 68	deathSoundFile BYTE "death.mp3", 0
	   2E 6D 70 33 00
 00003434 67 61 6D 65 6F	gameOverSoundFile BYTE "gameover.mp3", 0
	   76 65 72 2E 6D
	   70 33 00
				
				; Sound frequencies and durations (fallback for Beep if MP3 files not available)
 00003441 00000320		pelletSoundFreq DWORD 800                    ; Frequency for pellet eaten sound (Hz)
 00003445 0000001E		pelletSoundDur DWORD 30                      ; Duration for pellet eaten sound (ms)
 00003449 00000190		teleportSoundFreq DWORD 400                  ; Frequency for teleport sound (Hz)
 0000344D 000000C8		teleportSoundDur DWORD 200                   ; Duration for teleport sound (ms)
 00003451 000000C8		deathSoundFreq DWORD 200                     ; Frequency for death sound (Hz)
 00003455 000001F4		deathSoundDur DWORD 500                      ; Duration for death sound (ms)
 00003459 00000096		gameOverSoundFreq DWORD 150                  ; Frequency for game over sound (Hz)
 0000345D 000003E8		gameOverSoundDur DWORD 1000                  ; Duration for game over sound (ms)
				
				; Additional variables for sound effects
				
 00000000			.code
				; Helper procedure to play MP3 sound files
 00000000			PlaySoundFile PROC,
				    pFileName:PTR BYTE,  ; Pointer to filename string
				    useBeep:DWORD,       ; Frequency to use if falling back to Beep
				    beepDuration:DWORD   ; Duration to use if falling back to Beep
				
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
 00000003  60			    pushad                ; Save all registers
				
				    ; Try to play MP3 file first
				
				    ; Clear command buffers
 00000004  BF 00003078 R	    mov edi, OFFSET mciOpenCmd
 00000009  B8 00000000		    mov eax, 0
 0000000E  B9 00000100		    mov ecx, 256
 00000013  F3/ AA		    rep stosb
				
 00000015  BF 0000317D R	    mov edi, OFFSET mciPlayCmd
 0000001A  B8 00000000		    mov eax, 0
 0000001F  B9 00000100		    mov ecx, 256
 00000024  F3/ AA		    rep stosb
				
 00000026  BF 00003282 R	    mov edi, OFFSET mciCloseCmd
 0000002B  B8 00000000		    mov eax, 0
 00000030  B9 00000080		    mov ecx, 128
 00000035  F3/ AA		    rep stosb
				
				    ; Format "open filename type mpegvideo alias pacmanmp3" command
 00000037  BF 00003078 R	    mov edi, OFFSET mciOpenCmd
 0000003C  C6 07 6F		    mov BYTE PTR [edi], 'o'
 0000003F  C6 47 01 70		    mov BYTE PTR [edi+1], 'p'
 00000043  C6 47 02 65		    mov BYTE PTR [edi+2], 'e'
 00000047  C6 47 03 6E		    mov BYTE PTR [edi+3], 'n'
 0000004B  C6 47 04 20		    mov BYTE PTR [edi+4], ' '
 0000004F  83 C7 05		    add edi, 5          ; Skip over "open "
				
				    ; Copy filename to command
 00000052  8B 75 08		    mov esi, pFileName  ; Point to filename
				
 00000055			CopyFilename:
 00000055  8A 06		    mov al, [esi]
 00000057  3C 00		    cmp al, 0
 00000059  74 06		    je DoneCopyFilename
 0000005B  88 07		    mov [edi], al
 0000005D  46			    inc esi
 0000005E  47			    inc edi
 0000005F  EB F4		    jmp CopyFilename
				
 00000061			DoneCopyFilename:
				    ; Append " type mpegvideo alias pacmanmp3" to command
 00000061  C6 07 20		    mov BYTE PTR [edi], ' '
 00000064  47			    inc edi
 00000065  C6 07 74		    mov BYTE PTR [edi], 't'
 00000068  C6 47 01 79		    mov BYTE PTR [edi+1], 'y'
 0000006C  C6 47 02 70		    mov BYTE PTR [edi+2], 'p'
 00000070  C6 47 03 65		    mov BYTE PTR [edi+3], 'e'
 00000074  C6 47 04 20		    mov BYTE PTR [edi+4], ' '
 00000078  C6 47 05 6D		    mov BYTE PTR [edi+5], 'm'
 0000007C  C6 47 06 70		    mov BYTE PTR [edi+6], 'p'
 00000080  C6 47 07 65		    mov BYTE PTR [edi+7], 'e'
 00000084  C6 47 08 67		    mov BYTE PTR [edi+8], 'g'
 00000088  C6 47 09 76		    mov BYTE PTR [edi+9], 'v'
 0000008C  C6 47 0A 69		    mov BYTE PTR [edi+10], 'i'
 00000090  C6 47 0B 64		    mov BYTE PTR [edi+11], 'd'
 00000094  C6 47 0C 65		    mov BYTE PTR [edi+12], 'e'
 00000098  C6 47 0D 6F		    mov BYTE PTR [edi+13], 'o'
 0000009C  C6 47 0E 20		    mov BYTE PTR [edi+14], ' '
 000000A0  C6 47 0F 61		    mov BYTE PTR [edi+15], 'a'
 000000A4  C6 47 10 6C		    mov BYTE PTR [edi+16], 'l'
 000000A8  C6 47 11 69		    mov BYTE PTR [edi+17], 'i'
 000000AC  C6 47 12 61		    mov BYTE PTR [edi+18], 'a'
 000000B0  C6 47 13 73		    mov BYTE PTR [edi+19], 's'
 000000B4  C6 47 14 20		    mov BYTE PTR [edi+20], ' '
 000000B8  C6 47 15 70		    mov BYTE PTR [edi+21], 'p'
 000000BC  C6 47 16 61		    mov BYTE PTR [edi+22], 'a'
 000000C0  C6 47 17 63		    mov BYTE PTR [edi+23], 'c'
 000000C4  C6 47 18 6D		    mov BYTE PTR [edi+24], 'm'
 000000C8  C6 47 19 61		    mov BYTE PTR [edi+25], 'a'
 000000CC  C6 47 1A 6E		    mov BYTE PTR [edi+26], 'n'
 000000D0  C6 47 1B 6D		    mov BYTE PTR [edi+27], 'm'
 000000D4  C6 47 1C 70		    mov BYTE PTR [edi+28], 'p'
 000000D8  C6 47 1D 33		    mov BYTE PTR [edi+29], '3'
 000000DC  C6 47 1E 00		    mov BYTE PTR [edi+30], 0
				
				    ; Send "open" command to MCI
				    INVOKE mciSendStringA, OFFSET mciOpenCmd, OFFSET mciReturn, 128, 0
 000000E0  6A 00	   *	    push   +000000000h
 000000E2  68 00000080	   *	    push   +000000080h
 000000E7  68 00003388 R   *	    push   dword  ptr OFFSET FLAT: mciReturn
 000000EC  68 00003078 R   *	    push   dword  ptr OFFSET FLAT: mciOpenCmd
 000000F1  E8 00000000 E   *	    call   mciSendStringA
				
				    ; Check if open succeeded
 000000F6  83 F8 00		    cmp eax, 0
 000000F9  0F 85 000000BA	    jne UseFallbackBeep ; If error, fall back to Beep
				
				    ; Format "play pacmanmp3" command
 000000FF  BF 0000317D R	    mov edi, OFFSET mciPlayCmd
 00000104  C6 07 70		    mov BYTE PTR [edi], 'p'
 00000107  C6 47 01 6C		    mov BYTE PTR [edi+1], 'l'
 0000010B  C6 47 02 61		    mov BYTE PTR [edi+2], 'a'
 0000010F  C6 47 03 79		    mov BYTE PTR [edi+3], 'y'
 00000113  C6 47 04 20		    mov BYTE PTR [edi+4], ' '
 00000117  C6 47 05 70		    mov BYTE PTR [edi+5], 'p'
 0000011B  C6 47 06 61		    mov BYTE PTR [edi+6], 'a'
 0000011F  C6 47 07 63		    mov BYTE PTR [edi+7], 'c'
 00000123  C6 47 08 6D		    mov BYTE PTR [edi+8], 'm'
 00000127  C6 47 09 61		    mov BYTE PTR [edi+9], 'a'
 0000012B  C6 47 0A 6E		    mov BYTE PTR [edi+10], 'n'
 0000012F  C6 47 0B 6D		    mov BYTE PTR [edi+11], 'm'
 00000133  C6 47 0C 70		    mov BYTE PTR [edi+12], 'p'
 00000137  C6 47 0D 33		    mov BYTE PTR [edi+13], '3'
 0000013B  C6 47 0E 00		    mov BYTE PTR [edi+14], 0
				
				    ; Send "play" command to MCI
				    INVOKE mciSendStringA, OFFSET mciPlayCmd, OFFSET mciReturn, 128, 0
 0000013F  6A 00	   *	    push   +000000000h
 00000141  68 00000080	   *	    push   +000000080h
 00000146  68 00003388 R   *	    push   dword  ptr OFFSET FLAT: mciReturn
 0000014B  68 0000317D R   *	    push   dword  ptr OFFSET FLAT: mciPlayCmd
 00000150  E8 00000000 E   *	    call   mciSendStringA
				
				    ; Wait a bit for sound to play
 00000155  8B 45 10		    mov eax, beepDuration
 00000158  E8 00000000 E	    call Delay
				
				    ; Format "close pacmanmp3" command
 0000015D  BF 00003282 R	    mov edi, OFFSET mciCloseCmd
 00000162  C6 07 63		    mov BYTE PTR [edi], 'c'
 00000165  C6 47 01 6C		    mov BYTE PTR [edi+1], 'l'
 00000169  C6 47 02 6F		    mov BYTE PTR [edi+2], 'o'
 0000016D  C6 47 03 73		    mov BYTE PTR [edi+3], 's'
 00000171  C6 47 04 65		    mov BYTE PTR [edi+4], 'e'
 00000175  C6 47 05 20		    mov BYTE PTR [edi+5], ' '
 00000179  C6 47 06 70		    mov BYTE PTR [edi+6], 'p'
 0000017D  C6 47 07 61		    mov BYTE PTR [edi+7], 'a'
 00000181  C6 47 08 63		    mov BYTE PTR [edi+8], 'c'
 00000185  C6 47 09 6D		    mov BYTE PTR [edi+9], 'm'
 00000189  C6 47 0A 61		    mov BYTE PTR [edi+10], 'a'
 0000018D  C6 47 0B 6E		    mov BYTE PTR [edi+11], 'n'
 00000191  C6 47 0C 6D		    mov BYTE PTR [edi+12], 'm'
 00000195  C6 47 0D 70		    mov BYTE PTR [edi+13], 'p'
 00000199  C6 47 0E 33		    mov BYTE PTR [edi+14], '3'
 0000019D  C6 47 0F 00		    mov BYTE PTR [edi+15], 0
				
				    ; Send "close" command to MCI
				    INVOKE mciSendStringA, OFFSET mciCloseCmd, OFFSET mciReturn, 128, 0
 000001A1  6A 00	   *	    push   +000000000h
 000001A3  68 00000080	   *	    push   +000000080h
 000001A8  68 00003388 R   *	    push   dword  ptr OFFSET FLAT: mciReturn
 000001AD  68 00003282 R   *	    push   dword  ptr OFFSET FLAT: mciCloseCmd
 000001B2  E8 00000000 E   *	    call   mciSendStringA
				
 000001B7  EB 0B		    jmp DonePlayingSound
				
 000001B9			UseFallbackBeep:
				    ; Fall back to Beep function if MCI fails
				    INVOKE Beep, useBeep, beepDuration
 000001B9  FF 75 10	   *	    push   dword  ptr ss:[ebp]+000000010h
 000001BC  FF 75 0C	   *	    push   dword  ptr ss:[ebp]+00000000Ch
 000001BF  E8 00000000 E   *	    call   Beep
				
 000001C4			DonePlayingSound:
 000001C4  61			    popad                ; Restore all registers
				    ret
 000001C5  C9		   *	    leave  
 000001C6  C2 000C	   *	    ret    0000Ch
 000001C9			PlaySoundFile ENDP
				
 000001C9			main PROC
				    ; Get the console handle for screen manipulation
				    INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 000001C9  6A F5	   *	    push    -00000000Bh
 000001CB  E8 00000000 E   *	    call   GetStdHandle
 000001D0  A3 00000E66 R	    mov consoleHandle, eax
				
				    ; Hide the cursor
 000001D5  C7 05 00000E6A R	    mov cursorInfo.dwSize, 1
	   00000001
 000001DF  C7 05 00000E6E R	    mov cursorInfo.bVisible, 0
	   00000000
				    INVOKE SetConsoleCursorInfo, consoleHandle, ADDR cursorInfo
 000001E9  68 00000E6A R   *	    push   OFFSET cursorInfo
 000001EE  FF 35 00000E66 R *	    push   consoleHandle
 000001F4  E8 00000000 E   *	    call   SetConsoleCursorInfo
				
				    ; Show welcome screen and get player info
 000001F9  E8 00000016		    call ShowWelcomeScreen
				
				    ; Initialize and start the game
 000001FE  E8 000001CC		    call InitializeGame
 00000203  E8 00000837		    call GameLoop
 00000208  E8 0000143D		    call CleanupGame
				    exit
 0000020D  6A 00	   *	    push   +000000000h
 0000020F  E8 00000000 E   *	    call   ExitProcess
 00000214			main ENDP
				
 00000214			ShowWelcomeScreen PROC
				    ; Set color to black text on white background
 00000214  B8 000000F0		    mov eax, black + (white * 16)    ; black text (0) on white background (15 * 16)
 00000219  E8 00000000 E	    call SetTextColor
				
				    ; Clear screen
 0000021E  E8 00000000 E	    call Clrscr
				
				    ; Show cursor for name input
 00000223  C7 05 00000E6E R	    mov cursorInfo.bVisible, 1
	   00000001
				    INVOKE SetConsoleCursorInfo, consoleHandle, ADDR cursorInfo
 0000022D  68 00000E6A R   *	    push   OFFSET cursorInfo
 00000232  FF 35 00000E66 R *	    push   consoleHandle
 00000238  E8 00000000 E   *	    call   SetConsoleCursorInfo
				
				    ; Display welcome art
 0000023D  BA 00000000 R	    mov edx, OFFSET welcomeArt
 00000242  E8 00000000 E	    call WriteString
 00000247  E8 00000000 E	    call Crlf
 0000024C  E8 00000000 E	    call Crlf
				
				    ; Get player name
 00000251  BA 00000573 R	    mov edx, OFFSET namePrompt
 00000256  E8 00000000 E	    call WriteString
 0000025B  BA 00000604 R	    mov edx, OFFSET playerName
 00000260  B9 0000001F		    mov ecx, 31         ; Maximum 31 characters + null terminator
 00000265  E8 00000000 E	    call ReadString
 0000026A  E8 00000000 E	    call Crlf
				
				    ; Hide cursor for level selection
 0000026F  C7 05 00000E6E R	    mov cursorInfo.bVisible, 0
	   00000000
				    INVOKE SetConsoleCursorInfo, consoleHandle, ADDR cursorInfo
 00000279  68 00000E6A R   *	    push   OFFSET cursorInfo
 0000027E  FF 35 00000E66 R *	    push   consoleHandle
 00000284  E8 00000000 E   *	    call   SetConsoleCursorInfo
				
				    ; Show level selection screen
 00000289  E8 00000001		    call ShowLevelSelection
				
 0000028E  C3			    ret
 0000028F			ShowWelcomeScreen ENDP
				
 0000028F			ShowLevelSelection PROC
				    ; Set color to black text on white background
 0000028F  B8 000000F0		    mov eax, black + (white * 16)    ; black text (0) on white background (15 * 16)
 00000294  E8 00000000 E	    call SetTextColor
				
				    ; Clear screen
 00000299  E8 00000000 E	    call Clrscr
				
 0000029E			LevelSelectLoop:
				    ; Set color to black text on white background again after each clear
 0000029E  B8 000000F0		    mov eax, black + (white * 16)    ; black text (0) on white background (15 * 16)
 000002A3  E8 00000000 E	    call SetTextColor
				
				    ; Clear screen each time we redraw
 000002A8  E8 00000000 E	    call Clrscr
				
				    ; Display instruction
 000002AD  B2 00		    mov dl, 0
 000002AF  B6 00		    mov dh, 0
 000002B1  E8 00000000 E	    call Gotoxy
 000002B6  BA 00002E29 R	    mov edx, OFFSET levelSelectMsg
 000002BB  E8 00000000 E	    call WriteString
 000002C0  E8 00000000 E	    call Crlf
 000002C5  E8 00000000 E	    call Crlf
				
				    ; Display Level 1 with arrow if selected
 000002CA  B2 00		    mov dl, 0
 000002CC  B6 02		    mov dh, 2
 000002CE  E8 00000000 E	    call Gotoxy
 000002D3  80 3D 00002E28 R	    cmp selectedLevel, 1
	   01
 000002DA  75 0A		    jne SkipArrow1
 000002DC  BA 00002E25 R	    mov edx, OFFSET selectionArrow
 000002E1  E8 00000000 E	    call WriteString
 000002E6			SkipArrow1:
 000002E6  BA 00002AF2 R	    mov edx, OFFSET level1Art
 000002EB  E8 00000000 E	    call WriteString
 000002F0  E8 00000000 E	    call Crlf
				
				    ; Display Level 2 with arrow if selected
 000002F5  B2 00		    mov dl, 0
 000002F7  B6 0C		    mov dh, 12
 000002F9  E8 00000000 E	    call Gotoxy
 000002FE  80 3D 00002E28 R	    cmp selectedLevel, 2
	   02
 00000305  75 0A		    jne SkipArrow2
 00000307  BA 00002E25 R	    mov edx, OFFSET selectionArrow
 0000030C  E8 00000000 E	    call WriteString
 00000311			SkipArrow2:
 00000311  BA 00002BF9 R	    mov edx, OFFSET level2Art
 00000316  E8 00000000 E	    call WriteString
 0000031B  E8 00000000 E	    call Crlf
				
				    ; Display Level 3 with arrow if selected
 00000320  B2 00		    mov dl, 0
 00000322  B6 16		    mov dh, 22
 00000324  E8 00000000 E	    call Gotoxy
 00000329  80 3D 00002E28 R	    cmp selectedLevel, 3
	   03
 00000330  75 0A		    jne SkipArrow3
 00000332  BA 00002E25 R	    mov edx, OFFSET selectionArrow
 00000337  E8 00000000 E	    call WriteString
 0000033C			SkipArrow3:
 0000033C  BA 00002D10 R	    mov edx, OFFSET level3Art
 00000341  E8 00000000 E	    call WriteString
				
				    ; Get input
 00000346  E8 00000000 E	    call ReadChar
				
				    ; Check input
 0000034B  0F B6 D8		    movzx ebx, al
				
				    ; Check for W (up)
 0000034E  3B 1D 00002E4D R	    cmp ebx, KEY_W_UP
 00000354  75 18		    jne NotW
 00000356  80 3D 00002E28 R	    cmp selectedLevel, 1
	   01
 0000035D  0F 84 FFFFFF3B	    je LevelSelectLoop    ; Already at top
 00000363  FE 0D 00002E28 R	    dec selectedLevel
 00000369  E9 FFFFFF30		    jmp LevelSelectLoop
 0000036E			NotW:
				
				    ; Check for S (down)
 0000036E  3B 1D 00002E51 R	    cmp ebx, KEY_S_DOWN
 00000374  75 18		    jne NotS
 00000376  80 3D 00002E28 R	    cmp selectedLevel, 3
	   03
 0000037D  0F 84 FFFFFF1B	    je LevelSelectLoop    ; Already at bottom
 00000383  FE 05 00002E28 R	    inc selectedLevel
 00000389  E9 FFFFFF10		    jmp LevelSelectLoop
 0000038E			NotS:
				
				    ; Check for spacebar (select)
 0000038E  3B 1D 00002E55 R	    cmp ebx, KEY_SPACE
 00000394  0F 85 FFFFFF04	    jne LevelSelectLoop
				
				    ; Allow selection of Level 1, 2, or 3
 0000039A  80 3D 00002E28 R	    cmp selectedLevel, 1
	   01
 000003A1  74 17		    je LevelSelected
 000003A3  80 3D 00002E28 R	    cmp selectedLevel, 2
	   02
 000003AA  74 0E		    je LevelSelected
 000003AC  80 3D 00002E28 R	    cmp selectedLevel, 3
	   03
 000003B3  74 05		    je LevelSelected
 000003B5  E9 FFFFFEE4		    jmp LevelSelectLoop
				
 000003BA			LevelSelected:
				    ; Store selected level and return
 000003BA  A0 00002E28 R	    mov al, selectedLevel
 000003BF  A2 0000062D R	    mov currentLevel, al
				
				    ; Wait a moment before continuing
 000003C4  B8 000003E8		    mov eax, 1000    ; 1 second
 000003C9  E8 00000000 E	    call Delay
				
 000003CE  C3			    ret
 000003CF			ShowLevelSelection ENDP
				
				; Initializes the game state
 000003CF			InitializeGame PROC
				    ; Initialize console to enable keyboard input with white background and black text
 000003CF  B8 000000F0		    mov eax, black + (white * 16)    ; black text (0) on white background (15 * 16)
 000003D4  E8 00000000 E	    call SetTextColor
 000003D9  E8 00000000 E	    call Clrscr
				
				    ; Initialize random seed
 000003DE  E8 00000000 E	    call Randomize
				
				    ; Initialize ghost colors
 000003E3  66| C7 05		    mov ghost1Color, red + (white * 16)        ; Red ghost
	   00002F4F R
	   00F4
 000003EC  66| C7 05		    mov ghost2Color, brown + (white * 16)      ; Brown ghost
	   00002F51 R
	   00F6
 000003F5  66| C7 05		    mov ghost3Color, green + (white * 16)      ; Green ghost
	   00002F53 R
	   00F2
 000003FE  66| C7 05		    mov ghost4Color, 6 + (white * 16)          ; Orange/yellow ghost (color code 6)
	   00002F55 R
	   00F6
 00000407  66| C7 05		    mov ghost5Color, 13 + (white * 16)         ; Pink/magenta ghost (color code 13)
	   00002F57 R
	   00FD
 00000410  66| C7 05		    mov ghost6Color, cyan + (white * 16)       ; Cyan ghost (for level 3)
	   00002F59 R
	   00F3
 00000419  66| C7 05		    mov ghost7Color, magenta + (white * 16)    ; Magenta ghost (for level 3)
	   00002F5B R
	   00F5
				
				    ; Initialize the grid with dots
 00000422  B9 00000800		    mov ecx, 2048      ; 32 * 64 = 2048 cells
 00000427  BE 00000000		    mov esi, 0
				
 0000042C			InitializeGridLoop:
 0000042C  A0 00000640 R	    mov al, dotChar
 00000431  88 86 00000644 R	    mov grid[esi], al
 00000437  46			    inc esi
 00000438  E2 F2		    loop InitializeGridLoop
				
				    ; Add walls around the border
 0000043A  E8 00000385		    call AddBorderWalls
				
				    ; Initialize wall colors and features for all levels
				
				    ; For Level 1, initialize the wall color (blue background)
 0000043F  66| C7 05		    mov wallColorLevel1, blue * 16 + white   ; Blue background with white text
	   00002E7A R
	   001F
				
				    ; For Level 2, initialize the wall color (red background)
 00000448  66| C7 05		    mov wallColorLevel2, red * 16 + white    ; Red background with white text
	   00002E7C R
	   004F
				
				    ; For Level 3, initialize the wall color (green background)
 00000451  66| C7 05		    mov wallColorLevel3, green * 16 + white  ; Green background with white text
	   00002E7E R
	   002F
				
				    ; Reset timers for all levels
 0000045A  C7 05 00002E66 R	    mov fruitTimer, 0                        ; Reset fruit timer
	   00000000
 00000464  C7 05 00002E72 R	    mov wallSlideTimer, 0                    ; Reset wall slide timer
	   00000000
				
				    ; Reset game state
 0000046E  C6 05 00000EA9 R	    mov gameEndReason, 0                     ; Reset game end reason
	   00
				
				
				    ; Level-specific initializations
 00000475  80 3D 0000062D R	    cmp currentLevel, 1
	   01
 0000047C  74 17		    je InitLevel1
 0000047E  80 3D 0000062D R	    cmp currentLevel, 2
	   02
 00000485  74 1A		    je InitLevel2
 00000487  80 3D 0000062D R	    cmp currentLevel, 3
	   03
 0000048E  74 3D		    je InitLevel3
 00000490  E9 00000210		    jmp NotLevel3Init                        ; Default case
				
 00000495			InitLevel1:
				    ; Level 1 specific initialization
 00000495  C6 05 00002E65 R	    mov fruitActive, 0                       ; No fruit initially in level 1
	   00
 0000049C  E9 00000204		    jmp NotLevel3Init
				
 000004A1			InitLevel2:
				    ; Level 2 specific initialization
 000004A1  C6 05 00002E65 R	    mov fruitActive, 1                       ; Activate fruit initially
	   01
				
				    ; Place initial fruit at fixed position
 000004A8  B8 0000000A		    mov eax, 10                              ; Row 10
 000004AD  F7 25 0000062E R	    mul gridWidth
 000004B3  83 C0 1E		    add eax, 30                              ; Column 30
 000004B6  A3 00002E61 R	    mov fruitPos, eax
 000004BB  8B F0		    mov esi, eax
 000004BD  A0 00000642 R	    mov al, fruitChar                        ; Set as fruit char
 000004C2  88 86 00000644 R	    mov grid[esi], al
 000004C8  E9 000001D8		    jmp NotLevel3Init
				
 000004CD			InitLevel3:
				    ; Level 3 specific initialization
 000004CD  C6 05 00002E65 R	    mov fruitActive, 1                       ; Activate fruit initially
	   01
				
				    ; Place initial fruit at fixed position
 000004D4  B8 0000000F		    mov eax, 15                              ; Row 15
 000004D9  F7 25 0000062E R	    mul gridWidth
 000004DF  83 C0 2D		    add eax, 45                              ; Column 45
 000004E2  A3 00002E61 R	    mov fruitPos, eax
 000004E7  8B F0		    mov esi, eax
 000004E9  A0 00000642 R	    mov al, fruitChar                        ; Set as fruit char
 000004EE  88 86 00000644 R	    mov grid[esi], al
				
 000004F4			CheckLevel3Init:
				    ; For Level 3, initialize teleport pads and obstacles
 000004F4  80 3D 0000062D R	    cmp currentLevel, 3
	   03
 000004FB  0F 85 000001A4	    jne NotLevel3Init
				
				    ; Place teleport pad 1 (top middle)
 00000501  B8 00000002		    mov eax, 2                               ; Row 2 (closer to top)
 00000506  F7 25 0000062E R	    mul gridWidth
 0000050C  83 C0 20		    add eax, 32                              ; Column 32 (middle)
 0000050F  A3 00002F3B R	    mov teleport1Pos, eax
 00000514  8B F0		    mov esi, eax
 00000516  A0 00002F39 R	    mov al, teleportPadChar                  ; Set as teleport pad
 0000051B  88 86 00000644 R	    mov grid[esi], al
				
				    ; Place teleport pad 2 (bottom middle)
 00000521  B8 0000001A		    mov eax, 26                              ; Row 26
 00000526  F7 25 0000062E R	    mul gridWidth
 0000052C  83 C0 20		    add eax, 32                              ; Column 32 (middle)
 0000052F  A3 00002F3F R	    mov teleport2Pos, eax
 00000534  8B F0		    mov esi, eax
 00000536  A0 00002F39 R	    mov al, teleportPadChar                  ; Set as teleport pad
 0000053B  88 86 00000644 R	    mov grid[esi], al
				
				    ; Add hardcoded obstacles for level 3 (similar to original Pacman)
				    ; These are static and won't move vertically
				
				    ; Top-left T-shaped obstacle
 00000541  B8 00000005		    mov eax, 5          ; Row 5
 00000546  F7 25 0000062E R	    mul gridWidth
 0000054C  83 C0 0A		    add eax, 10         ; Column 10
 0000054F  8B F0		    mov esi, eax
 00000551  B9 00000006		    mov ecx, 6          ; Width of horizontal part
 00000556			TopLeftHorizontal:
 00000556  A0 00000636 R	    mov al, wallChar
 0000055B  88 86 00000644 R	    mov grid[esi], al
 00000561  46			    inc esi
 00000562  E2 F2		    loop TopLeftHorizontal
				
				    ; Vertical part of top-left T
 00000564  B8 00000006		    mov eax, 6          ; Row 6
 00000569  F7 25 0000062E R	    mul gridWidth
 0000056F  83 C0 0C		    add eax, 12         ; Column 12 (middle of horizontal part)
 00000572  8B F0		    mov esi, eax
 00000574  B9 00000004		    mov ecx, 4          ; Height of vertical part
 00000579			TopLeftVertical:
 00000579  A0 00000636 R	    mov al, wallChar
 0000057E  88 86 00000644 R	    mov grid[esi], al
 00000584  03 35 0000062E R	    add esi, gridWidth
 0000058A  E2 ED		    loop TopLeftVertical
				
				    ; Top-right T-shaped obstacle
 0000058C  B8 00000005		    mov eax, 5          ; Row 5
 00000591  F7 25 0000062E R	    mul gridWidth
 00000597  83 C0 30		    add eax, 48         ; Column 48
 0000059A  8B F0		    mov esi, eax
 0000059C  B9 00000006		    mov ecx, 6          ; Width of horizontal part
 000005A1			TopRightHorizontal:
 000005A1  A0 00000636 R	    mov al, wallChar
 000005A6  88 86 00000644 R	    mov grid[esi], al
 000005AC  46			    inc esi
 000005AD  E2 F2		    loop TopRightHorizontal
				
				    ; Vertical part of top-right T
 000005AF  B8 00000006		    mov eax, 6          ; Row 6
 000005B4  F7 25 0000062E R	    mul gridWidth
 000005BA  83 C0 32		    add eax, 50         ; Column 50 (middle of horizontal part)
 000005BD  8B F0		    mov esi, eax
 000005BF  B9 00000004		    mov ecx, 4          ; Height of vertical part
 000005C4			TopRightVertical:
 000005C4  A0 00000636 R	    mov al, wallChar
 000005C9  88 86 00000644 R	    mov grid[esi], al
 000005CF  03 35 0000062E R	    add esi, gridWidth
 000005D5  E2 ED		    loop TopRightVertical
				
				    ; Removed the middle-left and middle-right L-shaped obstacles as requested
				
				    ; Bottom-left box obstacle
 000005D7  B8 00000018		    mov eax, 24         ; Row 24
 000005DC  F7 25 0000062E R	    mul gridWidth
 000005E2  83 C0 0A		    add eax, 10         ; Column 10
 000005E5  8B F0		    mov esi, eax
				
				    ; Draw a 4x4 box
 000005E7  B9 00000004		    mov ecx, 4          ; Height of box
 000005EC			BoxLeftLoop:
 000005EC  51			    push ecx
 000005ED  56			    push esi
				
 000005EE  B9 00000004		    mov ecx, 4          ; Width of box
 000005F3			BoxLeftInnerLoop:
 000005F3  A0 00000636 R	    mov al, wallChar
 000005F8  88 86 00000644 R	    mov grid[esi], al
 000005FE  46			    inc esi
 000005FF  E2 F2		    loop BoxLeftInnerLoop
				
 00000601  5E			    pop esi
 00000602  03 35 0000062E R	    add esi, gridWidth  ; Move to next row
 00000608  59			    pop ecx
 00000609  E2 E1		    loop BoxLeftLoop
				
				    ; Bottom-right box obstacle
 0000060B  B8 00000018		    mov eax, 24         ; Row 24
 00000610  F7 25 0000062E R	    mul gridWidth
 00000616  83 C0 32		    add eax, 50         ; Column 50
 00000619  8B F0		    mov esi, eax
				
				    ; Draw a 4x4 box
 0000061B  B9 00000004		    mov ecx, 4          ; Height of box
 00000620			BoxRightLoop:
 00000620  51			    push ecx
 00000621  56			    push esi
				
 00000622  B9 00000004		    mov ecx, 4          ; Width of box
 00000627			BoxRightInnerLoop:
 00000627  A0 00000636 R	    mov al, wallChar
 0000062C  88 86 00000644 R	    mov grid[esi], al
 00000632  46			    inc esi
 00000633  E2 F2		    loop BoxRightInnerLoop
				
 00000635  5E			    pop esi
 00000636  03 35 0000062E R	    add esi, gridWidth  ; Move to next row
 0000063C  59			    pop ecx
 0000063D  E2 E1		    loop BoxRightLoop
				
				    ; Center ghost box (similar to original Pacman but with open bottom)
 0000063F  B8 0000000E		    mov eax, 14         ; Row 14
 00000644  F7 25 0000062E R	    mul gridWidth
 0000064A  83 C0 1B		    add eax, 27         ; Column 27
 0000064D  8B F0		    mov esi, eax
				
				    ; Draw top of ghost box
 0000064F  B9 0000000A		    mov ecx, 10         ; Width of box
 00000654			GhostBoxTop:
 00000654  A0 00000636 R	    mov al, wallChar
 00000659  88 86 00000644 R	    mov grid[esi], al
 0000065F  46			    inc esi
 00000660  E2 F2		    loop GhostBoxTop
				
				    ; Draw sides of ghost box (but not the bottom)
 00000662  B9 00000004		    mov ecx, 4          ; Height of sides
 00000667			GhostBoxSides:
				    ; Left side
 00000667  B8 0000000F		    mov eax, 15         ; Starting row (after top)
 0000066C  03 C1		    add eax, ecx        ; Current row
 0000066E  48			    dec eax             ; Adjust for 0-based index
 0000066F  F7 25 0000062E R	    mul gridWidth
 00000675  83 C0 1B		    add eax, 27         ; Left column
 00000678  8B F0		    mov esi, eax
 0000067A  A0 00000636 R	    mov al, wallChar
 0000067F  88 86 00000644 R	    mov grid[esi], al
				
				    ; Right side
 00000685  B8 0000000F		    mov eax, 15         ; Starting row (after top)
 0000068A  03 C1		    add eax, ecx        ; Current row
 0000068C  48			    dec eax             ; Adjust for 0-based index
 0000068D  F7 25 0000062E R	    mul gridWidth
 00000693  83 C0 24		    add eax, 36         ; Right column
 00000696  8B F0		    mov esi, eax
 00000698  A0 00000636 R	    mov al, wallChar
 0000069D  88 86 00000644 R	    mov grid[esi], al
				
 000006A3  E2 C2		    loop GhostBoxSides
				
				    ; Bottom of ghost box removed as requested
				
 000006A5			NotLevel3Init:
				
				    ; Add interior walls
 000006A5  E8 00000187		    call AddInteriorWalls
				
				    ; Initialize Pacman position (middle of grid)
 000006AA  B8 0000000F		    mov eax, 15        ; Middle row (32/2 - 1)
 000006AF  F7 25 0000062E R	    mul gridWidth
 000006B5  83 C0 20		    add eax, 32        ; Middle column (64/2)
 000006B8  A3 00000E8C R	    mov pacmanPos, eax
 000006BD  8B F0		    mov esi, eax
 000006BF  A0 00000638 R	    mov al, pacmanChar
 000006C4  88 86 00000644 R	    mov grid[esi], al
				
				    ; Initialize Ghost positions in different corners
				    ; Ghost 1 - Top left area (red)
 000006CA  B8 00000003		    mov eax, 3
 000006CF  F7 25 0000062E R	    mul gridWidth
 000006D5  83 C0 03		    add eax, 3
 000006D8  A3 00000E90 R	    mov ghost1Pos, eax
 000006DD  8B F0		    mov esi, eax
 000006DF  A0 0000063A R	    mov al, ghostChar
 000006E4  88 86 00000644 R	    mov grid[esi], al
				
				    ; Ghost 2 - Top right area (brown)
 000006EA  B8 00000003		    mov eax, 3
 000006EF  F7 25 0000062E R	    mul gridWidth
 000006F5  83 C0 3C		    add eax, 60        ; gridWidth - 4
 000006F8  A3 00000E94 R	    mov ghost2Pos, eax
 000006FD  8B F0		    mov esi, eax
 000006FF  A0 0000063A R	    mov al, ghostChar
 00000704  88 86 00000644 R	    mov grid[esi], al
				
				    ; Ghost 3 - Bottom left area (green)
 0000070A  B8 0000001C		    mov eax, 28        ; gridHeight - 4
 0000070F  F7 25 0000062E R	    mul gridWidth
 00000715  83 C0 03		    add eax, 3
 00000718  A3 00000E98 R	    mov ghost3Pos, eax
 0000071D  8B F0		    mov esi, eax
 0000071F  A0 0000063A R	    mov al, ghostChar
 00000724  88 86 00000644 R	    mov grid[esi], al
				
				    ; Ghost 4 - Bottom right area (orange)
 0000072A  B8 0000001C		    mov eax, 28        ; gridHeight - 4
 0000072F  F7 25 0000062E R	    mul gridWidth
 00000735  83 C0 3C		    add eax, 60        ; gridWidth - 4
 00000738  A3 00000E9C R	    mov ghost4Pos, eax
 0000073D  8B F0		    mov esi, eax
 0000073F  A0 0000063A R	    mov al, ghostChar
 00000744  88 86 00000644 R	    mov grid[esi], al
				
				    ; Ghost 5 - Only for Level 2 (pink)
 0000074A  80 3D 0000062D R	    cmp currentLevel, 2
	   02
 00000751  75 22		    jne CheckLevel3Ghosts
 00000753  B8 0000000F		    mov eax, 15        ; Middle row
 00000758  F7 25 0000062E R	    mul gridWidth
 0000075E  83 C0 0F		    add eax, 15        ; Left of center
 00000761  A3 00000EA0 R	    mov ghost5Pos, eax
 00000766  8B F0		    mov esi, eax
 00000768  A0 0000063A R	    mov al, ghostChar
 0000076D  88 86 00000644 R	    mov grid[esi], al
 00000773  EB 49		    jmp SkipExtraGhosts
				
 00000775			CheckLevel3Ghosts:
				    ; Ghosts 6 and 7 - Only for Level 3 (cyan and magenta)
 00000775  80 3D 0000062D R	    cmp currentLevel, 3
	   03
 0000077C  75 40		    jne SkipExtraGhosts
				
				    ; Ghost 6 - Cyan ghost (top middle)
 0000077E  B8 00000008		    mov eax, 8         ; Row 8
 00000783  F7 25 0000062E R	    mul gridWidth
 00000789  83 C0 20		    add eax, 32        ; Middle column
 0000078C  A3 00002F43 R	    mov ghost6Pos, eax
 00000791  8B F0		    mov esi, eax
 00000793  A0 0000063A R	    mov al, ghostChar
 00000798  88 86 00000644 R	    mov grid[esi], al
				
				    ; Ghost 7 - Magenta ghost (bottom middle)
 0000079E  B8 00000017		    mov eax, 23        ; Row 23
 000007A3  F7 25 0000062E R	    mul gridWidth
 000007A9  83 C0 20		    add eax, 32        ; Middle column
 000007AC  A3 00002F47 R	    mov ghost7Pos, eax
 000007B1  8B F0		    mov esi, eax
 000007B3  A0 0000063A R	    mov al, ghostChar
 000007B8  88 86 00000644 R	    mov grid[esi], al
				
 000007BE			SkipExtraGhosts:
				
				    ; Count the initial number of dots in the grid
 000007BE  E8 00001459		    call CountRemainingDots
				
 000007C3  C3			    ret
 000007C4			InitializeGame ENDP
				
				; Adds walls around the border of the grid
 000007C4			AddBorderWalls PROC
				    ; Top wall
 000007C4  B9 00000040		    mov ecx, 64        ; gridWidth
 000007C9  BE 00000000		    mov esi, 0
 000007CE			TopWallLoop:
 000007CE  A0 00000636 R	    mov al, wallChar
 000007D3  88 86 00000644 R	    mov grid[esi], al
 000007D9  46			    inc esi
 000007DA  E2 F2		    loop TopWallLoop
				
				    ; Bottom wall
 000007DC  B9 00000040		    mov ecx, 64        ; gridWidth
 000007E1  B8 0000001F		    mov eax, 31        ; gridHeight - 1
 000007E6  F7 25 0000062E R	    mul gridWidth
 000007EC  8B F0		    mov esi, eax
 000007EE			BottomWallLoop:
 000007EE  A0 00000636 R	    mov al, wallChar
 000007F3  88 86 00000644 R	    mov grid[esi], al
 000007F9  46			    inc esi
 000007FA  E2 F2		    loop BottomWallLoop
				
				    ; Left wall
 000007FC  B9 00000020		    mov ecx, 32        ; gridHeight
 00000801  BE 00000000		    mov esi, 0
 00000806			LeftWallLoop:
 00000806  A0 00000636 R	    mov al, wallChar
 0000080B  88 86 00000644 R	    mov grid[esi], al
 00000811  83 C6 40		    add esi, 64        ; gridWidth
 00000814  E2 F0		    loop LeftWallLoop
				
				    ; Right wall
 00000816  B9 00000020		    mov ecx, 32        ; gridHeight
 0000081B  BE 0000003F		    mov esi, 63        ; gridWidth - 1
 00000820			RightWallLoop:
 00000820  A0 00000636 R	    mov al, wallChar
 00000825  88 86 00000644 R	    mov grid[esi], al
 0000082B  83 C6 40		    add esi, 64        ; gridWidth
 0000082E  E2 F0		    loop RightWallLoop
				
 00000830  C3			    ret
 00000831			AddBorderWalls ENDP
				
				; Adds interior walls as specified
 00000831			AddInteriorWalls PROC
				    ; Row 1: 2 walls of 8 units each (evenly spaced)
 00000831  B8 00000006		    mov eax, 6         ; First row of walls
 00000836  F7 25 0000062E R	    mul gridWidth
 0000083C  83 C0 10		    add eax, 16        ; Start position for first wall
 0000083F  8B F0		    mov esi, eax
 00000841  B9 00000008		    mov ecx, 8         ; Length of wall
 00000846			Row1Wall1:
 00000846  A0 00000636 R	    mov al, wallChar
 0000084B  88 86 00000644 R	    mov grid[esi], al
 00000851  46			    inc esi
 00000852  E2 F2		    loop Row1Wall1
				
 00000854  B8 00000006		    mov eax, 6         ; Same row
 00000859  F7 25 0000062E R	    mul gridWidth
 0000085F  83 C0 28		    add eax, 40        ; Start position for second wall
 00000862  8B F0		    mov esi, eax
 00000864  B9 00000008		    mov ecx, 8         ; Length of wall
 00000869			Row1Wall2:
 00000869  A0 00000636 R	    mov al, wallChar
 0000086E  88 86 00000644 R	    mov grid[esi], al
 00000874  46			    inc esi
 00000875  E2 F2		    loop Row1Wall2
				
				    ; Row 2: 5 walls of 8 units each (evenly spaced)
 00000877  B8 0000000C		    mov eax, 12        ; Second row
 0000087C  F7 25 0000062E R	    mul gridWidth
 00000882  83 C0 04		    add eax, 4         ; First wall
 00000885  8B F0		    mov esi, eax
 00000887  B9 00000008		    mov ecx, 8
 0000088C			Row2Wall1:
 0000088C  A0 00000636 R	    mov al, wallChar
 00000891  88 86 00000644 R	    mov grid[esi], al
 00000897  46			    inc esi
 00000898  E2 F2		    loop Row2Wall1
				
 0000089A  B8 0000000C		    mov eax, 12
 0000089F  F7 25 0000062E R	    mul gridWidth
 000008A5  83 C0 10		    add eax, 16        ; Second wall
 000008A8  8B F0		    mov esi, eax
 000008AA  B9 00000008		    mov ecx, 8
 000008AF			Row2Wall2:
 000008AF  A0 00000636 R	    mov al, wallChar
 000008B4  88 86 00000644 R	    mov grid[esi], al
 000008BA  46			    inc esi
 000008BB  E2 F2		    loop Row2Wall2
				
 000008BD  B8 0000000C		    mov eax, 12
 000008C2  F7 25 0000062E R	    mul gridWidth
 000008C8  83 C0 1C		    add eax, 28        ; Third wall (middle)
 000008CB  8B F0		    mov esi, eax
 000008CD  B9 00000008		    mov ecx, 8
 000008D2			Row2Wall3:
 000008D2  A0 00000636 R	    mov al, wallChar
 000008D7  88 86 00000644 R	    mov grid[esi], al
 000008DD  46			    inc esi
 000008DE  E2 F2		    loop Row2Wall3
				
 000008E0  B8 0000000C		    mov eax, 12
 000008E5  F7 25 0000062E R	    mul gridWidth
 000008EB  83 C0 28		    add eax, 40        ; Fourth wall
 000008EE  8B F0		    mov esi, eax
 000008F0  B9 00000008		    mov ecx, 8
 000008F5			Row2Wall4:
 000008F5  A0 00000636 R	    mov al, wallChar
 000008FA  88 86 00000644 R	    mov grid[esi], al
 00000900  46			    inc esi
 00000901  E2 F2		    loop Row2Wall4
				
 00000903  B8 0000000C		    mov eax, 12
 00000908  F7 25 0000062E R	    mul gridWidth
 0000090E  83 C0 34		    add eax, 52        ; Fifth wall
 00000911  8B F0		    mov esi, eax
 00000913  B9 00000008		    mov ecx, 8
 00000918			Row2Wall5:
 00000918  A0 00000636 R	    mov al, wallChar
 0000091D  88 86 00000644 R	    mov grid[esi], al
 00000923  46			    inc esi
 00000924  E2 F2		    loop Row2Wall5
				
				    ; Row 3: 3 walls of 8 units each (evenly spaced)
 00000926  B8 00000012		    mov eax, 18        ; Third row
 0000092B  F7 25 0000062E R	    mul gridWidth
 00000931  83 C0 0C		    add eax, 12        ; First wall
 00000934  8B F0		    mov esi, eax
 00000936  B9 00000008		    mov ecx, 8
 0000093B			Row3Wall1:
 0000093B  A0 00000636 R	    mov al, wallChar
 00000940  88 86 00000644 R	    mov grid[esi], al
 00000946  46			    inc esi
 00000947  E2 F2		    loop Row3Wall1
				
 00000949  B8 00000012		    mov eax, 18
 0000094E  F7 25 0000062E R	    mul gridWidth
 00000954  83 C0 1C		    add eax, 28        ; Second wall (middle)
 00000957  8B F0		    mov esi, eax
 00000959  B9 00000008		    mov ecx, 8
 0000095E			Row3Wall2:
 0000095E  A0 00000636 R	    mov al, wallChar
 00000963  88 86 00000644 R	    mov grid[esi], al
 00000969  46			    inc esi
 0000096A  E2 F2		    loop Row3Wall2
				
 0000096C  B8 00000012		    mov eax, 18
 00000971  F7 25 0000062E R	    mul gridWidth
 00000977  83 C0 2C		    add eax, 44        ; Third wall
 0000097A  8B F0		    mov esi, eax
 0000097C  B9 00000008		    mov ecx, 8
 00000981			Row3Wall3:
 00000981  A0 00000636 R	    mov al, wallChar
 00000986  88 86 00000644 R	    mov grid[esi], al
 0000098C  46			    inc esi
 0000098D  E2 F2		    loop Row3Wall3
				
				    ; Row 4: 5 walls of 8 units each (evenly spaced) - same pattern as row 2
 0000098F  B8 00000018		    mov eax, 24        ; Fourth row
 00000994  F7 25 0000062E R	    mul gridWidth
 0000099A  83 C0 04		    add eax, 4         ; First wall
 0000099D  8B F0		    mov esi, eax
 0000099F  B9 00000008		    mov ecx, 8
 000009A4			Row4Wall1:
 000009A4  A0 00000636 R	    mov al, wallChar
 000009A9  88 86 00000644 R	    mov grid[esi], al
 000009AF  46			    inc esi
 000009B0  E2 F2		    loop Row4Wall1
				
 000009B2  B8 00000018		    mov eax, 24
 000009B7  F7 25 0000062E R	    mul gridWidth
 000009BD  83 C0 10		    add eax, 16        ; Second wall
 000009C0  8B F0		    mov esi, eax
 000009C2  B9 00000008		    mov ecx, 8
 000009C7			Row4Wall2:
 000009C7  A0 00000636 R	    mov al, wallChar
 000009CC  88 86 00000644 R	    mov grid[esi], al
 000009D2  46			    inc esi
 000009D3  E2 F2		    loop Row4Wall2
				
 000009D5  B8 00000018		    mov eax, 24
 000009DA  F7 25 0000062E R	    mul gridWidth
 000009E0  83 C0 1C		    add eax, 28        ; Third wall (middle)
 000009E3  8B F0		    mov esi, eax
 000009E5  B9 00000008		    mov ecx, 8
 000009EA			Row4Wall3:
 000009EA  A0 00000636 R	    mov al, wallChar
 000009EF  88 86 00000644 R	    mov grid[esi], al
 000009F5  46			    inc esi
 000009F6  E2 F2		    loop Row4Wall3
				
 000009F8  B8 00000018		    mov eax, 24
 000009FD  F7 25 0000062E R	    mul gridWidth
 00000A03  83 C0 28		    add eax, 40        ; Fourth wall
 00000A06  8B F0		    mov esi, eax
 00000A08  B9 00000008		    mov ecx, 8
 00000A0D			Row4Wall4:
 00000A0D  A0 00000636 R	    mov al, wallChar
 00000A12  88 86 00000644 R	    mov grid[esi], al
 00000A18  46			    inc esi
 00000A19  E2 F2		    loop Row4Wall4
				
 00000A1B  B8 00000018		    mov eax, 24
 00000A20  F7 25 0000062E R	    mul gridWidth
 00000A26  83 C0 34		    add eax, 52        ; Fifth wall
 00000A29  8B F0		    mov esi, eax
 00000A2B  B9 00000008		    mov ecx, 8
 00000A30			Row4Wall5:
 00000A30  A0 00000636 R	    mov al, wallChar
 00000A35  88 86 00000644 R	    mov grid[esi], al
 00000A3B  46			    inc esi
 00000A3C  E2 F2		    loop Row4Wall5
				
 00000A3E  C3			    ret
 00000A3F			AddInteriorWalls ENDP
				
				; Main game loop
 00000A3F			GameLoop PROC
				    ; Draw the initial grid
 00000A3F  E8 00000919		    call DrawGrid
				
				    ; Display instructions
 00000A44  B2 00		    mov dl, 0
 00000A46  B6 22		    mov dh, 34
 00000A48  E8 00000000 E	    call Gotoxy
 00000A4D  BA 00000ECE R	    mov edx, OFFSET msgQuit
 00000A52  E8 00000000 E	    call WriteString
				
				    ; Initialize last direction to none
 00000A57  C7 05 00002E59 R	    mov lastDirection, 0
	   00000000
				
 00000A61			GameLoopStart:
				    ; Update power-up timer if active
 00000A61  80 3D 00000E4D R	    cmp powerUpActive, 1
	   01
 00000A68  75 24		    jne SkipPowerUpTimer
 00000A6A  FF 05 00000E4E R	    inc powerUpTimer
 00000A70  A1 00000E4E R	    mov eax, powerUpTimer
 00000A75  3B 05 00000E52 R	    cmp eax, powerUpDuration
 00000A7B  7C 11		    jl SkipPowerUpTimer
				    ; Power-up expired
 00000A7D  C6 05 00000E4D R	    mov powerUpActive, 0
	   00
 00000A84  C7 05 00000E4E R	    mov powerUpTimer, 0
	   00000000
 00000A8E			SkipPowerUpTimer:
				
				    ; Check for keyboard input (non-blocking)
 00000A8E  E8 00000000 E	    call ReadKey
 00000A93  74 77		    jz NoInput        ; If no key pressed, jump to movement processing
				
				    ; Process the key that was pressed
 00000A95  0F B6 D8		    movzx ebx, al
				
				    ; Check for pause first
 00000A98  3B 1D 00002AED R	    cmp ebx, KEY_P
 00000A9E  75 07		    jne NotPause
 00000AA0  E8 0000105B		    call TogglePause
 00000AA5  EB BA		    jmp GameLoopStart
 00000AA7			NotPause:
				
				    ; If paused, ignore other inputs except P
 00000AA7  80 3D 00002AF1 R	    cmp isPaused, 1
	   01
 00000AAE  74 B1		    je GameLoopStart
				
				    ; Process direction inputs
 00000AB0  3B 1D 00000EBA R	    cmp ebx, KEY_W
 00000AB6  75 0C		    jne NotW
 00000AB8  C7 05 00002E59 R	    mov lastDirection, 1    ; Up
	   00000001
 00000AC2  EB 48		    jmp NoInput
 00000AC4			NotW:
 00000AC4  3B 1D 00000EC6 R	    cmp ebx, KEY_D
 00000ACA  75 0C		    jne NotD
 00000ACC  C7 05 00002E59 R	    mov lastDirection, 2    ; Right
	   00000002
 00000AD6  EB 34		    jmp NoInput
 00000AD8			NotD:
 00000AD8  3B 1D 00000EC2 R	    cmp ebx, KEY_S
 00000ADE  75 0C		    jne NotS
 00000AE0  C7 05 00002E59 R	    mov lastDirection, 3    ; Down
	   00000003
 00000AEA  EB 20		    jmp NoInput
 00000AEC			NotS:
 00000AEC  3B 1D 00000EBE R	    cmp ebx, KEY_A
 00000AF2  75 0C		    jne NotA
 00000AF4  C7 05 00002E59 R	    mov lastDirection, 4    ; Left
	   00000004
 00000AFE  EB 0C		    jmp NoInput
 00000B00			NotA:
 00000B00  3B 1D 00000ECA R	    cmp ebx, KEY_Q
 00000B06  0F 84 00000382	    je QuitGame
				
 00000B0C			NoInput:
				    ; Update level-specific features
 00000B0C  80 3D 0000062D R	    cmp currentLevel, 1
	   01
 00000B13  74 20		    je SkipLevelUpdates        ; Level 1 has no special updates
				
 00000B15  80 3D 0000062D R	    cmp currentLevel, 2
	   02
 00000B1C  74 0B		    je UpdateLevel2
				
 00000B1E  80 3D 0000062D R	    cmp currentLevel, 3
	   03
 00000B25  74 09		    je UpdateLevel3
				
 00000B27  EB 0C		    jmp SkipLevelUpdates       ; Default case
				
 00000B29			UpdateLevel2:
 00000B29  E8 00000B41		    call UpdateLevel2Features
 00000B2E  EB 05		    jmp SkipLevelUpdates
				
 00000B30			UpdateLevel3:
 00000B30  E8 00000BBA		    call UpdateLevel3Features
				
 00000B35			SkipLevelUpdates:
				
				    ; Add delay between moves
 00000B35  A1 00002E5D R	    mov eax, MOVE_DELAY
 00000B3A  E8 00000000 E	    call Delay
				
				    ; If paused, skip movement
 00000B3F  80 3D 00002AF1 R	    cmp isPaused, 1
	   01
 00000B46  0F 84 FFFFFF15	    je GameLoopStart
				
				    ; Process movement based on last direction
 00000B4C  A1 00002E59 R	    mov eax, lastDirection
 00000B51  83 F8 00		    cmp eax, 0
 00000B54  0F 84 00000300	    je SkipMovement    ; No movement if no direction set
 00000B5A  83 F8 01		    cmp eax, 1
 00000B5D  74 20		    je ProcessMoveUp
 00000B5F  83 F8 02		    cmp eax, 2
 00000B62  0F 84 000000BE	    je ProcessMoveRight
 00000B68  83 F8 03		    cmp eax, 3
 00000B6B  0F 84 00000157	    je ProcessMoveDown
 00000B71  83 F8 04		    cmp eax, 4
 00000B74  0F 84 000001F5	    je ProcessMoveLeft
 00000B7A  E9 000002DB		    jmp SkipMovement
				
 00000B7F			ProcessMoveUp:
				    ; Calculate new position (current - gridWidth)
 00000B7F  8B 1D 00000E8C R	    mov ebx, pacmanPos
 00000B85  2B 1D 0000062E R	    sub ebx, gridWidth
				    ; Check if valid move
 00000B8B  0F B6 83		    movzx eax, grid[ebx]
	   00000644 R
 00000B92  3A 05 00000636 R	    cmp al, wallChar
 00000B98  0F 84 00000270	    je CheckLevel2Wall
				    ; Check for ghost collision
 00000B9E  3A 05 0000063A R	    cmp al, ghostChar
 00000BA4  0F 84 000002B2	    je GhostCollision
				
				    ; Check for fruit - explicit fruit check
 00000BAA  3A 05 00000642 R	    cmp al, fruitChar
 00000BB0  75 25		    jne CheckTeleportUp
				
				    ; Collect fruit
 00000BB2  A1 00002E6A R	    mov eax, fruitPoints    ; Move fruitPoints to register first
 00000BB7  01 05 00000E48 R	    add score, eax          ; Then add from register to score
 00000BBD  C6 05 00002E65 R	    mov fruitActive, 0      ; Deactivate fruit
	   00
 00000BC4  C6 05 00000E4D R	    mov powerUpActive, 1    ; Activate power-up
	   01
 00000BCB  C7 05 00000E4E R	    mov powerUpTimer, 0     ; Reset power-up timer
	   00000000
 00000BD5  EB 3F		    jmp NotTeleportUp
				
 00000BD7			CheckTeleportUp:
				    ; Check for teleport pad in level 3
 00000BD7  80 3D 0000062D R	    cmp currentLevel, 3
	   03
 00000BDE  75 36		    jne NotTeleportUp
 00000BE0  3A 05 00002F39 R	    cmp al, teleportPadChar
 00000BE6  75 2E		    jne NotTeleportUp
				
				    ; Play teleport sound
 00000BE8  60			    pushad                  ; Save all registers
				    INVOKE PlaySoundFile, ADDR teleportSoundFile, teleportSoundFreq, teleportSoundDur
 00000BE9  FF 35 0000344D R *	    push   teleportSoundDur
 00000BEF  FF 35 00003449 R *	    push   teleportSoundFreq
 00000BF5  68 0000341D R   *	    push   OFFSET teleportSoundFile
 00000BFA  E8 FFFFF401	   *	    call   PlaySoundFile
 00000BFF  61			    popad                   ; Restore all registers
				
				    ; Teleport to the other pad
 00000C00  3B 1D 00002F3B R	    cmp ebx, teleport1Pos
 00000C06  75 08		    jne CheckTeleport2Up
				
				    ; Teleporting from pad 1 to pad 2
 00000C08  8B 1D 00002F3F R	    mov ebx, teleport2Pos
 00000C0E  EB 06		    jmp NotTeleportUp
				
 00000C10			CheckTeleport2Up:
				    ; Teleporting from pad 2 to pad 1
 00000C10  8B 1D 00002F3B R	    mov ebx, teleport1Pos
				
 00000C16			NotTeleportUp:
				    ; Valid move, update pacman position
 00000C16  E8 0000028C		    call MovePacman
 00000C1B  89 1D 00000E8C R	    mov pacmanPos, ebx
 00000C21  E9 0000023D		    jmp ContinueGame
				
 00000C26			ProcessMoveRight:
				    ; Calculate new position (current + 1)
 00000C26  8B 1D 00000E8C R	    mov ebx, pacmanPos
 00000C2C  43			    inc ebx
				    ; Check if valid move
 00000C2D  0F B6 83		    movzx eax, grid[ebx]
	   00000644 R
 00000C34  3A 05 00000636 R	    cmp al, wallChar
 00000C3A  0F 84 000001CE	    je CheckLevel2Wall
				    ; Check for ghost collision
 00000C40  3A 05 0000063A R	    cmp al, ghostChar
 00000C46  0F 84 00000210	    je GhostCollision
				
				    ; Check for fruit - explicit fruit check
 00000C4C  3A 05 00000642 R	    cmp al, fruitChar
 00000C52  75 25		    jne CheckTeleportRight
				
				    ; Collect fruit
 00000C54  A1 00002E6A R	    mov eax, fruitPoints    ; Move fruitPoints to register first
 00000C59  01 05 00000E48 R	    add score, eax          ; Then add from register to score
 00000C5F  C6 05 00002E65 R	    mov fruitActive, 0      ; Deactivate fruit
	   00
 00000C66  C6 05 00000E4D R	    mov powerUpActive, 1    ; Activate power-up
	   01
 00000C6D  C7 05 00000E4E R	    mov powerUpTimer, 0     ; Reset power-up timer
	   00000000
 00000C77  EB 3F		    jmp NotTeleportRight
				
 00000C79			CheckTeleportRight:
				    ; Check for teleport pad in level 3
 00000C79  80 3D 0000062D R	    cmp currentLevel, 3
	   03
 00000C80  75 36		    jne NotTeleportRight
 00000C82  3A 05 00002F39 R	    cmp al, teleportPadChar
 00000C88  75 2E		    jne NotTeleportRight
				
				    ; Play teleport sound
 00000C8A  60			    pushad                  ; Save all registers
				    INVOKE PlaySoundFile, ADDR teleportSoundFile, teleportSoundFreq, teleportSoundDur
 00000C8B  FF 35 0000344D R *	    push   teleportSoundDur
 00000C91  FF 35 00003449 R *	    push   teleportSoundFreq
 00000C97  68 0000341D R   *	    push   OFFSET teleportSoundFile
 00000C9C  E8 FFFFF35F	   *	    call   PlaySoundFile
 00000CA1  61			    popad                   ; Restore all registers
				
				    ; Teleport to the other pad
 00000CA2  3B 1D 00002F3B R	    cmp ebx, teleport1Pos
 00000CA8  75 08		    jne CheckTeleport2Right
				
				    ; Teleporting from pad 1 to pad 2
 00000CAA  8B 1D 00002F3F R	    mov ebx, teleport2Pos
 00000CB0  EB 06		    jmp NotTeleportRight
				
 00000CB2			CheckTeleport2Right:
				    ; Teleporting from pad 2 to pad 1
 00000CB2  8B 1D 00002F3B R	    mov ebx, teleport1Pos
				
 00000CB8			NotTeleportRight:
				    ; Valid move, update pacman position
 00000CB8  E8 000001EA		    call MovePacman
 00000CBD  89 1D 00000E8C R	    mov pacmanPos, ebx
 00000CC3  E9 0000019B		    jmp ContinueGame
				
 00000CC8			ProcessMoveDown:
				    ; Calculate new position (current + gridWidth)
 00000CC8  8B 1D 00000E8C R	    mov ebx, pacmanPos
 00000CCE  03 1D 0000062E R	    add ebx, gridWidth
				    ; Check if valid move
 00000CD4  0F B6 83		    movzx eax, grid[ebx]
	   00000644 R
 00000CDB  3A 05 00000636 R	    cmp al, wallChar
 00000CE1  0F 84 00000127	    je CheckLevel2Wall
				    ; Check for ghost collision
 00000CE7  3A 05 0000063A R	    cmp al, ghostChar
 00000CED  0F 84 00000169	    je GhostCollision
				
				    ; Check for fruit - explicit fruit check
 00000CF3  3A 05 00000642 R	    cmp al, fruitChar
 00000CF9  75 25		    jne CheckTeleportDown
				
				    ; Collect fruit
 00000CFB  A1 00002E6A R	    mov eax, fruitPoints    ; Move fruitPoints to register first
 00000D00  01 05 00000E48 R	    add score, eax          ; Then add from register to score
 00000D06  C6 05 00002E65 R	    mov fruitActive, 0      ; Deactivate fruit
	   00
 00000D0D  C6 05 00000E4D R	    mov powerUpActive, 1    ; Activate power-up
	   01
 00000D14  C7 05 00000E4E R	    mov powerUpTimer, 0     ; Reset power-up timer
	   00000000
 00000D1E  EB 3F		    jmp NotTeleportDown
				
 00000D20			CheckTeleportDown:
				    ; Check for teleport pad in level 3
 00000D20  80 3D 0000062D R	    cmp currentLevel, 3
	   03
 00000D27  75 36		    jne NotTeleportDown
 00000D29  3A 05 00002F39 R	    cmp al, teleportPadChar
 00000D2F  75 2E		    jne NotTeleportDown
				
				    ; Play teleport sound
 00000D31  60			    pushad                  ; Save all registers
				    INVOKE PlaySoundFile, ADDR teleportSoundFile, teleportSoundFreq, teleportSoundDur
 00000D32  FF 35 0000344D R *	    push   teleportSoundDur
 00000D38  FF 35 00003449 R *	    push   teleportSoundFreq
 00000D3E  68 0000341D R   *	    push   OFFSET teleportSoundFile
 00000D43  E8 FFFFF2B8	   *	    call   PlaySoundFile
 00000D48  61			    popad                   ; Restore all registers
				
				    ; Teleport to the other pad
 00000D49  3B 1D 00002F3B R	    cmp ebx, teleport1Pos
 00000D4F  75 08		    jne CheckTeleport2Down
				
				    ; Teleporting from pad 1 to pad 2
 00000D51  8B 1D 00002F3F R	    mov ebx, teleport2Pos
 00000D57  EB 06		    jmp NotTeleportDown
				
 00000D59			CheckTeleport2Down:
				    ; Teleporting from pad 2 to pad 1
 00000D59  8B 1D 00002F3B R	    mov ebx, teleport1Pos
				
 00000D5F			NotTeleportDown:
				    ; Valid move, update pacman position
 00000D5F  E8 00000143		    call MovePacman
 00000D64  89 1D 00000E8C R	    mov pacmanPos, ebx
 00000D6A  E9 000000F4		    jmp ContinueGame
				
 00000D6F			ProcessMoveLeft:
				    ; Calculate new position (current - 1)
 00000D6F  8B 1D 00000E8C R	    mov ebx, pacmanPos
 00000D75  4B			    dec ebx
				    ; Check if valid move
 00000D76  0F B6 83		    movzx eax, grid[ebx]
	   00000644 R
 00000D7D  3A 05 00000636 R	    cmp al, wallChar
 00000D83  0F 84 00000085	    je CheckLevel2Wall
				    ; Check for ghost collision
 00000D89  3A 05 0000063A R	    cmp al, ghostChar
 00000D8F  0F 84 000000C7	    je GhostCollision
				
				    ; Check for fruit - explicit fruit check
 00000D95  3A 05 00000642 R	    cmp al, fruitChar
 00000D9B  75 25		    jne CheckTeleportLeft
				
				    ; Collect fruit
 00000D9D  A1 00002E6A R	    mov eax, fruitPoints    ; Move fruitPoints to register first
 00000DA2  01 05 00000E48 R	    add score, eax          ; Then add from register to score
 00000DA8  C6 05 00002E65 R	    mov fruitActive, 0      ; Deactivate fruit
	   00
 00000DAF  C6 05 00000E4D R	    mov powerUpActive, 1    ; Activate power-up
	   01
 00000DB6  C7 05 00000E4E R	    mov powerUpTimer, 0     ; Reset power-up timer
	   00000000
 00000DC0  EB 3F		    jmp NotTeleportLeft
				
 00000DC2			CheckTeleportLeft:
				    ; Check for teleport pad in level 3
 00000DC2  80 3D 0000062D R	    cmp currentLevel, 3
	   03
 00000DC9  75 36		    jne NotTeleportLeft
 00000DCB  3A 05 00002F39 R	    cmp al, teleportPadChar
 00000DD1  75 2E		    jne NotTeleportLeft
				
				    ; Play teleport sound
 00000DD3  60			    pushad                  ; Save all registers
				    INVOKE PlaySoundFile, ADDR teleportSoundFile, teleportSoundFreq, teleportSoundDur
 00000DD4  FF 35 0000344D R *	    push   teleportSoundDur
 00000DDA  FF 35 00003449 R *	    push   teleportSoundFreq
 00000DE0  68 0000341D R   *	    push   OFFSET teleportSoundFile
 00000DE5  E8 FFFFF216	   *	    call   PlaySoundFile
 00000DEA  61			    popad                   ; Restore all registers
				
				    ; Teleport to the other pad
 00000DEB  3B 1D 00002F3B R	    cmp ebx, teleport1Pos
 00000DF1  75 08		    jne CheckTeleport2Left
				
				    ; Teleporting from pad 1 to pad 2
 00000DF3  8B 1D 00002F3F R	    mov ebx, teleport2Pos
 00000DF9  EB 06		    jmp NotTeleportLeft
				
 00000DFB			CheckTeleport2Left:
				    ; Teleporting from pad 2 to pad 1
 00000DFB  8B 1D 00002F3B R	    mov ebx, teleport1Pos
				
 00000E01			NotTeleportLeft:
				    ; Valid move, update pacman position
 00000E01  E8 000000A1		    call MovePacman
 00000E06  89 1D 00000E8C R	    mov pacmanPos, ebx
 00000E0C  EB 55		    jmp ContinueGame
				
 00000E0E			CheckLevel2Wall:
				    ; In all levels, hitting a wall costs a life
 00000E0E  FF 0D 00000E44 R	    dec lives
				
				    ; Check if game over
 00000E14  83 3D 00000E44 R	    cmp lives, 0
	   00
 00000E1B  74 7F		    je CheckGameOver
				
				    ; Not game over, reset Pacman position
				    ; Clear old position
 00000E1D  8B 35 00000E8C R	    mov esi, pacmanPos
 00000E23  A0 0000063E R	    mov al, emptyChar
 00000E28  88 86 00000644 R	    mov grid[esi], al
				
				    ; Move Pacman back to start
 00000E2E  B8 0000000F		    mov eax, 15        ; Middle row
 00000E33  F7 25 0000062E R	    mul gridWidth
 00000E39  83 C0 20		    add eax, 32        ; Middle column
 00000E3C  A3 00000E8C R	    mov pacmanPos, eax
 00000E41  8B F0		    mov esi, eax
 00000E43  A0 00000638 R	    mov al, pacmanChar
 00000E48  88 86 00000644 R	    mov grid[esi], al
				
				    ; Reset last direction when hit by wall
 00000E4E  C7 05 00002E59 R	    mov lastDirection, 0
	   00000000
				
 00000E58  EB 09		    jmp ContinueGame
				
 00000E5A			SkipMovement:
 00000E5A  EB 07		    jmp ContinueGame
				
 00000E5C			GhostCollision:
 00000E5C  E8 00000C1A		    call HandleGhostCollision
 00000E61  EB 00		    jmp ContinueGame
				
 00000E63			ContinueGame:
				    ; Move ghosts after player moves
 00000E63  E8 00000227		    call MoveGhosts
				
				    ; Check if game is still running
 00000E68  80 3D 00000EA4 R	    cmp gameRunning, 0
	   00
 00000E6F  74 2B		    je CheckGameOver
				
				    ; Redraw grid after valid move
 00000E71  E8 000004E7		    call DrawGrid
				
				    ; Display instructions again
 00000E76  B2 00		    mov dl, 0
 00000E78  B6 22		    mov dh, 34
 00000E7A  E8 00000000 E	    call Gotoxy
 00000E7F  BA 00000ECE R	    mov edx, OFFSET msgQuit
 00000E84  E8 00000000 E	    call WriteString
				
				    ; Back to waiting for input
 00000E89  E9 FFFFFBD3		    jmp GameLoopStart
				
 00000E8E			QuitGame:
 00000E8E  C6 05 00000EA4 R	    mov gameRunning, 0
	   00
 00000E95  C6 05 00000EA9 R	    mov gameEndReason, 3  ; 3 = quit by player
	   03
				
 00000E9C			CheckGameOver:
 00000E9C  E8 00000D44		    call GameOver
				
 00000EA1			GameLoopEnd:
				    ; Wait for a keypress before exiting
 00000EA1  E8 00000000 E	    call ReadChar
				
 00000EA6  C3			    ret
 00000EA7			GameLoop ENDP
				
				; Moves the pacman to a new position
 00000EA7			MovePacman PROC
				    ; Update the grid:
				    ; 1. Check if moving to a dot
 00000EA7  0F B6 83		    movzx eax, grid[ebx]
	   00000644 R
 00000EAE  3A 05 00000640 R	    cmp al, dotChar
 00000EB4  75 3C		    jne NotDot
 00000EB6  83 05 00000E48 R	    add score, 2       ; Increase score by 2 for eating a dot
	   02
				
				    ; Play pellet sound
 00000EBD  53			    push ebx           ; Save position
				    INVOKE PlaySoundFile, ADDR pelletSoundFile, pelletSoundFreq, pelletSoundDur
 00000EBE  FF 35 00003445 R *	    push   pelletSoundDur
 00000EC4  FF 35 00003441 R *	    push   pelletSoundFreq
 00000ECA  68 00003412 R   *	    push   OFFSET pelletSoundFile
 00000ECF  E8 FFFFF12C	   *	    call   PlaySoundFile
 00000ED4  5B			    pop ebx            ; Restore position
				
				    ; Decrement remaining dots counter
 00000ED5  FF 0D 00000EA5 R	    dec remainingDots
				
				    ; Check if all dots are collected
 00000EDB  83 3D 00000EA5 R	    cmp remainingDots, 0
	   00
 00000EE2  75 0E		    jne NotDot
				
				    ; All dots collected, end the game
 00000EE4  C6 05 00000EA4 R	    mov gameRunning, 0
	   00
 00000EEB  C6 05 00000EA9 R	    mov gameEndReason, 2  ; 2 = all pellets collected
	   02
 00000EF2			NotDot:
				    ; Check if moving to a fruit
 00000EF2  3A 05 00000642 R	    cmp al, fruitChar
 00000EF8  75 1F		    jne NotFruit
 00000EFA  83 05 00000E48 R	    add score, 20      ; Increase score by 20 for eating fruit
	   14
 00000F01  C6 05 00002E65 R	    mov fruitActive, 0 ; Deactivate fruit
	   00
 00000F08  C6 05 00000E4D R	    mov powerUpActive, 1 ; Activate power-up
	   01
 00000F0F  C7 05 00000E4E R	    mov powerUpTimer, 0  ; Reset power-up timer
	   00000000
 00000F19			NotFruit:
				    ; Check if moving to a ghost
 00000F19  3A 05 0000063A R	    cmp al, ghostChar
 00000F1F  74 3E		    je CheckGhostCollision
 00000F21  3A 05 0000063C R	    cmp al, vulnerableGhostChar
 00000F27  74 45		    je KillGhost
				
				    ; Check if moving to a teleport pad (Level 3 only)
 00000F29  80 3D 0000062D R	    cmp currentLevel, 3
	   03
 00000F30  0F 85 0000013C	    jne ContinueMove
 00000F36  3A 05 00002F39 R	    cmp al, teleportPadChar
 00000F3C  0F 85 00000130	    jne ContinueMove
				
				    ; Teleport detected, play sound
 00000F42  53			    push ebx           ; Save registers
				    INVOKE PlaySoundFile, ADDR teleportSoundFile, teleportSoundFreq, teleportSoundDur
 00000F43  FF 35 0000344D R *	    push   teleportSoundDur
 00000F49  FF 35 00003449 R *	    push   teleportSoundFreq
 00000F4F  68 0000341D R   *	    push   OFFSET teleportSoundFile
 00000F54  E8 FFFFF0A7	   *	    call   PlaySoundFile
 00000F59  5B			    pop ebx            ; Restore registers
				
 00000F5A  E9 00000113		    jmp ContinueMove
				
 00000F5F			CheckGhostCollision:
				    ; If power-up is active, treat as vulnerable ghost
 00000F5F  80 3D 00000E4D R	    cmp powerUpActive, 1
	   01
 00000F66  74 06		    je KillGhost
				    ; Otherwise, handle as normal ghost collision
 00000F68  E8 00000B0E		    call HandleGhostCollision
 00000F6D  C3			    ret
				
 00000F6E			KillGhost:
				    ; Add points for killing ghost
 00000F6E  83 05 00000E48 R	    add score, 20
	   14
				
				    ; Find which ghost was killed and reset its position
 00000F75  3B 1D 00000E90 R	    cmp ebx, ghost1Pos
 00000F7B  0F 84 0000008A	    je ResetGhost1
 00000F81  3B 1D 00000E94 R	    cmp ebx, ghost2Pos
 00000F87  0F 84 00000093	    je ResetGhost2
 00000F8D  3B 1D 00000E98 R	    cmp ebx, ghost3Pos
 00000F93  0F 84 0000009C	    je ResetGhost3
 00000F99  3B 1D 00000E9C R	    cmp ebx, ghost4Pos
 00000F9F  0F 84 000000A5	    je ResetGhost4
				
				    ; Check if Level 2 and this is Ghost 5
 00000FA5  80 3D 0000062D R	    cmp currentLevel, 2
	   02
 00000FAC  75 11		    jne CheckLevel3Ghosts
 00000FAE  3B 1D 00000EA0 R	    cmp ebx, ghost5Pos
 00000FB4  0F 84 000000A5	    je ResetGhost5
 00000FBA  E9 000000B3		    jmp ContinueMove
				
 00000FBF			CheckLevel3Ghosts:
				    ; Check if Level 3 and this is Ghost 6 or 7
 00000FBF  80 3D 0000062D R	    cmp currentLevel, 3
	   03
 00000FC6  0F 85 000000A6	    jne ContinueMove
				
				    ; Check for Ghost 6
 00000FCC  3B 1D 00002F43 R	    cmp ebx, ghost6Pos
 00000FD2  74 0D		    je ResetGhost6
				
				    ; Check for Ghost 7
 00000FD4  3B 1D 00002F47 R	    cmp ebx, ghost7Pos
 00000FDA  74 1A		    je ResetGhost7
 00000FDC  E9 00000091		    jmp ContinueMove
				
 00000FE1			ResetGhost6:
 00000FE1  B8 00000008		    mov eax, 8         ; Reset to initial position (top middle)
 00000FE6  F7 25 0000062E R	    mul gridWidth
 00000FEC  83 C0 20		    add eax, 32
 00000FEF  A3 00002F43 R	    mov ghost6Pos, eax
 00000FF4  EB 7C		    jmp ContinueMove
				
 00000FF6			ResetGhost7:
 00000FF6  B8 00000017		    mov eax, 23        ; Reset to initial position (bottom middle)
 00000FFB  F7 25 0000062E R	    mul gridWidth
 00001001  83 C0 20		    add eax, 32
 00001004  A3 00002F47 R	    mov ghost7Pos, eax
 00001009  EB 67		    jmp ContinueMove
				
 0000100B			ResetGhost1:
 0000100B  B8 00000003		    mov eax, 3         ; Reset to initial position (top left)
 00001010  F7 25 0000062E R	    mul gridWidth
 00001016  83 C0 03		    add eax, 3
 00001019  A3 00000E90 R	    mov ghost1Pos, eax
 0000101E  EB 52		    jmp ContinueMove
				
 00001020			ResetGhost2:
 00001020  B8 00000003		    mov eax, 3         ; Reset to initial position (top right)
 00001025  F7 25 0000062E R	    mul gridWidth
 0000102B  83 C0 3C		    add eax, 60
 0000102E  A3 00000E94 R	    mov ghost2Pos, eax
 00001033  EB 3D		    jmp ContinueMove
				
 00001035			ResetGhost3:
 00001035  B8 0000001C		    mov eax, 28        ; Reset to initial position (bottom left)
 0000103A  F7 25 0000062E R	    mul gridWidth
 00001040  83 C0 03		    add eax, 3
 00001043  A3 00000E98 R	    mov ghost3Pos, eax
 00001048  EB 28		    jmp ContinueMove
				
 0000104A			ResetGhost4:
 0000104A  B8 0000001C		    mov eax, 28        ; Reset to initial position (bottom right)
 0000104F  F7 25 0000062E R	    mul gridWidth
 00001055  83 C0 3C		    add eax, 60
 00001058  A3 00000E9C R	    mov ghost4Pos, eax
 0000105D  EB 13		    jmp ContinueMove
				
 0000105F			ResetGhost5:
 0000105F  B8 0000000F		    mov eax, 15        ; Reset to initial position (middle left)
 00001064  F7 25 0000062E R	    mul gridWidth
 0000106A  83 C0 0F		    add eax, 15
 0000106D  A3 00000EA0 R	    mov ghost5Pos, eax
				
 00001072			ContinueMove:
				    ; 2. Clear old position
 00001072  8B 35 00000E8C R	    mov esi, pacmanPos
 00001078  A0 0000063E R	    mov al, emptyChar
 0000107D  88 86 00000644 R	    mov grid[esi], al
				
				    ; 3. Set new position
 00001083  A0 00000638 R	    mov al, pacmanChar
 00001088  88 83 00000644 R	    mov grid[ebx], al
				
 0000108E  C3			    ret
 0000108F			MovePacman ENDP
				
				; Move ghosts toward Pacman
 0000108F			MoveGhosts PROC
				    ; Before moving ghosts, update their appearance based on power-up state
 0000108F  8B 35 00000E90 R	    mov esi, ghost1Pos
 00001095  E8 0000014F		    call UpdateGhostAppearance
 0000109A  8B 35 00000E94 R	    mov esi, ghost2Pos
 000010A0  E8 00000144		    call UpdateGhostAppearance
 000010A5  8B 35 00000E98 R	    mov esi, ghost3Pos
 000010AB  E8 00000139		    call UpdateGhostAppearance
 000010B0  8B 35 00000E9C R	    mov esi, ghost4Pos
 000010B6  E8 0000012E		    call UpdateGhostAppearance
				
				    ; Update Ghost 5 appearance if in Level 2
 000010BB  80 3D 0000062D R	    cmp currentLevel, 2
	   02
 000010C2  75 0D		    jne CheckLevel3GhostAppearance
 000010C4  8B 35 00000EA0 R	    mov esi, ghost5Pos
 000010CA  E8 0000011A		    call UpdateGhostAppearance
 000010CF  EB 1F		    jmp SkipExtraGhostAppearance
				
 000010D1			CheckLevel3GhostAppearance:
				    ; Update Ghosts 6 and 7 appearance if in Level 3
 000010D1  80 3D 0000062D R	    cmp currentLevel, 3
	   03
 000010D8  75 16		    jne SkipExtraGhostAppearance
 000010DA  8B 35 00002F43 R	    mov esi, ghost6Pos
 000010E0  E8 00000104		    call UpdateGhostAppearance
 000010E5  8B 35 00002F47 R	    mov esi, ghost7Pos
 000010EB  E8 000000F9		    call UpdateGhostAppearance
				
 000010F0			SkipExtraGhostAppearance:
				
				    ; Move Ghost 1
 000010F0  8B 1D 00000E90 R	    mov ebx, ghost1Pos
 000010F6  E8 00000112		    call MoveGhostTowardPacman
 000010FB  89 1D 00000E90 R	    mov ghost1Pos, ebx
				
				    ; Move Ghost 2
 00001101  8B 1D 00000E94 R	    mov ebx, ghost2Pos
 00001107  E8 00000101		    call MoveGhostTowardPacman
 0000110C  89 1D 00000E94 R	    mov ghost2Pos, ebx
				
				    ; Move Ghost 3
 00001112  8B 1D 00000E98 R	    mov ebx, ghost3Pos
 00001118  E8 000000F0		    call MoveGhostTowardPacman
 0000111D  89 1D 00000E98 R	    mov ghost3Pos, ebx
				
				    ; Move Ghost 4
 00001123  8B 1D 00000E9C R	    mov ebx, ghost4Pos
 00001129  E8 000000DF		    call MoveGhostTowardPacman
 0000112E  89 1D 00000E9C R	    mov ghost4Pos, ebx
				
				    ; Move Ghost 5 if in Level 2
 00001134  80 3D 0000062D R	    cmp currentLevel, 2
	   02
 0000113B  75 16		    jne CheckLevel3Ghosts
 0000113D  8B 1D 00000EA0 R	    mov ebx, ghost5Pos
 00001143  E8 000000C5		    call MoveGhostTowardPacman
 00001148  89 1D 00000EA0 R	    mov ghost5Pos, ebx
 0000114E  E9 00000095		    jmp SkipExtraGhostMovement
				
 00001153			CheckLevel3Ghosts:
				    ; Move Ghosts 6 and 7 if in Level 3
 00001153  80 3D 0000062D R	    cmp currentLevel, 3
	   03
 0000115A  0F 85 00000088	    jne SkipExtraGhostMovement
				
				    ; Move Ghost 6 (cyan)
 00001160  8B 1D 00002F43 R	    mov ebx, ghost6Pos
 00001166  E8 000000A2		    call MoveGhostTowardPacman
 0000116B  89 1D 00002F43 R	    mov ghost6Pos, ebx
				
				    ; Move Ghost 7 (magenta)
 00001171  8B 1D 00002F47 R	    mov ebx, ghost7Pos
 00001177  E8 00000091		    call MoveGhostTowardPacman
 0000117C  89 1D 00002F47 R	    mov ghost7Pos, ebx
				
				    ; For Level 3, move ghosts a second time (2x speed)
				    ; Move Ghost 1 again
 00001182  8B 1D 00000E90 R	    mov ebx, ghost1Pos
 00001188  E8 00000080		    call MoveGhostTowardPacman
 0000118D  89 1D 00000E90 R	    mov ghost1Pos, ebx
				
				    ; Move Ghost 2 again
 00001193  8B 1D 00000E94 R	    mov ebx, ghost2Pos
 00001199  E8 0000006F		    call MoveGhostTowardPacman
 0000119E  89 1D 00000E94 R	    mov ghost2Pos, ebx
				
				    ; Move Ghost 3 again
 000011A4  8B 1D 00000E98 R	    mov ebx, ghost3Pos
 000011AA  E8 0000005E		    call MoveGhostTowardPacman
 000011AF  89 1D 00000E98 R	    mov ghost3Pos, ebx
				
				    ; Move Ghost 4 again
 000011B5  8B 1D 00000E9C R	    mov ebx, ghost4Pos
 000011BB  E8 0000004D		    call MoveGhostTowardPacman
 000011C0  89 1D 00000E9C R	    mov ghost4Pos, ebx
				
				    ; Move Ghost 6 again (cyan)
 000011C6  8B 1D 00002F43 R	    mov ebx, ghost6Pos
 000011CC  E8 0000003C		    call MoveGhostTowardPacman
 000011D1  89 1D 00002F43 R	    mov ghost6Pos, ebx
				
				    ; Move Ghost 7 again (magenta)
 000011D7  8B 1D 00002F47 R	    mov ebx, ghost7Pos
 000011DD  E8 0000002B		    call MoveGhostTowardPacman
 000011E2  89 1D 00002F47 R	    mov ghost7Pos, ebx
				
 000011E8			SkipExtraGhostMovement:
				
 000011E8  C3			    ret
 000011E9			MoveGhosts ENDP
				
				; Updates ghost appearance based on power-up state
				; Input: esi = ghost position
 000011E9			UpdateGhostAppearance PROC
 000011E9  60			    pushad
				
				    ; Check if power-up is active
 000011EA  80 3D 00000E4D R	    cmp powerUpActive, 1
	   01
 000011F1  75 0D		    jne NotVulnerable
				
				    ; Make ghost vulnerable (lowercase 'p')
 000011F3  A0 0000063C R	    mov al, vulnerableGhostChar
 000011F8  88 86 00000644 R	    mov grid[esi], al
 000011FE  EB 0B		    jmp DoneUpdateAppearance
				
 00001200			NotVulnerable:
				    ; Make ghost normal (uppercase 'P')
 00001200  A0 0000063A R	    mov al, ghostChar
 00001205  88 86 00000644 R	    mov grid[esi], al
				
 0000120B			DoneUpdateAppearance:
 0000120B  61			    popad
 0000120C  C3			    ret
 0000120D			UpdateGhostAppearance ENDP
				
				; Moves a single ghost toward Pacman
 0000120D			MoveGhostTowardPacman PROC
				    ; Save original position
 0000120D  8B F3		    mov esi, ebx
				
				    ; Ensure ghost position is valid
 0000120F  83 FE 00		    cmp esi, 0
 00001212  0F 8C 000000B5	    jl GhostPositionInvalid
 00001218  81 FE 000007FF	    cmp esi, 2047     ; 2048-1 = max index
 0000121E  0F 8F 000000A9	    jg GhostPositionInvalid
				
				    ; Save what's currently under the ghost
 00001224  0F B6 05		    movzx eax, lastCellContent
	   00000E4C R
 0000122B  88 86 00000644 R	    mov grid[esi], al  ; Restore the cell content before moving
				
				    ; Determine ghost row and column
 00001231  8B C3		    mov eax, ebx
 00001233  33 D2		    xor edx, edx
 00001235  F7 35 0000062E R	    div gridWidth
 0000123B  A3 00002319 R	    mov tempRow, eax   ; Save ghost row
 00001240  89 15 0000231D R	    mov tempCol, edx   ; Save ghost column
				
				    ; Determine pacman row and column
 00001246  A1 00000E8C R	    mov eax, pacmanPos
 0000124B  33 D2		    xor edx, edx
 0000124D  F7 35 0000062E R	    div gridWidth      ; eax = pacman row, edx = pacman column
				
				    ; Try to move toward Pacman
 00001253  B9 00000004		    mov ecx, 4
 00001258  E8 00000000 E	    call RandomRange   ; 25% chance of random movement
 0000125D  83 F8 03		    cmp eax, 3
 00001260  74 50		    je RandomMove
				
				    ; Compare rows
 00001262  3B 05 00002319 R	    cmp eax, tempRow
 00001268  7F 2B		    jg TryMoveDown
 0000126A  7C 0C		    jl TryMoveUp
				
				    ; Compare columns
 0000126C  3B 15 0000231D R	    cmp edx, tempCol
 00001272  7F 15		    jg TryMoveRight
 00001274  7C 30		    jl TryMoveLeft
 00001276  EB 55		    jmp NoMove
				
 00001278			TryMoveUp:
 00001278  8B DE		    mov ebx, esi
 0000127A  2B 1D 0000062E R	    sub ebx, gridWidth
 00001280  E8 000000B0		    call CheckGhostMove
 00001285  72 1F		    jc TryMoveLeft
 00001287  EB 48		    jmp UpdateGhost
				
 00001289			TryMoveRight:
 00001289  8B DE		    mov ebx, esi
 0000128B  43			    inc ebx
 0000128C  E8 000000A4		    call CheckGhostMove
 00001291  72 E5		    jc TryMoveUp
 00001293  EB 3C		    jmp UpdateGhost
				
 00001295			TryMoveDown:
 00001295  8B DE		    mov ebx, esi
 00001297  03 1D 0000062E R	    add ebx, gridWidth
 0000129D  E8 00000093		    call CheckGhostMove
 000012A2  72 E5		    jc TryMoveRight
 000012A4  EB 2B		    jmp UpdateGhost
				
 000012A6			TryMoveLeft:
 000012A6  8B DE		    mov ebx, esi
 000012A8  4B			    dec ebx
 000012A9  E8 00000087		    call CheckGhostMove
 000012AE  72 E5		    jc TryMoveDown
 000012B0  EB 1F		    jmp UpdateGhost
				
 000012B2			RandomMove:
 000012B2  B9 00000004		    mov ecx, 4
 000012B7  E8 00000000 E	    call RandomRange
 000012BC  83 F8 00		    cmp eax, 0
 000012BF  74 B7		    je TryMoveUp
 000012C1  83 F8 01		    cmp eax, 1
 000012C4  74 C3		    je TryMoveRight
 000012C6  83 F8 02		    cmp eax, 2
 000012C9  74 CA		    je TryMoveDown
 000012CB  EB D9		    jmp TryMoveLeft
				
 000012CD			NoMove:
 000012CD			GhostPositionInvalid:
 000012CD  8B DE		    mov ebx, esi      ; Stay in current position
 000012CF  EB 63		    jmp GhostMoveDone
				
 000012D1			UpdateGhost:
				    ; Check if proposed position is valid
 000012D1  83 FB 00		    cmp ebx, 0
 000012D4  7C F7		    jl NoMove
 000012D6  81 FB 000007FF	    cmp ebx, 2047     ; 2048-1 = max index
 000012DC  7F EF		    jg NoMove
				
				    ; Check for collision with Pacman
 000012DE  3B 1D 00000E8C R	    cmp ebx, pacmanPos
 000012E4  75 0B		    jne NoCollision
				
				    ; Handle collision - don't move ghost to Pacman's position
				    ; instead, call collision handler and stay in place
 000012E6  53			    push ebx          ; Save ghost's intended position
 000012E7  E8 0000078F		    call HandleGhostCollision
 000012EC  5B			    pop ebx
 000012ED  8B DE		    mov ebx, esi      ; Stay in current position
 000012EF  EB 43		    jmp GhostMoveDone
				
 000012F1			NoCollision:
				    ; Check if position is valid (not a wall or another ghost)
 000012F1  0F B6 83		    movzx eax, grid[ebx]
	   00000644 R
 000012F8  3A 05 00000636 R	    cmp al, wallChar
 000012FE  74 32		    je StayInPlace
 00001300  3A 05 0000063A R	    cmp al, ghostChar
 00001306  74 2A		    je StayInPlace
 00001308  3A 05 0000063C R	    cmp al, vulnerableGhostChar
 0000130E  74 22		    je StayInPlace
				
				    ; Save what's under the ghost's new position
 00001310  A2 00000E4C R	    mov lastCellContent, al
				
				    ; Place ghost in new position
 00001315  80 3D 00000E4D R	    cmp powerUpActive, 1
	   01
 0000131C  75 07		    jne NormalGhost
 0000131E  A0 0000063C R	    mov al, vulnerableGhostChar
 00001323  EB 05		    jmp PlaceGhost
 00001325			NormalGhost:
 00001325  A0 0000063A R	    mov al, ghostChar
 0000132A			PlaceGhost:
 0000132A  88 83 00000644 R	    mov grid[ebx], al
 00001330  EB 02		    jmp GhostMoveDone
				
 00001332			StayInPlace:
				    ; Can't move to new position, stay in current position
 00001332  8B DE		    mov ebx, esi
				
 00001334			GhostMoveDone:
 00001334  C3			    ret
 00001335			MoveGhostTowardPacman ENDP
				
				; Checks if a ghost can move to the specified position
				; Input: ebx = target position
				; Output: Carry flag set if move is invalid
 00001335			CheckGhostMove PROC
				    ; Check grid boundaries
 00001335  83 FB 00		    cmp ebx, 0
 00001338  7C 21		    jl InvalidMove
 0000133A  81 FB 000007FF	    cmp ebx, 2047     ; 2048 - 1
 00001340  7F 19		    jg InvalidMove
				
				    ; Check for wall or other ghost
 00001342  0F B6 83		    movzx eax, grid[ebx]
	   00000644 R
 00001349  3A 05 00000636 R	    cmp al, wallChar
 0000134F  74 0A		    je InvalidMove
 00001351  3A 05 0000063A R	    cmp al, ghostChar
 00001357  74 02		    je InvalidMove
				
 00001359  F8			    clc               ; Clear carry flag (move is valid)
 0000135A  C3			    ret
				
 0000135B			InvalidMove:
 0000135B  F9			    stc               ; Set carry flag (move is invalid)
 0000135C  C3			    ret
 0000135D			CheckGhostMove ENDP
				
				; Draws the grid on the screen
 0000135D			DrawGrid PROC
 0000135D  60			    pushad
				
				    ; Set color to black text on white background
 0000135E  B8 000000F0		    mov eax, black + (white * 16)    ; black text (0) on white background (15 * 16)
 00001363  E8 00000000 E	    call SetTextColor
				
				    ; Clear the screen
 00001368  E8 00000000 E	    call Clrscr
				
				    ; Display player name
 0000136D  B2 00		    mov dl, 0
 0000136F  B6 00		    mov dh, 0
 00001371  E8 00000000 E	    call Gotoxy
 00001376  BA 00000624 R	    mov edx, OFFSET nameMsg
 0000137B  E8 00000000 E	    call WriteString
 00001380  BA 00000604 R	    mov edx, OFFSET playerName
 00001385  E8 00000000 E	    call WriteString
				
				    ; Display score and lives
 0000138A  B2 1E		    mov dl, 30
 0000138C  B6 00		    mov dh, 0
 0000138E  E8 00000000 E	    call Gotoxy
 00001393  BA 00000E56 R	    mov edx, OFFSET scoreMsg
 00001398  E8 00000000 E	    call WriteString
 0000139D  A1 00000E48 R	    mov eax, score
 000013A2  E8 00000000 E	    call WriteDec
				
				    ; Display lives
 000013A7  B2 32		    mov dl, 50
 000013A9  B6 00		    mov dh, 0
 000013AB  E8 00000000 E	    call Gotoxy
 000013B0  BA 00000E5E R	    mov edx, OFFSET livesMsg
 000013B5  E8 00000000 E	    call WriteString
 000013BA  A1 00000E44 R	    mov eax, lives
 000013BF  E8 00000000 E	    call WriteDec
				
				    ; Move cursor to start of grid (row 1)
 000013C4  B2 00		    mov dl, 0
 000013C6  B6 01		    mov dh, 1
 000013C8  E8 00000000 E	    call Gotoxy
				
				    ; Draw the grid
 000013CD  8B 0D 00000632 R	    mov ecx, gridHeight
 000013D3  33 FF		    xor edi, edi
 000013D5  B6 01		    mov dh, 1         ; Start at row 1 to leave room for score
				
 000013D7			DrawRowLoopStart:
 000013D7  51			    push ecx
 000013D8  B2 00		    mov dl, 0
 000013DA  E8 00000000 E	    call Gotoxy
				
 000013DF  8B 0D 0000062E R	    mov ecx, gridWidth
 000013E5			DrawColLoopStart:
 000013E5  0F B6 87		    movzx eax, grid[edi]
	   00000644 R
				
				    ; Special handling for walls based on level
 000013EC  3A 05 00000636 R	    cmp al, wallChar
 000013F2  0F 85 0000008D	    jne CheckFruit
				
				    ; Determine which level we're in and use appropriate wall color
 000013F8  0F B6 1D		    movzx ebx, currentLevel    ; Fix size mismatch by using movzx
	   0000062D R
 000013FF  83 FB 01		    cmp ebx, 1
 00001402  74 0F		    je UseLevel1WallColor
 00001404  83 FB 02		    cmp ebx, 2
 00001407  74 30		    je UseLevel2WallColor
 00001409  83 FB 03		    cmp ebx, 3
 0000140C  74 51		    je UseLevel3WallColor
 0000140E  E9 0000020B		    jmp StandardDraw           ; Default case
				
 00001413			UseLevel1WallColor:
				    ; For Level 1, walls have blue background
 00001413  50			    push eax
 00001414  66| A1		    mov ax, wallColorLevel1    ; Use ax for 16-bit color value
	   00002E7A R
 0000141A  0F B7 C0		    movzx eax, ax             ; Zero-extend to 32 bits for SetTextColor
 0000141D  E8 00000000 E	    call SetTextColor
 00001422  58			    pop eax
 00001423  E8 00000000 E	    call WriteChar
				
				    ; Reset color after drawing wall
 00001428  50			    push eax
 00001429  B8 000000F0		    mov eax, black + (white * 16)
 0000142E  E8 00000000 E	    call SetTextColor
 00001433  58			    pop eax
 00001434  E9 000001EA		    jmp ContinueDrawing
				
 00001439			UseLevel2WallColor:
				    ; For Level 2, walls have red background
 00001439  50			    push eax
 0000143A  66| A1		    mov ax, wallColorLevel2    ; Use ax for 16-bit color value
	   00002E7C R
 00001440  0F B7 C0		    movzx eax, ax             ; Zero-extend to 32 bits for SetTextColor
 00001443  E8 00000000 E	    call SetTextColor
 00001448  58			    pop eax
 00001449  E8 00000000 E	    call WriteChar
				
				    ; Reset color after drawing wall
 0000144E  50			    push eax
 0000144F  B8 000000F0		    mov eax, black + (white * 16)
 00001454  E8 00000000 E	    call SetTextColor
 00001459  58			    pop eax
 0000145A  E9 000001C4		    jmp ContinueDrawing
				
 0000145F			UseLevel3WallColor:
				    ; For Level 3, walls have green background
 0000145F  50			    push eax
 00001460  66| A1		    mov ax, wallColorLevel3    ; Use ax for 16-bit color value
	   00002E7E R
 00001466  0F B7 C0		    movzx eax, ax             ; Zero-extend to 32 bits for SetTextColor
 00001469  E8 00000000 E	    call SetTextColor
 0000146E  58			    pop eax
 0000146F  E8 00000000 E	    call WriteChar
				
				    ; Reset color after drawing wall
 00001474  50			    push eax
 00001475  B8 000000F0		    mov eax, black + (white * 16)
 0000147A  E8 00000000 E	    call SetTextColor
 0000147F  58			    pop eax
 00001480  E9 0000019E		    jmp ContinueDrawing
				
 00001485			CheckFruit:
				    ; Check if it's a fruit - always use bright yellow for fruit to ensure visibility
 00001485  3A 05 00000642 R	    cmp al, fruitChar
 0000148B  75 22		    jne NotFruit
				
				    ; For fruit, use bright yellow on blue background
 0000148D  50			    push eax
 0000148E  B8 00000026		    mov eax, (yellow + 8) + (blue * 16)   ; Bright yellow on blue background
 00001493  E8 00000000 E	    call SetTextColor
 00001498  58			    pop eax
 00001499  E8 00000000 E	    call WriteChar
				
				    ; Reset color after drawing fruit
 0000149E  50			    push eax
 0000149F  B8 000000F0		    mov eax, black + (white * 16)
 000014A4  E8 00000000 E	    call SetTextColor
 000014A9  58			    pop eax
 000014AA  E9 00000174		    jmp ContinueDrawing
				
 000014AF			NotFruit:
				    ; Check if it's a teleport pad (Level 3 only)
 000014AF  80 3D 0000062D R	    cmp currentLevel, 3
	   03
 000014B6  75 2A		    jne CheckIfGhost
 000014B8  3A 05 00002F39 R	    cmp al, teleportPadChar
 000014BE  75 22		    jne CheckIfGhost
				
				    ; For teleport pads, use bright cyan on black background
 000014C0  50			    push eax
 000014C1  B8 0000000B		    mov eax, (cyan + 8) + (black * 16)   ; Bright cyan on black background
 000014C6  E8 00000000 E	    call SetTextColor
 000014CB  58			    pop eax
 000014CC  E8 00000000 E	    call WriteChar
				
				    ; Reset color after drawing teleport pad
 000014D1  50			    push eax
 000014D2  B8 000000F0		    mov eax, black + (white * 16)
 000014D7  E8 00000000 E	    call SetTextColor
 000014DC  58			    pop eax
 000014DD  E9 00000141		    jmp ContinueDrawing
				
 000014E2			CheckIfGhost:
				    ; Check if it's a ghost
 000014E2  3A 05 0000063A R	    cmp al, ghostChar
 000014E8  0F 85 00000109	    jne NotGhost
				
				    ; Determine which ghost it is and use appropriate color
 000014EE  3B 3D 00000E90 R	    cmp edi, ghost1Pos
 000014F4  75 1A		    jne NotGhost1
				    ; Ghost 1 - Red
 000014F6  50			    push eax
 000014F7  66| A1		    mov ax, ghost1Color
	   00002F4F R
 000014FD  0F B7 C0		    movzx eax, ax
 00001500  E8 00000000 E	    call SetTextColor
 00001505  58			    pop eax
 00001506  E8 00000000 E	    call WriteChar
 0000150B  E9 000000D9		    jmp ResetGhostColor
				
 00001510			NotGhost1:
 00001510  3B 3D 00000E94 R	    cmp edi, ghost2Pos
 00001516  75 1A		    jne NotGhost2
				    ; Ghost 2 - Brown
 00001518  50			    push eax
 00001519  66| A1		    mov ax, ghost2Color
	   00002F51 R
 0000151F  0F B7 C0		    movzx eax, ax
 00001522  E8 00000000 E	    call SetTextColor
 00001527  58			    pop eax
 00001528  E8 00000000 E	    call WriteChar
 0000152D  E9 000000B7		    jmp ResetGhostColor
				
 00001532			NotGhost2:
 00001532  3B 3D 00000E98 R	    cmp edi, ghost3Pos
 00001538  75 1A		    jne NotGhost3
				    ; Ghost 3 - Green
 0000153A  50			    push eax
 0000153B  66| A1		    mov ax, ghost3Color
	   00002F53 R
 00001541  0F B7 C0		    movzx eax, ax
 00001544  E8 00000000 E	    call SetTextColor
 00001549  58			    pop eax
 0000154A  E8 00000000 E	    call WriteChar
 0000154F  E9 00000095		    jmp ResetGhostColor
				
 00001554			NotGhost3:
 00001554  3B 3D 00000E9C R	    cmp edi, ghost4Pos
 0000155A  75 17		    jne NotGhost4
				    ; Ghost 4 - Orange
 0000155C  50			    push eax
 0000155D  66| A1		    mov ax, ghost4Color
	   00002F55 R
 00001563  0F B7 C0		    movzx eax, ax
 00001566  E8 00000000 E	    call SetTextColor
 0000156B  58			    pop eax
 0000156C  E8 00000000 E	    call WriteChar
 00001571  EB 76		    jmp ResetGhostColor
				
 00001573			NotGhost4:
				    ; Check if Level 2 and this is Ghost 5
 00001573  80 3D 0000062D R	    cmp currentLevel, 2
	   02
 0000157A  75 1F		    jne CheckLevel3Ghosts
 0000157C  3B 3D 00000EA0 R	    cmp edi, ghost5Pos
 00001582  75 5E		    jne StandardGhost
				    ; Ghost 5 - Pink (Level 2 only)
 00001584  50			    push eax
 00001585  66| A1		    mov ax, ghost5Color
	   00002F57 R
 0000158B  0F B7 C0		    movzx eax, ax
 0000158E  E8 00000000 E	    call SetTextColor
 00001593  58			    pop eax
 00001594  E8 00000000 E	    call WriteChar
 00001599  EB 4E		    jmp ResetGhostColor
				
 0000159B			CheckLevel3Ghosts:
				    ; Check if Level 3 and this is Ghost 6 or 7
 0000159B  80 3D 0000062D R	    cmp currentLevel, 3
	   03
 000015A2  75 3E		    jne StandardGhost
				
				    ; Check for Ghost 6 (cyan)
 000015A4  3B 3D 00002F43 R	    cmp edi, ghost6Pos
 000015AA  75 17		    jne CheckGhost7
 000015AC  50			    push eax
 000015AD  66| A1		    mov ax, ghost6Color
	   00002F59 R
 000015B3  0F B7 C0		    movzx eax, ax
 000015B6  E8 00000000 E	    call SetTextColor
 000015BB  58			    pop eax
 000015BC  E8 00000000 E	    call WriteChar
 000015C1  EB 26		    jmp ResetGhostColor
				
 000015C3			CheckGhost7:
				    ; Check for Ghost 7 (magenta)
 000015C3  3B 3D 00002F47 R	    cmp edi, ghost7Pos
 000015C9  75 17		    jne StandardGhost
 000015CB  50			    push eax
 000015CC  66| A1		    mov ax, ghost7Color
	   00002F5B R
 000015D2  0F B7 C0		    movzx eax, ax
 000015D5  E8 00000000 E	    call SetTextColor
 000015DA  58			    pop eax
 000015DB  E8 00000000 E	    call WriteChar
 000015E0  EB 07		    jmp ResetGhostColor
				
 000015E2			StandardGhost:
				    ; Default ghost color (should not reach here normally)
 000015E2  E8 00000000 E	    call WriteChar
 000015E7  EB 3A		    jmp ContinueDrawing
				
 000015E9			ResetGhostColor:
				    ; Reset color after drawing ghost
 000015E9  50			    push eax
 000015EA  B8 000000F0		    mov eax, black + (white * 16)
 000015EF  E8 00000000 E	    call SetTextColor
 000015F4  58			    pop eax
 000015F5  EB 2C		    jmp ContinueDrawing
				
 000015F7			NotGhost:
				    ; Check if it's a vulnerable ghost
 000015F7  3A 05 0000063C R	    cmp al, vulnerableGhostChar
 000015FD  75 1F		    jne StandardDraw
				
				    ; For vulnerable ghost, use blue text
 000015FF  50			    push eax
 00001600  B8 000000F1		    mov eax, blue + (white * 16)
 00001605  E8 00000000 E	    call SetTextColor
 0000160A  58			    pop eax
 0000160B  E8 00000000 E	    call WriteChar
				
				    ; Reset color after drawing vulnerable ghost
 00001610  50			    push eax
 00001611  B8 000000F0		    mov eax, black + (white * 16)
 00001616  E8 00000000 E	    call SetTextColor
 0000161B  58			    pop eax
 0000161C  EB 05		    jmp ContinueDrawing
				
 0000161E			StandardDraw:
 0000161E  E8 00000000 E	    call WriteChar
				
 00001623			ContinueDrawing:
 00001623  47			    inc edi
 00001624  49			    dec ecx                    ; Manually decrement counter
 00001625  0F 85 FFFFFDBA	    jnz DrawColLoopStart       ; Use jnz instead of loop
				
 0000162B  FE C6		    inc dh
 0000162D  59			    pop ecx
 0000162E  49			    dec ecx                    ; Manually decrement counter
 0000162F  0F 85 FFFFFDA2	    jnz DrawRowLoopStart       ; Use jnz instead of loop
				
				    ; Display controls message
 00001635  B2 00		    mov dl, 0
 00001637  B6 22		    mov dh, 34
 00001639  E8 00000000 E	    call Gotoxy
 0000163E  BA 00000ECE R	    mov edx, OFFSET msgQuit
 00001643  E8 00000000 E	    call WriteString
				
 00001648  61			    popad
 00001649  C3			    ret
 0000164A			DrawGrid ENDP
				
				; Clean up resources before exiting
 0000164A			CleanupGame PROC
				    ; Show the cursor again before exiting
 0000164A  C7 05 00000E6A R	    mov cursorInfo.dwSize, 100
	   00000064
 00001654  C7 05 00000E6E R	    mov cursorInfo.bVisible, 1
	   00000001
				    INVOKE SetConsoleCursorInfo, consoleHandle, ADDR cursorInfo
 0000165E  68 00000E6A R   *	    push   OFFSET cursorInfo
 00001663  FF 35 00000E66 R *	    push   consoleHandle
 00001669  E8 00000000 E   *	    call   SetConsoleCursorInfo
 0000166E  C3			    ret
 0000166F			CleanupGame ENDP
				
				; Updates Level 2 specific features
 0000166F			UpdateLevel2Features PROC
				    ; Only process if we're in Level 2
 0000166F  80 3D 0000062D R	    cmp currentLevel, 2
	   02
 00001676  74 01		    je L2_ProcessFeatures
 00001678  C3			    ret                     ; Exit immediately if not in Level 2
				
 00001679			L2_ProcessFeatures:
				    ; Move walls immediately (no timer)
 00001679  E8 000000F1		    call SlideWalls
				
				    ; Update fruit timer - simplified
 0000167E  FF 05 00002E66 R	    inc fruitTimer
				
				    ; Force spawn fruit every 5 ticks (even faster for testing)
 00001684  A1 00002E66 R	    mov eax, fruitTimer
 00001689  83 F8 05		    cmp eax, 5
 0000168C  7C 32		    jl SkipFruitHandling
				
				    ; Reset timer
 0000168E  C7 05 00002E66 R	    mov fruitTimer, 0
	   00000000
				
				    ; Always force a fruit at fixed position (row 10, column 30)
 00001698  B8 0000000A		    mov eax, 10
 0000169D  F7 25 0000062E R	    mul gridWidth
 000016A3  83 C0 1E		    add eax, 30
 000016A6  8B F0		    mov esi, eax
				
				    ; Place the fruit regardless of what was there before
 000016A8  A0 00000642 R	    mov al, fruitChar
 000016AD  88 86 00000644 R	    mov grid[esi], al
 000016B3  C6 05 00002E65 R	    mov fruitActive, 1
	   01
 000016BA  89 35 00002E61 R	    mov fruitPos, esi
				
 000016C0			SkipFruitHandling:
				    ; Update power-up timer if active
 000016C0  80 3D 00000E4D R	    cmp powerUpActive, 1
	   01
 000016C7  74 01		    je CheckPowerUpTimer
 000016C9  C3			    ret                     ; Exit if no power-up is active
				
 000016CA			CheckPowerUpTimer:
 000016CA  FF 05 00000E4E R	    inc powerUpTimer
 000016D0  A1 00000E4E R	    mov eax, powerUpTimer
 000016D5  3B 05 00000E52 R	    cmp eax, powerUpDuration
 000016DB  7C 11		    jl PowerUpStillActive   ; Short jump if still active
				
				    ; Power-up expired
 000016DD  C6 05 00000E4D R	    mov powerUpActive, 0
	   00
 000016E4  C7 05 00000E4E R	    mov powerUpTimer, 0
	   00000000
				
 000016EE			PowerUpStillActive:
 000016EE  C3			    ret
 000016EF			UpdateLevel2Features ENDP
				
				; Updates Level 3 specific features
 000016EF			UpdateLevel3Features PROC
				    ; Only process if we're in Level 3
 000016EF  80 3D 0000062D R	    cmp currentLevel, 3
	   03
 000016F6  74 01		    je L3_ProcessFeatures
 000016F8  C3			    ret                     ; Exit immediately if not in Level 3
				
 000016F9			L3_ProcessFeatures:
				    ; Move walls horizontally like in level 2
 000016F9  E8 00000071		    call SlideWalls
				
				    ; Update fruit timer - simplified
 000016FE  FF 05 00002E66 R	    inc fruitTimer
				
				    ; Force spawn fruit every 5 ticks (even faster for testing)
 00001704  A1 00002E66 R	    mov eax, fruitTimer
 00001709  83 F8 05		    cmp eax, 5
 0000170C  7C 32		    jl SkipFruitHandling
				
				    ; Reset timer
 0000170E  C7 05 00002E66 R	    mov fruitTimer, 0
	   00000000
				
				    ; Always force a fruit at fixed position (row 15, column 45)
 00001718  B8 0000000F		    mov eax, 15
 0000171D  F7 25 0000062E R	    mul gridWidth
 00001723  83 C0 2D		    add eax, 45
 00001726  8B F0		    mov esi, eax
				
				    ; Place the fruit regardless of what was there before
 00001728  A0 00000642 R	    mov al, fruitChar
 0000172D  88 86 00000644 R	    mov grid[esi], al
 00001733  C6 05 00002E65 R	    mov fruitActive, 1
	   01
 0000173A  89 35 00002E61 R	    mov fruitPos, esi
				
 00001740			SkipFruitHandling:
				    ; Update power-up timer if active
 00001740  80 3D 00000E4D R	    cmp powerUpActive, 1
	   01
 00001747  74 01		    je CheckPowerUpTimer
 00001749  C3			    ret                     ; Exit if no power-up is active
				
 0000174A			CheckPowerUpTimer:
 0000174A  FF 05 00000E4E R	    inc powerUpTimer
 00001750  A1 00000E4E R	    mov eax, powerUpTimer
 00001755  3B 05 00000E52 R	    cmp eax, powerUpDuration
 0000175B  7C 11		    jl PowerUpStillActive   ; Short jump if still active
				
				    ; Power-up expired
 0000175D  C6 05 00000E4D R	    mov powerUpActive, 0
	   00
 00001764  C7 05 00000E4E R	    mov powerUpTimer, 0
	   00000000
				
 0000176E			PowerUpStillActive:
 0000176E  C3			    ret
 0000176F			UpdateLevel3Features ENDP
				
				; Removed all vertical column sliding procedures as they're no longer needed
				
				; Slides the walls for Level 2
 0000176F			SlideWalls PROC
				    ; Store registers
 0000176F  60			    pushad
				
				    ; Move walls one step right in each wall row
				    ; Each row will reset independently when it hits the border
				
				    ; Row 1 (row 6)
 00001770  B8 00000006		    mov eax, 6
 00001775  E8 00000020		    call MoveWallsRight
				
				    ; Row 2 (row 12)
 0000177A  B8 0000000C		    mov eax, 12
 0000177F  E8 00000016		    call MoveWallsRight
				
				    ; Row 3 (row 18)
 00001784  B8 00000012		    mov eax, 18
 00001789  E8 0000000C		    call MoveWallsRight
				
				    ; Row 4 (row 24)
 0000178E  B8 00000018		    mov eax, 24
 00001793  E8 00000002		    call MoveWallsRight
				
				    ; Restore registers
 00001798  61			    popad
 00001799  C3			    ret
 0000179A			SlideWalls ENDP
				
				; Helper procedure to move walls right by one position
				; Input: eax = row number
 0000179A			MoveWallsRight PROC
 0000179A  60			    pushad              ; Save all registers
				
				    ; Calculate start position (rightmost possible position)
 0000179B  8B D8		    mov ebx, eax        ; Save row number
 0000179D  F7 25 0000062E R	    mul gridWidth
 000017A3  83 C0 3D		    add eax, 61         ; Start from second-to-last column
 000017A6  8B F0		    mov esi, eax
				
				    ; Check if we need to reset this row
 000017A8  0F B6 86		    movzx eax, grid[esi]
	   00000644 R
 000017AF  3A 05 00000636 R	    cmp al, wallChar
 000017B5  74 5F		    je ResetThisRow
				
				    ; Process from right to left
 000017B7  B9 0000003C		    mov ecx, 60         ; Number of columns to process (excluding borders)
 000017BC			MoveWallsLoopStart:
				    ; Check if current position has a wall
 000017BC  0F B6 86		    movzx eax, grid[esi]
	   00000644 R
 000017C3  3A 05 00000636 R	    cmp al, wallChar
 000017C9  75 45		    jne NotWall
				
				    ; It's a wall, check if we can move it right
 000017CB  0F B6 96		    movzx edx, grid[esi+1]
	   00000645 R
 000017D2  3A 15 00000636 R	    cmp dl, wallChar    ; Don't move if there's already a wall to the right
 000017D8  74 36		    je NotWall
 000017DA  3A 15 0000063A R	    cmp dl, ghostChar   ; Don't move if there's a ghost to the right
 000017E0  74 2E		    je NotWall
 000017E2  3A 15 00000638 R	    cmp dl, pacmanChar  ; Don't move if Pacman is to the right
 000017E8  74 26		    je NotWall
				
				    ; Safe to move wall right
 000017EA  88 86 00000645 R	    mov grid[esi+1], al  ; Move wall to the right
				
				    ; Replace current position with dot or empty
 000017F0  3B 35 00000E8C R	    cmp esi, pacmanPos   ; Check if this was Pacman's position
 000017F6  74 0D		    je PutEmptyChar
				
				    ; Put a dot by default
 000017F8  A0 00000640 R	    mov al, dotChar
 000017FD  88 86 00000644 R	    mov grid[esi], al
 00001803  EB 0B		    jmp NotWall
				
 00001805			PutEmptyChar:
 00001805  A0 0000063E R	    mov al, emptyChar
 0000180A  88 86 00000644 R	    mov grid[esi], al
				
 00001810			NotWall:
 00001810  4E			    dec esi              ; Move to previous column
 00001811  49			    dec ecx              ; Manually decrement counter
 00001812  75 A8		    jnz MoveWallsLoopStart  ; Use jnz instead of loop
 00001814  EB 11		    jmp MoveWallsDone
				
 00001816			ResetThisRow:
				    ; Reset just this row
 00001816  8B C3		    mov eax, ebx        ; Restore row number
 00001818  E8 0000000C		    call ResetRowToLeft
				
				    ; Add a very small delay just for visual clarity
 0000181D  B8 0000000A		    mov eax, 10        ; 10ms delay
 00001822  E8 00000000 E	    call Delay
				
 00001827			MoveWallsDone:
 00001827  61			    popad                ; Restore all registers
 00001828  C3			    ret
 00001829			MoveWallsRight ENDP
				
				; Helper procedure to reset a row to leftmost position
				; Input: eax = row number
 00001829			ResetRowToLeft PROC
 00001829  60			    pushad              ; Save all registers
				
				    ; Calculate start position
 0000182A  8B D8		    mov ebx, eax        ; Save row number
 0000182C  F7 25 0000062E R	    mul gridWidth
 00001832  8B F0		    mov esi, eax
 00001834  83 C6 01		    add esi, 1          ; Skip left border
				
				    ; First clear all wall characters, preserving everything else
 00001837  B9 0000003E		    mov ecx, 62         ; Number of columns (excluding borders)
 0000183C			ClearWallsLoopStart:
 0000183C  0F B6 86		    movzx eax, grid[esi]
	   00000644 R
 00001843  3A 05 00000636 R	    cmp al, wallChar
 00001849  75 0B		    jne SkipClear
 0000184B  A0 00000640 R	    mov al, dotChar
 00001850  88 86 00000644 R	    mov grid[esi], al
 00001856			SkipClear:
 00001856  46			    inc esi
 00001857  49			    dec ecx              ; Manually decrement counter
 00001858  75 E2		    jnz ClearWallsLoopStart  ; Use jnz instead of loop
				
				    ; Now place walls in their initial positions based on row
 0000185A  83 FB 06		    cmp ebx, 6          ; First row
 0000185D  74 1C		    je PlaceRow1Walls
 0000185F  83 FB 0C		    cmp ebx, 12         ; Second row
 00001862  74 5E		    je PlaceRow2Walls
 00001864  83 FB 12		    cmp ebx, 18         ; Third row
 00001867  0F 84 000000FF	    je PlaceRow3Walls
 0000186D  83 FB 18		    cmp ebx, 24         ; Fourth row
 00001870  0F 84 0000015E	    je PlaceRow4Walls
 00001876  E9 000001FE		    jmp ResetDone
				
 0000187B			PlaceRow1Walls:
				    ; 2 walls of 8 units each
 0000187B  8B C3		    mov eax, ebx        ; Row number
 0000187D  F7 25 0000062E R	    mul gridWidth
 00001883  83 C0 10		    add eax, 16         ; First wall position
 00001886  8B F0		    mov esi, eax
 00001888  B9 00000008		    mov ecx, 8
 0000188D  A0 00000636 R	    mov al, wallChar    ; Load wall character into al
 00001892			PlaceRow1Wall1Start:
 00001892  88 86 00000644 R	    mov grid[esi], al   ; Place wall character
 00001898  46			    inc esi
 00001899  49			    dec ecx              ; Manually decrement counter
 0000189A  75 F6		    jnz PlaceRow1Wall1Start  ; Use jnz instead of loop
				
 0000189C  8B C3		    mov eax, ebx        ; Row number
 0000189E  F7 25 0000062E R	    mul gridWidth
 000018A4  83 C0 28		    add eax, 40         ; Second wall position
 000018A7  8B F0		    mov esi, eax
 000018A9  B9 00000008		    mov ecx, 8
 000018AE  A0 00000636 R	    mov al, wallChar    ; Load wall character into al
 000018B3			PlaceRow1Wall2Start:
 000018B3  88 86 00000644 R	    mov grid[esi], al   ; Place wall character
 000018B9  46			    inc esi
 000018BA  49			    dec ecx              ; Manually decrement counter
 000018BB  75 F6		    jnz PlaceRow1Wall2Start  ; Use jnz instead of loop
 000018BD  E9 000001B7		    jmp near ptr ResetDone
				
 000018C2			PlaceRow2Walls:
				    ; 5 walls of 8 units each
 000018C2  8B C3		    mov eax, ebx        ; Row number
 000018C4  F7 25 0000062E R	    mul gridWidth
 000018CA  83 C0 04		    add eax, 4          ; First wall position
 000018CD  8B F0		    mov esi, eax
 000018CF  B9 00000008		    mov ecx, 8
 000018D4  A0 00000636 R	    mov al, wallChar    ; Load wall character into al
 000018D9			PlaceRow2Wall1Start:
 000018D9  88 86 00000644 R	    mov grid[esi], al   ; Place wall character
 000018DF  46			    inc esi
 000018E0  49			    dec ecx              ; Manually decrement counter
 000018E1  75 F6		    jnz PlaceRow2Wall1Start  ; Use jnz instead of loop
				
 000018E3  8B C3		    mov eax, ebx        ; Row number
 000018E5  F7 25 0000062E R	    mul gridWidth
 000018EB  83 C0 10		    add eax, 16         ; Second wall position
 000018EE  8B F0		    mov esi, eax
 000018F0  B9 00000008		    mov ecx, 8
 000018F5  A0 00000636 R	    mov al, wallChar    ; Load wall character into al
 000018FA			PlaceRow2Wall2Start:
 000018FA  88 86 00000644 R	    mov grid[esi], al   ; Place wall character
 00001900  46			    inc esi
 00001901  49			    dec ecx              ; Manually decrement counter
 00001902  75 F6		    jnz PlaceRow2Wall2Start  ; Use jnz instead of loop
				
 00001904  8B C3		    mov eax, ebx        ; Row number
 00001906  F7 25 0000062E R	    mul gridWidth
 0000190C  83 C0 1C		    add eax, 28         ; Third wall position
 0000190F  8B F0		    mov esi, eax
 00001911  B9 00000008		    mov ecx, 8
 00001916  A0 00000636 R	    mov al, wallChar    ; Load wall character into al
 0000191B			PlaceRow2Wall3Start:
 0000191B  88 86 00000644 R	    mov grid[esi], al   ; Place wall character
 00001921  46			    inc esi
 00001922  49			    dec ecx              ; Manually decrement counter
 00001923  75 F6		    jnz PlaceRow2Wall3Start  ; Use jnz instead of loop
				
 00001925  8B C3		    mov eax, ebx        ; Row number
 00001927  F7 25 0000062E R	    mul gridWidth
 0000192D  83 C0 28		    add eax, 40         ; Fourth wall position
 00001930  8B F0		    mov esi, eax
 00001932  B9 00000008		    mov ecx, 8
 00001937  A0 00000636 R	    mov al, wallChar    ; Load wall character into al
 0000193C			PlaceRow2Wall4Start:
 0000193C  88 86 00000644 R	    mov grid[esi], al   ; Place wall character
 00001942  46			    inc esi
 00001943  49			    dec ecx              ; Manually decrement counter
 00001944  75 F6		    jnz PlaceRow2Wall4Start  ; Use jnz instead of loop
				
 00001946  8B C3		    mov eax, ebx        ; Row number
 00001948  F7 25 0000062E R	    mul gridWidth
 0000194E  83 C0 34		    add eax, 52         ; Fifth wall position
 00001951  8B F0		    mov esi, eax
 00001953  B9 00000008		    mov ecx, 8
 00001958  A0 00000636 R	    mov al, wallChar    ; Load wall character into al
 0000195D			PlaceRow2Wall5Start:
 0000195D  88 86 00000644 R	    mov grid[esi], al   ; Place wall character
 00001963  46			    inc esi
 00001964  49			    dec ecx              ; Manually decrement counter
 00001965  75 F6		    jnz PlaceRow2Wall5Start  ; Use jnz instead of loop
 00001967  E9 0000010D		    jmp near ptr ResetDone
				
 0000196C			PlaceRow3Walls:
				    ; 3 walls of 8 units each
 0000196C  8B C3		    mov eax, ebx        ; Row number
 0000196E  F7 25 0000062E R	    mul gridWidth
 00001974  83 C0 0C		    add eax, 12         ; First wall position
 00001977  8B F0		    mov esi, eax
 00001979  B9 00000008		    mov ecx, 8
 0000197E  A0 00000636 R	    mov al, wallChar    ; Load wall character into al
 00001983			PlaceRow3Wall1Start:
 00001983  88 86 00000644 R	    mov grid[esi], al   ; Place wall character
 00001989  46			    inc esi
 0000198A  49			    dec ecx              ; Manually decrement counter
 0000198B  75 F6		    jnz PlaceRow3Wall1Start  ; Use jnz instead of loop
				
 0000198D  8B C3		    mov eax, ebx        ; Row number
 0000198F  F7 25 0000062E R	    mul gridWidth
 00001995  83 C0 1C		    add eax, 28         ; Second wall position
 00001998  8B F0		    mov esi, eax
 0000199A  B9 00000008		    mov ecx, 8
 0000199F  A0 00000636 R	    mov al, wallChar    ; Load wall character into al
 000019A4			PlaceRow3Wall2Start:
 000019A4  88 86 00000644 R	    mov grid[esi], al   ; Place wall character
 000019AA  46			    inc esi
 000019AB  49			    dec ecx              ; Manually decrement counter
 000019AC  75 F6		    jnz PlaceRow3Wall2Start  ; Use jnz instead of loop
				
 000019AE  8B C3		    mov eax, ebx        ; Row number
 000019B0  F7 25 0000062E R	    mul gridWidth
 000019B6  83 C0 2C		    add eax, 44         ; Third wall position
 000019B9  8B F0		    mov esi, eax
 000019BB  B9 00000008		    mov ecx, 8
 000019C0  A0 00000636 R	    mov al, wallChar    ; Load wall character into al
 000019C5			PlaceRow3Wall3Start:
 000019C5  88 86 00000644 R	    mov grid[esi], al   ; Place wall character
 000019CB  46			    inc esi
 000019CC  49			    dec ecx              ; Manually decrement counter
 000019CD  75 F6		    jnz PlaceRow3Wall3Start  ; Use jnz instead of loop
 000019CF  E9 000000A5		    jmp near ptr ResetDone
				
 000019D4			PlaceRow4Walls:
				    ; 5 walls of 8 units each (same as row 2)
 000019D4  8B C3		    mov eax, ebx        ; Row number
 000019D6  F7 25 0000062E R	    mul gridWidth
 000019DC  83 C0 04		    add eax, 4          ; First wall position
 000019DF  8B F0		    mov esi, eax
 000019E1  B9 00000008		    mov ecx, 8
 000019E6  A0 00000636 R	    mov al, wallChar    ; Load wall character into al
 000019EB			PlaceRow4Wall1Start:
 000019EB  88 86 00000644 R	    mov grid[esi], al   ; Place wall character
 000019F1  46			    inc esi
 000019F2  49			    dec ecx              ; Manually decrement counter
 000019F3  75 F6		    jnz PlaceRow4Wall1Start  ; Use jnz instead of loop
				
 000019F5  8B C3		    mov eax, ebx        ; Row number
 000019F7  F7 25 0000062E R	    mul gridWidth
 000019FD  83 C0 10		    add eax, 16         ; Second wall position
 00001A00  8B F0		    mov esi, eax
 00001A02  B9 00000008		    mov ecx, 8
 00001A07  A0 00000636 R	    mov al, wallChar    ; Load wall character into al
 00001A0C			PlaceRow4Wall2Start:
 00001A0C  88 86 00000644 R	    mov grid[esi], al   ; Place wall character
 00001A12  46			    inc esi
 00001A13  49			    dec ecx              ; Manually decrement counter
 00001A14  75 F6		    jnz PlaceRow4Wall2Start  ; Use jnz instead of loop
				
 00001A16  8B C3		    mov eax, ebx        ; Row number
 00001A18  F7 25 0000062E R	    mul gridWidth
 00001A1E  83 C0 1C		    add eax, 28         ; Third wall position
 00001A21  8B F0		    mov esi, eax
 00001A23  B9 00000008		    mov ecx, 8
 00001A28  A0 00000636 R	    mov al, wallChar    ; Load wall character into al
 00001A2D			PlaceRow4Wall3Start:
 00001A2D  88 86 00000644 R	    mov grid[esi], al   ; Place wall character
 00001A33  46			    inc esi
 00001A34  49			    dec ecx              ; Manually decrement counter
 00001A35  75 F6		    jnz PlaceRow4Wall3Start  ; Use jnz instead of loop
				
 00001A37  8B C3		    mov eax, ebx        ; Row number
 00001A39  F7 25 0000062E R	    mul gridWidth
 00001A3F  83 C0 28		    add eax, 40         ; Fourth wall position
 00001A42  8B F0		    mov esi, eax
 00001A44  B9 00000008		    mov ecx, 8
 00001A49  A0 00000636 R	    mov al, wallChar    ; Load wall character into al
 00001A4E			PlaceRow4Wall4Start:
 00001A4E  88 86 00000644 R	    mov grid[esi], al   ; Place wall character
 00001A54  46			    inc esi
 00001A55  49			    dec ecx              ; Manually decrement counter
 00001A56  75 F6		    jnz PlaceRow4Wall4Start  ; Use jnz instead of loop
				
 00001A58  8B C3		    mov eax, ebx        ; Row number
 00001A5A  F7 25 0000062E R	    mul gridWidth
 00001A60  83 C0 34		    add eax, 52         ; Fifth wall position
 00001A63  8B F0		    mov esi, eax
 00001A65  B9 00000008		    mov ecx, 8
 00001A6A  A0 00000636 R	    mov al, wallChar    ; Load wall character into al
 00001A6F			PlaceRow4Wall5Start:
 00001A6F  88 86 00000644 R	    mov grid[esi], al   ; Place wall character
 00001A75  46			    inc esi
 00001A76  49			    dec ecx              ; Manually decrement counter
 00001A77  75 F6		    jnz PlaceRow4Wall5Start  ; Use jnz instead of loop
				
 00001A79			ResetDone:
 00001A79  61			    popad               ; Restore all registers
 00001A7A  C3			    ret
 00001A7B			ResetRowToLeft ENDP
				
				; Handle ghost collision with Pacman
 00001A7B			HandleGhostCollision PROC
 00001A7B  60			    pushad              ; Save all registers
				
				    ; Check if power-up is active
 00001A7C  A0 00000E4D R	    mov al, powerUpActive
 00001A81  3C 01		    cmp al, 1
 00001A83  74 62		    je GhostPowerUpActive
				
				    ; No power-up, decrease life - play death sound
 00001A85  FF 0D 00000E44 R	    dec lives
				
				    ; Play death sound
				    INVOKE PlaySoundFile, ADDR deathSoundFile, deathSoundFreq, deathSoundDur
 00001A8B  FF 35 00003455 R *	    push   deathSoundDur
 00001A91  FF 35 00003451 R *	    push   deathSoundFreq
 00001A97  68 0000342A R   *	    push   OFFSET deathSoundFile
 00001A9C  E8 FFFFE55F	   *	    call   PlaySoundFile
				
				    ; Check if game over
 00001AA1  83 3D 00000E44 R	    cmp lives, 0
	   00
 00001AA8  74 46		    je HandleGameOver
				
				    ; Not game over, reset Pacman position
				    ; Clear old position
 00001AAA  8B 35 00000E8C R	    mov esi, pacmanPos
 00001AB0  A0 0000063E R	    mov al, emptyChar
 00001AB5  88 86 00000644 R	    mov grid[esi], al
				
				    ; Move Pacman back to start
 00001ABB  B8 0000000F		    mov eax, 15        ; Middle row
 00001AC0  F7 25 0000062E R	    mul gridWidth
 00001AC6  83 C0 20		    add eax, 32        ; Middle column
 00001AC9  A3 00000E8C R	    mov pacmanPos, eax
 00001ACE  8B F0		    mov esi, eax
 00001AD0  A0 00000638 R	    mov al, pacmanChar
 00001AD5  88 86 00000644 R	    mov grid[esi], al
				
				    ; Reset last direction when hit by ghost
 00001ADB  C7 05 00002E59 R	    mov lastDirection, 0
	   00000000
				
 00001AE5  EB 17		    jmp HandleGhostDone
				
 00001AE7			GhostPowerUpActive:
				    ; Power-up is active, add points instead of losing a life
 00001AE7  83 05 00000E48 R	    add score, 50      ; Add 50 points for eating a ghost during power-up
	   32
 00001AEE  EB 0E		    jmp HandleGhostDone
				
 00001AF0			HandleGameOver:
				    ; Set game running to false
 00001AF0  C6 05 00000EA4 R	    mov gameRunning, 0
	   00
 00001AF7  C6 05 00000EA9 R	    mov gameEndReason, 1  ; 1 = lives lost
	   01
				
 00001AFE			HandleGhostDone:
 00001AFE  61			    popad               ; Restore all registers
 00001AFF  C3			    ret
 00001B00			HandleGhostCollision ENDP
				
				; Toggle pause state and show/hide pause screen
 00001B00			TogglePause PROC
				    ; Toggle pause state
 00001B00  32 C0		    xor al, al
 00001B02  A0 00002AF1 R	    mov al, isPaused
 00001B07  34 01		    xor al, 1
 00001B09  A2 00002AF1 R	    mov isPaused, al
				
				    ; If now paused, show pause screen
 00001B0E  3C 01		    cmp al, 1
 00001B10  74 06		    je ShowPauseScreen
				
				    ; If now unpaused, redraw game
 00001B12  E8 FFFFF846		    call DrawGrid
 00001B17  C3			    ret
				
 00001B18			ShowPauseScreen:
				    ; Clear screen
 00001B18  E8 00000000 E	    call Clrscr
				
				    ; Display PAUSED art
 00001B1D  B2 00		    mov dl, 0
 00001B1F  B6 00		    mov dh, 0
 00001B21  E8 00000000 E	    call Gotoxy
 00001B26  BA 0000232A R	    mov edx, OFFSET pauseArt
 00001B2B  E8 00000000 E	    call WriteString
 00001B30  E8 00000000 E	    call Crlf
 00001B35  E8 00000000 E	    call Crlf
				
				    ; Display Instructions art
 00001B3A  BA 00002830 R	    mov edx, OFFSET instructionsArt
 00001B3F  E8 00000000 E	    call WriteString
 00001B44  E8 00000000 E	    call Crlf
 00001B49  E8 00000000 E	    call Crlf
				
				    ; Display instructions
 00001B4E  BA 0000299D R	    mov edx, OFFSET instruction1
 00001B53  E8 00000000 E	    call WriteString
 00001B58  E8 00000000 E	    call Crlf
 00001B5D  BA 000029AA R	    mov edx, OFFSET instruction2
 00001B62  E8 00000000 E	    call WriteString
 00001B67  E8 00000000 E	    call Crlf
 00001B6C  BA 000029C9 R	    mov edx, OFFSET instruction3
 00001B71  E8 00000000 E	    call WriteString
 00001B76  E8 00000000 E	    call Crlf
 00001B7B  BA 000029F7 R	    mov edx, OFFSET instruction4
 00001B80  E8 00000000 E	    call WriteString
 00001B85  E8 00000000 E	    call Crlf
 00001B8A  BA 00002A1D R	    mov edx, OFFSET instruction5
 00001B8F  E8 00000000 E	    call WriteString
 00001B94  E8 00000000 E	    call Crlf
 00001B99  BA 00002A59 R	    mov edx, OFFSET instruction6
 00001B9E  E8 00000000 E	    call WriteString
 00001BA3  E8 00000000 E	    call Crlf
 00001BA8  BA 00002A7D R	    mov edx, OFFSET instruction7
 00001BAD  E8 00000000 E	    call WriteString
 00001BB2  E8 00000000 E	    call Crlf
 00001BB7  E8 00000000 E	    call Crlf
 00001BBC  BA 00002A8F R	    mov edx, OFFSET instruction8
 00001BC1  E8 00000000 E	    call WriteString
 00001BC6  E8 00000000 E	    call Crlf
 00001BCB  BA 00002A9B R	    mov edx, OFFSET instruction9
 00001BD0  E8 00000000 E	    call WriteString
 00001BD5  E8 00000000 E	    call Crlf
 00001BDA  BA 00002AC4 R	    mov edx, OFFSET instruction10
 00001BDF  E8 00000000 E	    call WriteString
				
 00001BE4  C3			    ret
 00001BE5			TogglePause ENDP
				
				; Handle game over state
 00001BE5			GameOver PROC
				    ; Set game running to false
 00001BE5  C6 05 00000EA4 R	    mov gameRunning, 0
	   00
				
				    ; Show the game over screen with ASCII art
 00001BEC  E8 0000005A		    call ShowGameOverScreen
				
 00001BF1  C3			    ret
 00001BF2			GameOver ENDP
				
				; Simplified fruit spawning - just used for initialization
 00001BF2			SpawnFruit PROC
 00001BF2  60			    pushad            ; Save all registers
				
				    ; Calculate fixed position (row 10, column 30)
 00001BF3  B8 0000000A		    mov eax, 10
 00001BF8  F7 25 0000062E R	    mul gridWidth
 00001BFE  83 C0 1E		    add eax, 30
 00001C01  A3 00002E61 R	    mov fruitPos, eax
 00001C06  8B F0		    mov esi, eax
				
				    ; Force fruit character
 00001C08  A0 00000642 R	    mov al, fruitChar
 00001C0D  88 86 00000644 R	    mov grid[esi], al
 00001C13  C6 05 00002E65 R	    mov fruitActive, 1
	   01
				
 00001C1A  61			    popad             ; Restore all registers
 00001C1B  C3			    ret
 00001C1C			SpawnFruit ENDP
				
				; Count the number of dots remaining in the grid
 00001C1C			CountRemainingDots PROC
 00001C1C  60			    pushad            ; Save all registers
				
				    ; Reset counter
 00001C1D  C7 05 00000EA5 R	    mov remainingDots, 0
	   00000000
				
				    ; Loop through the entire grid
 00001C27  B9 00000800		    mov ecx, 2048     ; 32 * 64 = 2048 cells
 00001C2C  BE 00000000		    mov esi, 0
				
 00001C31			CountDotsLoop:
				    ; Check if current cell is a dot
 00001C31  0F B6 86		    movzx eax, grid[esi]
	   00000644 R
 00001C38  3A 05 00000640 R	    cmp al, dotChar
 00001C3E  75 06		    jne NotDot
				
				    ; Increment dot counter
 00001C40  FF 05 00000EA5 R	    inc remainingDots
				
 00001C46			NotDot:
 00001C46  46			    inc esi
 00001C47  E2 E8		    loop CountDotsLoop
				
 00001C49  61			    popad             ; Restore all registers
 00001C4A  C3			    ret
 00001C4B			CountRemainingDots ENDP
				
				; Show game over screen with ASCII art, username, score, and reason
 00001C4B			ShowGameOverScreen PROC
 00001C4B  60			    pushad            ; Save all registers
				
				    ; Play game over sound
				    INVOKE PlaySoundFile, ADDR gameOverSoundFile, gameOverSoundFreq, gameOverSoundDur
 00001C4C  FF 35 0000345D R *	    push   gameOverSoundDur
 00001C52  FF 35 00003459 R *	    push   gameOverSoundFreq
 00001C58  68 00003434 R   *	    push   OFFSET gameOverSoundFile
 00001C5D  E8 FFFFE39E	   *	    call   PlaySoundFile
				
				    ; Clear screen
 00001C62  E8 00000000 E	    call Clrscr
				
				    ; Display GAME OVER ASCII art
 00001C67  B2 00		    mov dl, 0
 00001C69  B6 00		    mov dh, 0
 00001C6B  E8 00000000 E	    call Gotoxy
 00001C70  BA 00000F60 R	    mov edx, OFFSET gameOverArt
 00001C75  E8 00000000 E	    call WriteString
				
				    ; Display player name
 00001C7A  B2 0A		    mov dl, 10
 00001C7C  B6 18		    mov dh, 24
 00001C7E  E8 00000000 E	    call Gotoxy
 00001C83  BA 00000624 R	    mov edx, OFFSET nameMsg
 00001C88  E8 00000000 E	    call WriteString
 00001C8D  BA 00000604 R	    mov edx, OFFSET playerName
 00001C92  E8 00000000 E	    call WriteString
				
				    ; Display score
 00001C97  B2 0A		    mov dl, 10
 00001C99  B6 19		    mov dh, 25
 00001C9B  E8 00000000 E	    call Gotoxy
 00001CA0  BA 00000E56 R	    mov edx, OFFSET scoreMsg
 00001CA5  E8 00000000 E	    call WriteString
 00001CAA  A1 00000E48 R	    mov eax, score
 00001CAF  E8 00000000 E	    call WriteDec
				
				    ; Display reason for game ending
 00001CB4  B2 0A		    mov dl, 10
 00001CB6  B6 1A		    mov dh, 26
 00001CB8  E8 00000000 E	    call Gotoxy
 00001CBD  BA 00000F1E R	    mov edx, OFFSET msgReason
 00001CC2  E8 00000000 E	    call WriteString
				
				    ; Check game end reason
 00001CC7  0F B6 05		    movzx eax, gameEndReason
	   00000EA9 R
 00001CCE  83 F8 01		    cmp eax, 1
 00001CD1  74 0C		    je ShowLivesLostReason
 00001CD3  83 F8 02		    cmp eax, 2
 00001CD6  74 13		    je ShowPelletsCollectedReason
 00001CD8  83 F8 03		    cmp eax, 3
 00001CDB  74 1A		    je ShowQuitReason
 00001CDD  EB 22		    jmp WriteHighscoreSection
				
 00001CDF			ShowLivesLostReason:
 00001CDF  BA 00000F27 R	    mov edx, OFFSET msgLivesLost
 00001CE4  E8 00000000 E	    call WriteString
 00001CE9  EB 16		    jmp WriteHighscoreSection
				
 00001CEB			ShowPelletsCollectedReason:
 00001CEB  BA 00000F36 R	    mov edx, OFFSET msgAllPelletsCollected
 00001CF0  E8 00000000 E	    call WriteString
 00001CF5  EB 0A		    jmp WriteHighscoreSection
				
 00001CF7			ShowQuitReason:
 00001CF7  BA 00000F4C R	    mov edx, OFFSET msgQuitGame
 00001CFC  E8 00000000 E	    call WriteString
				
 00001D01			WriteHighscoreSection:
				    ; Add message about saving highscore
 00001D01  B2 0A		    mov dl, 10
 00001D03  B6 1C		    mov dh, 28
 00001D05  E8 00000000 E	    call Gotoxy
				
				    ; Write highscore to file
 00001D0A  E8 00000002		    call WriteHighscore
				
 00001D0F			GameOverScreenDone:
 00001D0F  61			    popad             ; Restore all registers
 00001D10  C3			    ret
 00001D11			ShowGameOverScreen ENDP
				
				; Write highscore to file in format name,level,score
 00001D11			WriteHighscore PROC
 00001D11  60			    pushad            ; Save all registers
				
				    ; Clear score buffer
 00001D12  BF 00002F74 R	    mov edi, OFFSET scoreBuffer
 00001D17  B9 00000100		    mov ecx, 256
 00001D1C  B0 00		    mov al, 0
 00001D1E  F3/ AA		    rep stosb
				
				    ; Format entry: name,level,score
				    ; First copy the name
 00001D20  BE 00000604 R	    mov esi, OFFSET playerName
 00001D25  BF 00002F74 R	    mov edi, OFFSET scoreBuffer
 00001D2A  B9 0000001F		    mov ecx, 31                ; Max name length - 1 for null terminator
 00001D2F			CopyNameLoop:
 00001D2F  8A 06		    mov al, [esi]
 00001D31  3C 00		    cmp al, 0                  ; Check for null terminator
 00001D33  74 06		    je DoneWithName
 00001D35  88 07		    mov BYTE PTR [edi], al
 00001D37  46			    inc esi
 00001D38  47			    inc edi
 00001D39  E2 F4		    loop CopyNameLoop
 00001D3B			DoneWithName:
				
				    ; Add comma
 00001D3B  C6 07 2C		    mov BYTE PTR [edi], ','
 00001D3E  47			    inc edi
				
				    ; Add level (single digit 1-3)
 00001D3F  A0 0000062D R	    mov al, currentLevel
 00001D44  04 30		    add al, '0'                ; Convert to ASCII
 00001D46  88 07		    mov BYTE PTR [edi], al
 00001D48  47			    inc edi
				
				    ; Add comma
 00001D49  C6 07 2C		    mov BYTE PTR [edi], ','
 00001D4C  47			    inc edi
				
				    ; Add score (convert to string)
 00001D4D  A1 00000E48 R	    mov eax, score
 00001D52  E8 00000087		    call MyParseDecimal32      ; Convert EAX to decimal string at EDI
				
				    ; Find end of string to add newline
 00001D57  BF 00002F74 R	    mov edi, OFFSET scoreBuffer
 00001D5C			FindEndLoop:
 00001D5C  80 3F 00		    cmp BYTE PTR [edi], 0
 00001D5F  74 03		    je FoundEnd
 00001D61  47			    inc edi
 00001D62  EB F8		    jmp FindEndLoop
 00001D64			FoundEnd:
				
				    ; Add newline at end
 00001D64  C6 07 0D		    mov BYTE PTR [edi], 13     ; Carriage return
 00001D67  47			    inc edi
 00001D68  C6 07 0A		    mov BYTE PTR [edi], 10     ; Line feed
 00001D6B  47			    inc edi
 00001D6C  C6 07 00		    mov BYTE PTR [edi], 0      ; Null terminator
				
				    ; Try to open the file (append mode)
				    INVOKE CreateFile,
				        ADDR highscoresFile,   ; File name
				        GENERIC_WRITE,         ; Open for writing
				        0,                     ; No sharing
				        NULL,                  ; Default security
				        OPEN_ALWAYS,           ; Open if exists, create if doesn't
				        FILE_ATTRIBUTE_NORMAL, ; Normal file attribute
				        0                      ; No template
 00001D6F  6A 00	   *	    push   +000000000h
 00001D71  68 00000080	   *	    push   +000000080h
 00001D76  6A 04	   *	    push   +000000004h
 00001D78  6A 00	   *	    push   +000000000h
 00001D7A  6A 00	   *	    push   +000000000h
 00001D7C  68 40000000	   *	    push   +040000000h
 00001D81  68 00002F5D R   *	    push   OFFSET highscoresFile
 00001D86  E8 00000000 E   *	    call   CreateFileA
				
 00001D8B  A3 00002F6C R	    mov fileHandle, eax        ; Save file handle
				
				    ; Check if file opened successfully
 00001D90  83 F8 FF		    cmp eax, INVALID_HANDLE_VALUE
 00001D93  74 47		    je FileError
				
				    ; Seek to end of file for append
				    INVOKE SetFilePointer,
				        fileHandle,            ; File handle
				        0,                     ; Distance low (0)
				        0,                     ; Distance high (0)
				        FILE_END               ; Move from end
 00001D95  6A 02	   *	    push   +000000002h
 00001D97  6A 00	   *	    push   +000000000h
 00001D99  6A 00	   *	    push   +000000000h
 00001D9B  FF 35 00002F6C R *	    push   fileHandle
 00001DA1  E8 00000000 E   *	    call   SetFilePointer
				
				    ; Calculate string length
 00001DA6  BF 00002F74 R	    mov edi, OFFSET scoreBuffer
 00001DAB  B9 00000000		    mov ecx, 0
 00001DB0			StrLenLoop:
 00001DB0  80 3C 0F 00		    cmp BYTE PTR [edi+ecx], 0
 00001DB4  74 03		    je DoneCountingLength
 00001DB6  41			    inc ecx
 00001DB7  EB F7		    jmp StrLenLoop
 00001DB9			DoneCountingLength:
				
				    ; Write the score entry to the file
				    INVOKE WriteFile,
				        fileHandle,            ; File handle
				        ADDR scoreBuffer,      ; Buffer to write from
				        ecx,                   ; Number of bytes to write
				        ADDR bytesWritten,     ; Number of bytes written
				        0                      ; Overlapped structure
 00001DB9  6A 00	   *	    push   +000000000h
 00001DBB  68 00002F70 R   *	    push   OFFSET bytesWritten
 00001DC0  51		   *	    push   ecx
 00001DC1  68 00002F74 R   *	    push   OFFSET scoreBuffer
 00001DC6  FF 35 00002F6C R *	    push   fileHandle
 00001DCC  E8 00000000 E   *	    call   WriteFile
				
				    ; Close the file
				    INVOKE CloseHandle, fileHandle
 00001DD1  FF 35 00002F6C R *	    push   fileHandle
 00001DD7  E8 00000000 E   *	    call   CloseHandle
				
 00001DDC			FileError:
 00001DDC  61			    popad                      ; Restore all registers
 00001DDD  C3			    ret
 00001DDE			WriteHighscore ENDP
				
				; Helper procedure: MyParseDecimal32
				; Converts a 32-bit integer in EAX to decimal ASCII
				; EDI points to the destination buffer
 00001DDE			MyParseDecimal32 PROC
 00001DDE  60			    pushad                   ; Save all registers
				
 00001DDF  B9 00000000		    mov ecx, 0              ; Digit counter
 00001DE4  BB 0000000A		    mov ebx, 10             ; Divisor
				
				    ; Special case for 0
 00001DE9  85 C0		    test eax, eax
 00001DEB  75 06		    jnz ConvertLoop
 00001DED  C6 07 30		    mov BYTE PTR [edi], '0'
 00001DF0  47			    inc edi
 00001DF1  EB 19		    jmp ParseDone
				
 00001DF3			ConvertLoop:
				    ; Exit if number is 0
 00001DF3  85 C0		    test eax, eax
 00001DF5  74 0B		    jz BuildString
				
				    ; Get next digit
 00001DF7  33 D2		    xor edx, edx            ; Clear EDX for division
 00001DF9  F7 F3		    div ebx                 ; Divide EAX by 10, remainder in EDX
				
				    ; Convert to ASCII and push onto stack
 00001DFB  80 C2 30		    add dl, '0'
 00001DFE  52			    push edx
 00001DFF  41			    inc ecx
 00001E00  EB F1		    jmp ConvertLoop
				
 00001E02			BuildString:
				    ; No more digits or no digits (zero case)
 00001E02  85 C9		    test ecx, ecx
 00001E04  74 06		    jz ParseDone
				
				    ; Pop digits in reverse order
 00001E06			PopLoop:
 00001E06  58			    pop eax
 00001E07  88 07		    mov [edi], al
 00001E09  47			    inc edi
 00001E0A  E2 FA		    loop PopLoop
				
 00001E0C			ParseDone:
 00001E0C  C6 07 00		    mov BYTE PTR [edi], 0    ; Null-terminate the string
 00001E0F  61			    popad                    ; Restore all registers
 00001E10  C3			    ret
 00001E11			MyParseDecimal32 ENDP
				
				
				
				; String for MP3 file type
 00001E11 74 79 70 65 20	szTypeMP3 BYTE "type mpegvideo alias pacmanmp3", 0
	   6D 70 65 67 76
	   69 64 65 6F 20
	   61 6C 69 61 73
	   20 70 61 63 6D
	   61 6E 6D 70 33
	   00
				
				END main
Microsoft (R) Macro Assembler Version 14.43.34808.0	    05/13/25 13:19:04
Pacman Gam						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00003461 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00001E30 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AddBorderWalls . . . . . . . . .	P Near	 000007C4 _TEXT	Length= 0000006D Public STDCALL
  TopWallLoop  . . . . . . . . .	L Near	 000007CE _TEXT	
  BottomWallLoop . . . . . . . .	L Near	 000007EE _TEXT	
  LeftWallLoop . . . . . . . . .	L Near	 00000806 _TEXT	
  RightWallLoop  . . . . . . . .	L Near	 00000820 _TEXT	
AddInteriorWalls . . . . . . . .	P Near	 00000831 _TEXT	Length= 0000020E Public STDCALL
  Row1Wall1  . . . . . . . . . .	L Near	 00000846 _TEXT	
  Row1Wall2  . . . . . . . . . .	L Near	 00000869 _TEXT	
  Row2Wall1  . . . . . . . . . .	L Near	 0000088C _TEXT	
  Row2Wall2  . . . . . . . . . .	L Near	 000008AF _TEXT	
  Row2Wall3  . . . . . . . . . .	L Near	 000008D2 _TEXT	
  Row2Wall4  . . . . . . . . . .	L Near	 000008F5 _TEXT	
  Row2Wall5  . . . . . . . . . .	L Near	 00000918 _TEXT	
  Row3Wall1  . . . . . . . . . .	L Near	 0000093B _TEXT	
  Row3Wall2  . . . . . . . . . .	L Near	 0000095E _TEXT	
  Row3Wall3  . . . . . . . . . .	L Near	 00000981 _TEXT	
  Row4Wall1  . . . . . . . . . .	L Near	 000009A4 _TEXT	
  Row4Wall2  . . . . . . . . . .	L Near	 000009C7 _TEXT	
  Row4Wall3  . . . . . . . . . .	L Near	 000009EA _TEXT	
  Row4Wall4  . . . . . . . . . .	L Near	 00000A0D _TEXT	
  Row4Wall5  . . . . . . . . . .	L Near	 00000A30 _TEXT	
Beep . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CheckGhostMove . . . . . . . . .	P Near	 00001335 _TEXT	Length= 00000028 Public STDCALL
  InvalidMove  . . . . . . . . .	L Near	 0000135B _TEXT	
CleanupGame  . . . . . . . . . .	P Near	 0000164A _TEXT	Length= 00000025 Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CountRemainingDots . . . . . . .	P Near	 00001C1C _TEXT	Length= 0000002F Public STDCALL
  CountDotsLoop  . . . . . . . .	L Near	 00001C31 _TEXT	
  NotDot . . . . . . . . . . . .	L Near	 00001C46 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawGrid . . . . . . . . . . . .	P Near	 0000135D _TEXT	Length= 000002ED Public STDCALL
  DrawRowLoopStart . . . . . . .	L Near	 000013D7 _TEXT	
  DrawColLoopStart . . . . . . .	L Near	 000013E5 _TEXT	
  UseLevel1WallColor . . . . . .	L Near	 00001413 _TEXT	
  UseLevel2WallColor . . . . . .	L Near	 00001439 _TEXT	
  UseLevel3WallColor . . . . . .	L Near	 0000145F _TEXT	
  CheckFruit . . . . . . . . . .	L Near	 00001485 _TEXT	
  NotFruit . . . . . . . . . . .	L Near	 000014AF _TEXT	
  CheckIfGhost . . . . . . . . .	L Near	 000014E2 _TEXT	
  NotGhost1  . . . . . . . . . .	L Near	 00001510 _TEXT	
  NotGhost2  . . . . . . . . . .	L Near	 00001532 _TEXT	
  NotGhost3  . . . . . . . . . .	L Near	 00001554 _TEXT	
  NotGhost4  . . . . . . . . . .	L Near	 00001573 _TEXT	
  CheckLevel3Ghosts  . . . . . .	L Near	 0000159B _TEXT	
  CheckGhost7  . . . . . . . . .	L Near	 000015C3 _TEXT	
  StandardGhost  . . . . . . . .	L Near	 000015E2 _TEXT	
  ResetGhostColor  . . . . . . .	L Near	 000015E9 _TEXT	
  NotGhost . . . . . . . . . . .	L Near	 000015F7 _TEXT	
  StandardDraw . . . . . . . . .	L Near	 0000161E _TEXT	
  ContinueDrawing  . . . . . . .	L Near	 00001623 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GameLoop . . . . . . . . . . . .	P Near	 00000A3F _TEXT	Length= 00000468 Public STDCALL
  GameLoopStart  . . . . . . . .	L Near	 00000A61 _TEXT	
  SkipPowerUpTimer . . . . . . .	L Near	 00000A8E _TEXT	
  NotPause . . . . . . . . . . .	L Near	 00000AA7 _TEXT	
  NotW . . . . . . . . . . . . .	L Near	 00000AC4 _TEXT	
  NotD . . . . . . . . . . . . .	L Near	 00000AD8 _TEXT	
  NotS . . . . . . . . . . . . .	L Near	 00000AEC _TEXT	
  NotA . . . . . . . . . . . . .	L Near	 00000B00 _TEXT	
  NoInput  . . . . . . . . . . .	L Near	 00000B0C _TEXT	
  UpdateLevel2 . . . . . . . . .	L Near	 00000B29 _TEXT	
  UpdateLevel3 . . . . . . . . .	L Near	 00000B30 _TEXT	
  SkipLevelUpdates . . . . . . .	L Near	 00000B35 _TEXT	
  ProcessMoveUp  . . . . . . . .	L Near	 00000B7F _TEXT	
  CheckTeleportUp  . . . . . . .	L Near	 00000BD7 _TEXT	
  CheckTeleport2Up . . . . . . .	L Near	 00000C10 _TEXT	
  NotTeleportUp  . . . . . . . .	L Near	 00000C16 _TEXT	
  ProcessMoveRight . . . . . . .	L Near	 00000C26 _TEXT	
  CheckTeleportRight . . . . . .	L Near	 00000C79 _TEXT	
  CheckTeleport2Right  . . . . .	L Near	 00000CB2 _TEXT	
  NotTeleportRight . . . . . . .	L Near	 00000CB8 _TEXT	
  ProcessMoveDown  . . . . . . .	L Near	 00000CC8 _TEXT	
  CheckTeleportDown  . . . . . .	L Near	 00000D20 _TEXT	
  CheckTeleport2Down . . . . . .	L Near	 00000D59 _TEXT	
  NotTeleportDown  . . . . . . .	L Near	 00000D5F _TEXT	
  ProcessMoveLeft  . . . . . . .	L Near	 00000D6F _TEXT	
  CheckTeleportLeft  . . . . . .	L Near	 00000DC2 _TEXT	
  CheckTeleport2Left . . . . . .	L Near	 00000DFB _TEXT	
  NotTeleportLeft  . . . . . . .	L Near	 00000E01 _TEXT	
  CheckLevel2Wall  . . . . . . .	L Near	 00000E0E _TEXT	
  SkipMovement . . . . . . . . .	L Near	 00000E5A _TEXT	
  GhostCollision . . . . . . . .	L Near	 00000E5C _TEXT	
  ContinueGame . . . . . . . . .	L Near	 00000E63 _TEXT	
  QuitGame . . . . . . . . . . .	L Near	 00000E8E _TEXT	
  CheckGameOver  . . . . . . . .	L Near	 00000E9C _TEXT	
  GameLoopEnd  . . . . . . . . .	L Near	 00000EA1 _TEXT	
GameOver . . . . . . . . . . . .	P Near	 00001BE5 _TEXT	Length= 0000000D Public STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HandleGhostCollision . . . . . .	P Near	 00001A7B _TEXT	Length= 00000085 Public STDCALL
  GhostPowerUpActive . . . . . .	L Near	 00001AE7 _TEXT	
  HandleGameOver . . . . . . . .	L Near	 00001AF0 _TEXT	
  HandleGhostDone  . . . . . . .	L Near	 00001AFE _TEXT	
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InitializeGame . . . . . . . . .	P Near	 000003CF _TEXT	Length= 000003F5 Public STDCALL
  InitializeGridLoop . . . . . .	L Near	 0000042C _TEXT	
  InitLevel1 . . . . . . . . . .	L Near	 00000495 _TEXT	
  InitLevel2 . . . . . . . . . .	L Near	 000004A1 _TEXT	
  InitLevel3 . . . . . . . . . .	L Near	 000004CD _TEXT	
  CheckLevel3Init  . . . . . . .	L Near	 000004F4 _TEXT	
  TopLeftHorizontal  . . . . . .	L Near	 00000556 _TEXT	
  TopLeftVertical  . . . . . . .	L Near	 00000579 _TEXT	
  TopRightHorizontal . . . . . .	L Near	 000005A1 _TEXT	
  TopRightVertical . . . . . . .	L Near	 000005C4 _TEXT	
  BoxLeftLoop  . . . . . . . . .	L Near	 000005EC _TEXT	
  BoxLeftInnerLoop . . . . . . .	L Near	 000005F3 _TEXT	
  BoxRightLoop . . . . . . . . .	L Near	 00000620 _TEXT	
  BoxRightInnerLoop  . . . . . .	L Near	 00000627 _TEXT	
  GhostBoxTop  . . . . . . . . .	L Near	 00000654 _TEXT	
  GhostBoxSides  . . . . . . . .	L Near	 00000667 _TEXT	
  NotLevel3Init  . . . . . . . .	L Near	 000006A5 _TEXT	
  CheckLevel3Ghosts  . . . . . .	L Near	 00000775 _TEXT	
  SkipExtraGhosts  . . . . . . .	L Near	 000007BE _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MoveGhostTowardPacman  . . . . .	P Near	 0000120D _TEXT	Length= 00000128 Public STDCALL
  TryMoveUp  . . . . . . . . . .	L Near	 00001278 _TEXT	
  TryMoveRight . . . . . . . . .	L Near	 00001289 _TEXT	
  TryMoveDown  . . . . . . . . .	L Near	 00001295 _TEXT	
  TryMoveLeft  . . . . . . . . .	L Near	 000012A6 _TEXT	
  RandomMove . . . . . . . . . .	L Near	 000012B2 _TEXT	
  NoMove . . . . . . . . . . . .	L Near	 000012CD _TEXT	
  GhostPositionInvalid . . . . .	L Near	 000012CD _TEXT	
  UpdateGhost  . . . . . . . . .	L Near	 000012D1 _TEXT	
  NoCollision  . . . . . . . . .	L Near	 000012F1 _TEXT	
  NormalGhost  . . . . . . . . .	L Near	 00001325 _TEXT	
  PlaceGhost . . . . . . . . . .	L Near	 0000132A _TEXT	
  StayInPlace  . . . . . . . . .	L Near	 00001332 _TEXT	
  GhostMoveDone  . . . . . . . .	L Near	 00001334 _TEXT	
MoveGhosts . . . . . . . . . . .	P Near	 0000108F _TEXT	Length= 0000015A Public STDCALL
  CheckLevel3GhostAppearance . .	L Near	 000010D1 _TEXT	
  SkipExtraGhostAppearance . . .	L Near	 000010F0 _TEXT	
  CheckLevel3Ghosts  . . . . . .	L Near	 00001153 _TEXT	
  SkipExtraGhostMovement . . . .	L Near	 000011E8 _TEXT	
MovePacman . . . . . . . . . . .	P Near	 00000EA7 _TEXT	Length= 000001E8 Public STDCALL
  NotDot . . . . . . . . . . . .	L Near	 00000EF2 _TEXT	
  NotFruit . . . . . . . . . . .	L Near	 00000F19 _TEXT	
  CheckGhostCollision  . . . . .	L Near	 00000F5F _TEXT	
  KillGhost  . . . . . . . . . .	L Near	 00000F6E _TEXT	
  CheckLevel3Ghosts  . . . . . .	L Near	 00000FBF _TEXT	
  ResetGhost6  . . . . . . . . .	L Near	 00000FE1 _TEXT	
  ResetGhost7  . . . . . . . . .	L Near	 00000FF6 _TEXT	
  ResetGhost1  . . . . . . . . .	L Near	 0000100B _TEXT	
  ResetGhost2  . . . . . . . . .	L Near	 00001020 _TEXT	
  ResetGhost3  . . . . . . . . .	L Near	 00001035 _TEXT	
  ResetGhost4  . . . . . . . . .	L Near	 0000104A _TEXT	
  ResetGhost5  . . . . . . . . .	L Near	 0000105F _TEXT	
  ContinueMove . . . . . . . . .	L Near	 00001072 _TEXT	
MoveWallsRight . . . . . . . . .	P Near	 0000179A _TEXT	Length= 0000008F Public STDCALL
  MoveWallsLoopStart . . . . . .	L Near	 000017BC _TEXT	
  PutEmptyChar . . . . . . . . .	L Near	 00001805 _TEXT	
  NotWall  . . . . . . . . . . .	L Near	 00001810 _TEXT	
  ResetThisRow . . . . . . . . .	L Near	 00001816 _TEXT	
  MoveWallsDone  . . . . . . . .	L Near	 00001827 _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MyParseDecimal32 . . . . . . . .	P Near	 00001DDE _TEXT	Length= 00000033 Public STDCALL
  ConvertLoop  . . . . . . . . .	L Near	 00001DF3 _TEXT	
  BuildString  . . . . . . . . .	L Near	 00001E02 _TEXT	
  PopLoop  . . . . . . . . . . .	L Near	 00001E06 _TEXT	
  ParseDone  . . . . . . . . . .	L Near	 00001E0C _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlaySoundFile  . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001C9 Public STDCALL
  pFileName  . . . . . . . . . .	DWord	 bp + 00000008
  useBeep  . . . . . . . . . . .	DWord	 bp + 0000000C
  beepDuration . . . . . . . . .	DWord	 bp + 00000010
  CopyFilename . . . . . . . . .	L Near	 00000055 _TEXT	
  DoneCopyFilename . . . . . . .	L Near	 00000061 _TEXT	
  UseFallbackBeep  . . . . . . .	L Near	 000001B9 _TEXT	
  DonePlayingSound . . . . . . .	L Near	 000001C4 _TEXT	
PlaySound  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ResetRowToLeft . . . . . . . . .	P Near	 00001829 _TEXT	Length= 00000252 Public STDCALL
  ClearWallsLoopStart  . . . . .	L Near	 0000183C _TEXT	
  SkipClear  . . . . . . . . . .	L Near	 00001856 _TEXT	
  PlaceRow1Walls . . . . . . . .	L Near	 0000187B _TEXT	
  PlaceRow1Wall1Start  . . . . .	L Near	 00001892 _TEXT	
  PlaceRow1Wall2Start  . . . . .	L Near	 000018B3 _TEXT	
  PlaceRow2Walls . . . . . . . .	L Near	 000018C2 _TEXT	
  PlaceRow2Wall1Start  . . . . .	L Near	 000018D9 _TEXT	
  PlaceRow2Wall2Start  . . . . .	L Near	 000018FA _TEXT	
  PlaceRow2Wall3Start  . . . . .	L Near	 0000191B _TEXT	
  PlaceRow2Wall4Start  . . . . .	L Near	 0000193C _TEXT	
  PlaceRow2Wall5Start  . . . . .	L Near	 0000195D _TEXT	
  PlaceRow3Walls . . . . . . . .	L Near	 0000196C _TEXT	
  PlaceRow3Wall1Start  . . . . .	L Near	 00001983 _TEXT	
  PlaceRow3Wall2Start  . . . . .	L Near	 000019A4 _TEXT	
  PlaceRow3Wall3Start  . . . . .	L Near	 000019C5 _TEXT	
  PlaceRow4Walls . . . . . . . .	L Near	 000019D4 _TEXT	
  PlaceRow4Wall1Start  . . . . .	L Near	 000019EB _TEXT	
  PlaceRow4Wall2Start  . . . . .	L Near	 00001A0C _TEXT	
  PlaceRow4Wall3Start  . . . . .	L Near	 00001A2D _TEXT	
  PlaceRow4Wall4Start  . . . . .	L Near	 00001A4E _TEXT	
  PlaceRow4Wall5Start  . . . . .	L Near	 00001A6F _TEXT	
  ResetDone  . . . . . . . . . .	L Near	 00001A79 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowGameOverScreen . . . . . . .	P Near	 00001C4B _TEXT	Length= 000000C6 Public STDCALL
  ShowLivesLostReason  . . . . .	L Near	 00001CDF _TEXT	
  ShowPelletsCollectedReason . .	L Near	 00001CEB _TEXT	
  ShowQuitReason . . . . . . . .	L Near	 00001CF7 _TEXT	
  WriteHighscoreSection  . . . .	L Near	 00001D01 _TEXT	
  GameOverScreenDone . . . . . .	L Near	 00001D0F _TEXT	
ShowLevelSelection . . . . . . .	P Near	 0000028F _TEXT	Length= 00000140 Public STDCALL
  LevelSelectLoop  . . . . . . .	L Near	 0000029E _TEXT	
  SkipArrow1 . . . . . . . . . .	L Near	 000002E6 _TEXT	
  SkipArrow2 . . . . . . . . . .	L Near	 00000311 _TEXT	
  SkipArrow3 . . . . . . . . . .	L Near	 0000033C _TEXT	
  NotW . . . . . . . . . . . . .	L Near	 0000036E _TEXT	
  NotS . . . . . . . . . . . . .	L Near	 0000038E _TEXT	
  LevelSelected  . . . . . . . .	L Near	 000003BA _TEXT	
ShowWelcomeScreen  . . . . . . .	P Near	 00000214 _TEXT	Length= 0000007B Public STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SlideWalls . . . . . . . . . . .	P Near	 0000176F _TEXT	Length= 0000002B Public STDCALL
SpawnFruit . . . . . . . . . . .	P Near	 00001BF2 _TEXT	Length= 0000002A Public STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
TogglePause  . . . . . . . . . .	P Near	 00001B00 _TEXT	Length= 000000E5 Public STDCALL
  ShowPauseScreen  . . . . . . .	L Near	 00001B18 _TEXT	
UpdateGhostAppearance  . . . . .	P Near	 000011E9 _TEXT	Length= 00000024 Public STDCALL
  NotVulnerable  . . . . . . . .	L Near	 00001200 _TEXT	
  DoneUpdateAppearance . . . . .	L Near	 0000120B _TEXT	
UpdateLevel2Features . . . . . .	P Near	 0000166F _TEXT	Length= 00000080 Public STDCALL
  L2_ProcessFeatures . . . . . .	L Near	 00001679 _TEXT	
  SkipFruitHandling  . . . . . .	L Near	 000016C0 _TEXT	
  CheckPowerUpTimer  . . . . . .	L Near	 000016CA _TEXT	
  PowerUpStillActive . . . . . .	L Near	 000016EE _TEXT	
UpdateLevel3Features . . . . . .	P Near	 000016EF _TEXT	Length= 00000080 Public STDCALL
  L3_ProcessFeatures . . . . . .	L Near	 000016F9 _TEXT	
  SkipFruitHandling  . . . . . .	L Near	 00001740 _TEXT	
  CheckPowerUpTimer  . . . . . .	L Near	 0000174A _TEXT	
  PowerUpStillActive . . . . . .	L Near	 0000176E _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHighscore . . . . . . . . .	P Near	 00001D11 _TEXT	Length= 000000CD Public STDCALL
  CopyNameLoop . . . . . . . . .	L Near	 00001D2F _TEXT	
  DoneWithName . . . . . . . . .	L Near	 00001D3B _TEXT	
  FindEndLoop  . . . . . . . . .	L Near	 00001D5C _TEXT	
  FoundEnd . . . . . . . . . . .	L Near	 00001D64 _TEXT	
  StrLenLoop . . . . . . . . . .	L Near	 00001DB0 _TEXT	
  DoneCountingLength . . . . . .	L Near	 00001DB9 _TEXT	
  FileError  . . . . . . . . . .	L Near	 00001DDC _TEXT	
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 000001C9 _TEXT	Length= 0000004B Public STDCALL
mciSendStringA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DOWN_DIR . . . . . . . . . . . .	DWord	 00000EB2 _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_A  . . . . . . . . . . . . .	DWord	 00000EBE _DATA	
KEY_D  . . . . . . . . . . . . .	DWord	 00000EC6 _DATA	
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
KEY_P  . . . . . . . . . . . . .	DWord	 00002AED _DATA	
KEY_Q  . . . . . . . . . . . . .	DWord	 00000ECA _DATA	
KEY_SPACE  . . . . . . . . . . .	DWord	 00002E55 _DATA	
KEY_S_DOWN . . . . . . . . . . .	DWord	 00002E51 _DATA	
KEY_S  . . . . . . . . . . . . .	DWord	 00000EC2 _DATA	
KEY_W_UP . . . . . . . . . . . .	DWord	 00002E4D _DATA	
KEY_W  . . . . . . . . . . . . .	DWord	 00000EBA _DATA	
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LEFT_DIR . . . . . . . . . . . .	DWord	 00000EB6 _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MOVE_DELAY . . . . . . . . . . .	DWord	 00002E5D _DATA	
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
RIGHT_DIR  . . . . . . . . . . .	DWord	 00000EAE _DATA	
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SND_ASYNC  . . . . . . . . . . .	Number	 00000001h   
SND_FILENAME . . . . . . . . . .	Number	 00020000h   
SND_SYNC . . . . . . . . . . . .	Number	 00000000h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UP_DIR . . . . . . . . . . . . .	DWord	 00000EAA _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bufferCoord  . . . . . . . . . .	COORD	 00000E82 _DATA	
bufferSize . . . . . . . . . . .	COORD	 00000E7E _DATA	
bytesWritten . . . . . . . . . .	DWord	 00002F70 _DATA	
cellState  . . . . . . . . . . .	Byte	 00002329 _DATA	
cellsWritten . . . . . . . . . .	DWord	 00000E88 _DATA	
charAttr . . . . . . . . . . . .	Word	 00000E86 _DATA	
commaChar  . . . . . . . . . . .	Byte	 00003074 _DATA	
consoleHandle  . . . . . . . . .	DWord	 00000E66 _DATA	
coordScreen  . . . . . . . . . .	COORD	 00000E72 _DATA	
currentLevel . . . . . . . . . .	Byte	 0000062D _DATA	
cursorInfo . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000E6A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
deathSoundDur  . . . . . . . . .	DWord	 00003455 _DATA	
deathSoundFile . . . . . . . . .	Byte	 0000342A _DATA	
deathSoundFreq . . . . . . . . .	DWord	 00003451 _DATA	
dotChar  . . . . . . . . . . . .	Byte	 00000640 _DATA	
emptyChar  . . . . . . . . . . .	Byte	 0000063E _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00002F6C _DATA	
fruitActive  . . . . . . . . . .	Byte	 00002E65 _DATA	
fruitChar  . . . . . . . . . . .	Byte	 00000642 _DATA	
fruitEatenMsg  . . . . . . . . .	Byte	 00002EDB _DATA	
fruitInitMsg . . . . . . . . . .	Byte	 00002EBB _DATA	
fruitPoints  . . . . . . . . . .	DWord	 00002E6A _DATA	
fruitPos . . . . . . . . . . . .	DWord	 00002E61 _DATA	
fruitSetupMsg  . . . . . . . . .	Byte	 00002F1C _DATA	
fruitSpawnMsg  . . . . . . . . .	Byte	 00002EA4 _DATA	
fruitStatusMsg . . . . . . . . .	Byte	 00002EFC _DATA	
fruitTimerMsg  . . . . . . . . .	Byte	 00002F0E _DATA	
fruitTimer . . . . . . . . . . .	DWord	 00002E66 _DATA	
gameEndReason  . . . . . . . . .	Byte	 00000EA9 _DATA	
gameOverArt  . . . . . . . . . .	Byte	 00000F60 _DATA	
gameOverSoundDur . . . . . . . .	DWord	 0000345D _DATA	
gameOverSoundFile  . . . . . . .	Byte	 00003434 _DATA	
gameOverSoundFreq  . . . . . . .	DWord	 00003459 _DATA	
gameRunning  . . . . . . . . . .	Byte	 00000EA4 _DATA	
ghost1Color  . . . . . . . . . .	Word	 00002F4F _DATA	
ghost1Pos  . . . . . . . . . . .	DWord	 00000E90 _DATA	
ghost2Color  . . . . . . . . . .	Word	 00002F51 _DATA	
ghost2Pos  . . . . . . . . . . .	DWord	 00000E94 _DATA	
ghost3Color  . . . . . . . . . .	Word	 00002F53 _DATA	
ghost3Pos  . . . . . . . . . . .	DWord	 00000E98 _DATA	
ghost4Color  . . . . . . . . . .	Word	 00002F55 _DATA	
ghost4Pos  . . . . . . . . . . .	DWord	 00000E9C _DATA	
ghost5Color  . . . . . . . . . .	Word	 00002F57 _DATA	
ghost5Pos  . . . . . . . . . . .	DWord	 00000EA0 _DATA	
ghost6Color  . . . . . . . . . .	Word	 00002F59 _DATA	
ghost6Pos  . . . . . . . . . . .	DWord	 00002F43 _DATA	
ghost7Color  . . . . . . . . . .	Word	 00002F5B _DATA	
ghost7Pos  . . . . . . . . . . .	DWord	 00002F47 _DATA	
ghostChar  . . . . . . . . . . .	Byte	 0000063A _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
gridHeight . . . . . . . . . . .	DWord	 00000632 _DATA	
gridWidth  . . . . . . . . . . .	DWord	 0000062E _DATA	
grid . . . . . . . . . . . . . .	Byte	 00000644 _DATA	
highscoresFile . . . . . . . . .	Byte	 00002F5D _DATA	
instruction10  . . . . . . . . .	Byte	 00002AC4 _DATA	
instruction1 . . . . . . . . . .	Byte	 0000299D _DATA	
instruction2 . . . . . . . . . .	Byte	 000029AA _DATA	
instruction3 . . . . . . . . . .	Byte	 000029C9 _DATA	
instruction4 . . . . . . . . . .	Byte	 000029F7 _DATA	
instruction5 . . . . . . . . . .	Byte	 00002A1D _DATA	
instruction6 . . . . . . . . . .	Byte	 00002A59 _DATA	
instruction7 . . . . . . . . . .	Byte	 00002A7D _DATA	
instruction8 . . . . . . . . . .	Byte	 00002A8F _DATA	
instruction9 . . . . . . . . . .	Byte	 00002A9B _DATA	
instructionsArt  . . . . . . . .	Byte	 00002830 _DATA	
invalidLevelMsg  . . . . . . . .	Byte	 000005E2 _DATA	
isPaused . . . . . . . . . . . .	Byte	 00002AF1 _DATA	
lastCellContent  . . . . . . . .	Byte	 00000E4C _DATA	
lastDirection  . . . . . . . . .	DWord	 00002E59 _DATA	
level1Art  . . . . . . . . . . .	Byte	 00002AF2 _DATA	
level1Msg  . . . . . . . . . . .	Byte	 0000059A _DATA	
level2Art  . . . . . . . . . . .	Byte	 00002BF9 _DATA	
level2Msg  . . . . . . . . . . .	Byte	 000005B3 _DATA	
level3Art  . . . . . . . . . . .	Byte	 00002D10 _DATA	
level3GhostDelay . . . . . . . .	DWord	 00002F4B _DATA	
level3Msg  . . . . . . . . . . .	Byte	 000005CA _DATA	
levelPrompt  . . . . . . . . . .	Byte	 00000585 _DATA	
levelSelectMsg . . . . . . . . .	Byte	 00002E29 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
livesMsg . . . . . . . . . . . .	Byte	 00000E5E _DATA	
lives  . . . . . . . . . . . . .	DWord	 00000E44 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
mciAlias . . . . . . . . . . . .	Byte	 00003408 _DATA	
mciCloseCmd  . . . . . . . . . .	Byte	 00003282 _DATA	
mciOpenCmd . . . . . . . . . . .	Byte	 00003078 _DATA	
mciPlayCmd . . . . . . . . . . .	Byte	 0000317D _DATA	
mciReturn  . . . . . . . . . . .	Byte	 00003388 _DATA	
msgAllPelletsCollected . . . . .	Byte	 00000F36 _DATA	
msgGameOver  . . . . . . . . . .	Byte	 00000EF3 _DATA	
msgLivesLost . . . . . . . . . .	Byte	 00000F27 _DATA	
msgQuitGame  . . . . . . . . . .	Byte	 00000F4C _DATA	
msgQuit  . . . . . . . . . . . .	Byte	 00000ECE _DATA	
msgReason  . . . . . . . . . . .	Byte	 00000F1E _DATA	
msgWin . . . . . . . . . . . . .	Byte	 00000EFE _DATA	
nameMsg  . . . . . . . . . . . .	Byte	 00000624 _DATA	
namePrompt . . . . . . . . . . .	Byte	 00000573 _DATA	
newlineChars . . . . . . . . . .	Byte	 00003076 _DATA	
normalMsg  . . . . . . . . . . .	Byte	 00002E92 _DATA	
pacmanChar . . . . . . . . . . .	Byte	 00000638 _DATA	
pacmanPos  . . . . . . . . . . .	DWord	 00000E8C _DATA	
pauseArt . . . . . . . . . . . .	Byte	 0000232A _DATA	
pelletSoundDur . . . . . . . . .	DWord	 00003445 _DATA	
pelletSoundFile  . . . . . . . .	Byte	 00003412 _DATA	
pelletSoundFreq  . . . . . . . .	DWord	 00003441 _DATA	
playerName . . . . . . . . . . .	Byte	 00000604 _DATA	
powerUpActive  . . . . . . . . .	Byte	 00000E4D _DATA	
powerUpDuration  . . . . . . . .	DWord	 00000E52 _DATA	
powerUpMsg . . . . . . . . . . .	Byte	 00002E80 _DATA	
powerUpTimer . . . . . . . . . .	DWord	 00000E4E _DATA	
rectScreen . . . . . . . . . . .	SMALL_RECT  00000E76 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
remainingDots  . . . . . . . . .	DWord	 00000EA5 _DATA	
scoreBuffer  . . . . . . . . . .	Byte	 00002F74 _DATA	
scoreMsg . . . . . . . . . . . .	Byte	 00000E56 _DATA	
score  . . . . . . . . . . . . .	DWord	 00000E48 _DATA	
selectedLevel  . . . . . . . . .	Byte	 00002E28 _DATA	
selectionArrow . . . . . . . . .	Byte	 00002E25 _DATA	
szTypeMP3  . . . . . . . . . . .	Byte	 00001E11 _TEXT	
teleport1Pos . . . . . . . . . .	DWord	 00002F3B _DATA	
teleport2Pos . . . . . . . . . .	DWord	 00002F3F _DATA	
teleportPadChar  . . . . . . . .	Byte	 00002F39 _DATA	
teleportSoundDur . . . . . . . .	DWord	 0000344D _DATA	
teleportSoundFile  . . . . . . .	Byte	 0000341D _DATA	
teleportSoundFreq  . . . . . . .	DWord	 00003449 _DATA	
tempCol  . . . . . . . . . . . .	DWord	 0000231D _DATA	
tempDir  . . . . . . . . . . . .	DWord	 00002325 _DATA	
tempPos  . . . . . . . . . . . .	DWord	 00002321 _DATA	
tempRow  . . . . . . . . . . . .	DWord	 00002319 _DATA	
vulnerableGhostChar  . . . . . .	Byte	 0000063C _DATA	
wallChar . . . . . . . . . . . .	Byte	 00000636 _DATA	
wallColorLevel1  . . . . . . . .	Word	 00002E7A _DATA	
wallColorLevel2  . . . . . . . .	Word	 00002E7C _DATA	
wallColorLevel3  . . . . . . . .	Word	 00002E7E _DATA	
wallDirection  . . . . . . . . .	DWord	 00002E6E _DATA	
wallSlideDelay . . . . . . . . .	DWord	 00002E76 _DATA	
wallSlideTimer . . . . . . . . .	DWord	 00002E72 _DATA	
welcomeArt . . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
